import "./chunk-2LSFTFF7.js";

// ../node_modules/reduce-reducers/es/index.js
var es_default = function() {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  var initialState = typeof args[0] !== "function" && args.shift();
  var reducers = args;
  if (typeof initialState === "undefined") {
    throw new TypeError("The initial state may not be undefined. If you do not want to set a value for this reducer, you can use null instead of undefined.");
  }
  return function(prevState, value) {
    for (var _len2 = arguments.length, args2 = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
      args2[_key2 - 2] = arguments[_key2];
    }
    var prevStateIsUndefined = typeof prevState === "undefined";
    var valueIsUndefined = typeof value === "undefined";
    if (prevStateIsUndefined && valueIsUndefined && initialState) {
      return initialState;
    }
    return reducers.reduce(function(newState, reducer, index) {
      if (typeof reducer === "undefined") {
        throw new TypeError("An undefined reducer was passed in at index " + index);
      }
      return reducer.apply(void 0, [newState, value].concat(args2));
    }, prevStateIsUndefined && !valueIsUndefined && initialState ? initialState : prevState);
  };
};
export {
  es_default as default
};
//# sourceMappingURL=reduce-reducers.js.map
