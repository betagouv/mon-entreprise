import {
  Arrow,
  BasepathContext,
  DottedNameContext,
  EngineContext,
  RenderersContext,
  RuleLink,
  RuleLinkWithContext,
  defaultRenderers,
  useEngine
} from "./chunk-53Z4L563.js";
import {
  nt,
  st
} from "./chunk-6XDI4R7H.js";
import "./chunk-P6ADJXLK.js";
import {
  require_jsx_runtime
} from "./chunk-NRX3E354.js";
import {
  require_react_dom
} from "./chunk-JTBF2GAF.js";
import {
  require_react
} from "./chunk-4BTUQGSU.js";
import {
  __toESM
} from "./chunk-2LSFTFF7.js";

// ../node_modules/@publicodes/react-ui/dist/index.js
var import_jsx_runtime = __toESM(require_jsx_runtime());
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
import { utils as utils6 } from "publicodes";
import { transformAST } from "publicodes";
import { parseUnit } from "publicodes";
import { formatValue } from "publicodes";
var import_jsx_runtime3 = __toESM(require_jsx_runtime());
var import_jsx_runtime4 = __toESM(require_jsx_runtime());
var import_jsx_runtime5 = __toESM(require_jsx_runtime());
var import_react = __toESM(require_react());
var import_react2 = __toESM(require_react());
var import_jsx_runtime6 = __toESM(require_jsx_runtime());
var import_jsx_runtime7 = __toESM(require_jsx_runtime());
var import_jsx_runtime8 = __toESM(require_jsx_runtime());
var import_jsx_runtime9 = __toESM(require_jsx_runtime());
var import_react3 = __toESM(require_react());
import { formatValue as formatValue2 } from "publicodes";
var import_jsx_runtime10 = __toESM(require_jsx_runtime());
var import_jsx_runtime11 = __toESM(require_jsx_runtime());
var import_jsx_runtime12 = __toESM(require_jsx_runtime());
var import_jsx_runtime13 = __toESM(require_jsx_runtime());
var import_jsx_runtime14 = __toESM(require_jsx_runtime());
var import_jsx_runtime15 = __toESM(require_jsx_runtime());
var import_jsx_runtime16 = __toESM(require_jsx_runtime());
var import_react4 = __toESM(require_react());
var import_jsx_runtime17 = __toESM(require_jsx_runtime());
var import_jsx_runtime18 = __toESM(require_jsx_runtime());
var import_jsx_runtime19 = __toESM(require_jsx_runtime());
var import_jsx_runtime20 = __toESM(require_jsx_runtime());
var import_react5 = __toESM(require_react());
var import_jsx_runtime21 = __toESM(require_jsx_runtime());
var import_jsx_runtime22 = __toESM(require_jsx_runtime());
var import_jsx_runtime23 = __toESM(require_jsx_runtime());
var import_jsx_runtime24 = __toESM(require_jsx_runtime());
var import_react6 = __toESM(require_react());
import { formatValue as formatValue3, serializeUnit } from "publicodes";
var import_jsx_runtime25 = __toESM(require_jsx_runtime());
var import_jsx_runtime26 = __toESM(require_jsx_runtime());
var import_jsx_runtime27 = __toESM(require_jsx_runtime());
var import_jsx_runtime28 = __toESM(require_jsx_runtime());
var import_react7 = __toESM(require_react());
import {
  formatValue as formatValue5,
  serializeUnit as serializeUnit2,
  utils as utils5
} from "publicodes";
var import_react8 = __toESM(require_react());
import { reduceAST } from "publicodes";
import { utils as utils2 } from "publicodes";
var import_jsx_runtime29 = __toESM(require_jsx_runtime());
var import_jsx_runtime30 = __toESM(require_jsx_runtime());
var import_react9 = __toESM(require_react());
var import_jsx_runtime31 = __toESM(require_jsx_runtime());
var import_jsx_runtime32 = __toESM(require_jsx_runtime());
var import_react10 = __toESM(require_react());
var import_react_dom = __toESM(require_react_dom());
import { formatValue as formatValue4, utils } from "publicodes";
import { utils as utils3 } from "publicodes";
import { utils as utils4 } from "publicodes";
var import_jsx_runtime33 = __toESM(require_jsx_runtime());
var import_jsx_runtime34 = __toESM(require_jsx_runtime());
var import_jsx_runtime35 = __toESM(require_jsx_runtime());
var InfixMecanism = ({
  value,
  prefixed,
  children
}) => {
  return (0, import_jsx_runtime.jsxs)("div", { children: [
    prefixed && children,
    (0, import_jsx_runtime.jsx)(
      "div",
      {
        className: "value",
        style: {
          position: "relative",
          margin: "1rem 0"
        },
        children: (0, import_jsx_runtime.jsx)(Explanation, { node: value })
      }
    ),
    !prefixed && children
  ] });
};
function MecanismArrondi(node) {
  return (0, import_jsx_runtime2.jsx)(InfixMecanism, { value: node.explanation.valeur, children: (0, import_jsx_runtime2.jsxs)("p", { children: [
    (0, import_jsx_runtime2.jsx)("strong", { children: "Arrondi : " }),
    (0, import_jsx_runtime2.jsx)(Explanation, { node: node.explanation.arrondi })
  ] }) });
}
var NodeValueLeaf = ({ data, unit }) => {
  return (0, import_jsx_runtime3.jsx)(
    StyledNodeValuePointer,
    {
      className: "node-value-pointer",
      title: data === null ? "Non applicable" : "",
      "aria-label": data === null ? "Valeur non applicable" : "",
      children: data === null ? (0, import_jsx_runtime3.jsx)("span", { "aria-hidden": true, children: "-" }) : formatValue({ nodeValue: data, unit })
    }
  );
};
var StyledNodeValuePointer = st.span`
	background: white;
	border-bottom: 0 !important;
	font-size: 0.875rem;
	line-height: 1.25rem;
	margin: 0 0.2rem;
	flex-shrink: 0;
	padding: 0.1rem 0.2rem;
	text-decoration: none !important;
	box-shadow:
		0px 1px 2px 1px #d9d9d9,
		0 0 0 1px #d9d9d9;
	border: 1px solid #f8f9fa;
	border-radius: 0.2rem;
`;
var colors = {
  "applicable si": "#7B1FA2",
  "non applicable si": "#7B1FA2",
  "est applicable": "#00796B",
  "est non applicable": "#00796B",
  "est défini": "#00796B",
  "est non défini": "#00796B",
  somme: "#18457B",
  plafond: "#EF6C00",
  plancher: "#EF6C00",
  abattement: "#B73731",
  produit: "#2ecc71",
  "une de ces conditions": "#3498db",
  "toutes ces conditions": "#3498db",
  "le maximum de": "#795548",
  "le minimum de": "#795548",
  variations: "#FF9800",
  "par défaut": "#00695C",
  "taux progressif": "#795548",
  barème: "#9B296F",
  grille: "#AD1457",
  "une possibilité": "#00796B",
  avec: "#2653ce"
};
var mecanismColors_default = (name) => {
  if (name in colors) {
    return colors[name];
  }
  return "palevioletred";
};
function Mecanism({
  name,
  value,
  children,
  unit,
  displayName = true,
  docUrl
}) {
  return (0, import_jsx_runtime4.jsxs)(StyledMecanism, { $mecanismName: name, children: [
    displayName && (0, import_jsx_runtime4.jsx)(MecanismName, { name, href: docUrl, children: name }),
    (0, import_jsx_runtime4.jsxs)("div", { children: [
      children,
      value !== void 0 && (0, import_jsx_runtime4.jsxs)(StyledMecanismValue, { children: [
        (0, import_jsx_runtime4.jsx)("small", { children: " = " }),
        (0, import_jsx_runtime4.jsx)(NodeValueLeaf, { data: value, unit })
      ] })
    ] })
  ] });
}
var StyledMecanism = st.div`
	border: 1px solid;
	max-width: 100%;
	border-radius: 3px;
	padding: 0.5rem 1rem;
	position: relative;
	flex: 1;
	flex-direction: column;
	text-align: left;
	border-color: ${({ $mecanismName }) => mecanismColors_default($mecanismName)};
	.properties > li {
		margin: 1rem 0;
	}
`;
var MecanismName = ({
  name,
  inline = false,
  children,
  href
}) => {
  return (0, import_jsx_runtime4.jsx)(import_jsx_runtime4.Fragment, { children: (0, import_jsx_runtime4.jsx)(
    StyledMecanismName,
    {
      name,
      $inline: inline,
      target: "_blank",
      href: href ?? `https://publi.codes/docs/mecanismes#${name}`,
      children
    }
  ) });
};
var StyledMecanismName = st.a`
	background-color: ${({ name }) => mecanismColors_default(name)} !important;
	font-size: inherit;
	display: inline-block;
	font-weight: inherit;
	width: fit-content;
	font-family: inherit;
	padding: 0.4rem 0.6rem !important;
	color: white !important;
	transition: hover 0.2s;
	:hover {
		color: white;
	}
	${(props) => props.$inline ? nt`
				border-radius: 0.3rem;
				margin-bottom: 0.5rem;
			` : nt`
				top: -0.5rem;
				position: relative;
				margin-left: -1rem;
				border-radius: 0 !important;
				border-bottom-right-radius: 0.3rem !important;
				::first-letter {
					text-transform: capitalize;
				}
			`}
	:hover {
		opacity: 0.8;
	}
`;
var StyledMecanismValue = st.div`
	text-align: right;
	margin-top: 1rem;
	font-weight: bold;
`;
function Barème({ nodeValue, explanation, unit }) {
  return (0, import_jsx_runtime5.jsx)(Mecanism, { name: "barème", value: nodeValue, unit, children: (0, import_jsx_runtime5.jsx)(StyledComponent, { children: (0, import_jsx_runtime5.jsxs)("ul", { className: "properties", children: [
    (0, import_jsx_runtime5.jsx)(BarèmeAttributes, { explanation }),
    (0, import_jsx_runtime5.jsx)(
      TrancheTable,
      {
        tranches: explanation.tranches,
        multiplicateur: explanation.multiplicateur
      }
    ),
    nodeValue != void 0 && explanation.tranches.length > 2 && (0, import_jsx_runtime5.jsxs)(import_jsx_runtime5.Fragment, { children: [
      (0, import_jsx_runtime5.jsx)("b", { children: "Taux moyen : " }),
      (0, import_jsx_runtime5.jsx)(
        NodeValueLeaf,
        {
          data: 100 * nodeValue / (explanation.assiette.nodeValue ?? 1),
          unit: parseUnit("%")
        }
      )
    ] })
  ] }) }) });
}
var BarèmeAttributes = ({
  explanation
}) => {
  const multiplicateur = explanation.multiplicateur;
  return (0, import_jsx_runtime5.jsxs)(import_jsx_runtime5.Fragment, { children: [
    (0, import_jsx_runtime5.jsxs)("li", { children: [
      (0, import_jsx_runtime5.jsx)("span", { className: "key", children: "Assiette : " }),
      (0, import_jsx_runtime5.jsx)("span", { className: "value", children: (0, import_jsx_runtime5.jsx)(Explanation, { node: explanation.assiette }) })
    ] }, "assiette"),
    multiplicateur && !multiplicateur.isDefault && (0, import_jsx_runtime5.jsxs)("li", { children: [
      (0, import_jsx_runtime5.jsx)("span", { className: "key", children: "Multiplicateur : " }),
      (0, import_jsx_runtime5.jsx)("span", { className: "value", children: (0, import_jsx_runtime5.jsx)(Explanation, { node: multiplicateur }) })
    ] }, "multiplicateur")
  ] });
};
var TrancheTable = ({
  tranches,
  multiplicateur
}) => {
  const activeTranche = tranches.find(({ isActive }) => isActive);
  if (!tranches.length) {
    return null;
  }
  return (0, import_jsx_runtime5.jsxs)("table", { className: "tranches", children: [
    (0, import_jsx_runtime5.jsx)("thead", { children: (0, import_jsx_runtime5.jsxs)("tr", { children: [
      (0, import_jsx_runtime5.jsx)("th", { children: "Plafonds des tranches" }),
      "taux" in tranches[0] && (0, import_jsx_runtime5.jsx)("th", { children: "Taux" }),
      ("montant" in tranches[0] || (activeTranche == null ? void 0 : activeTranche.nodeValue) != void 0) && (0, import_jsx_runtime5.jsx)("th", { children: "Montant" })
    ] }) }),
    (0, import_jsx_runtime5.jsx)("tbody", { children: tranches.map((tranche, i) => (0, import_jsx_runtime5.jsx)(Tranche, { tranche, multiplicateur }, i)) })
  ] });
};
var Tranche = ({ tranche, multiplicateur }) => {
  const isHighlighted = tranche.isActive;
  return (0, import_jsx_runtime5.jsxs)("tr", { className: `tranche ${isHighlighted ? "activated" : ""}`, children: [
    (0, import_jsx_runtime5.jsx)("td", { children: tranche.plafond.nodeValue === Infinity ? "Au-delà du dernier plafond" : (0, import_jsx_runtime5.jsxs)(import_jsx_runtime5.Fragment, { children: [
      "Inférieur à ",
      (0, import_jsx_runtime5.jsx)(Explanation, { node: tranche.plafond }),
      multiplicateur && !multiplicateur.isDefault && (0, import_jsx_runtime5.jsxs)(import_jsx_runtime5.Fragment, { children: [
        " × ",
        (0, import_jsx_runtime5.jsx)(Explanation, { node: multiplicateur })
      ] })
    ] }) }, "tranche"),
    "taux" in tranche && (0, import_jsx_runtime5.jsx)("td", { children: (0, import_jsx_runtime5.jsx)(Explanation, { node: tranche.taux }) }, "taux"),
    (tranche.nodeValue != void 0 || "montant" in tranche) && (0, import_jsx_runtime5.jsx)("td", { children: "montant" in tranche ? (0, import_jsx_runtime5.jsx)(Explanation, { node: tranche.montant }) : (0, import_jsx_runtime5.jsx)(NodeValueLeaf, { data: tranche.nodeValue, unit: tranche.unit }) }, "value")
  ] });
};
var StyledComponent = st.div`
	table {
		margin: 1em 0;
		width: 100%;
		text-align: left;
		font-weight: 400;
	}
	table td {
		padding: 0.1em 0.4em;
	}
	table th {
		font-weight: 600;
	}
	table th:first-letter {
		text-transform: uppercase;
	}
	.tranche:nth-child(2n) {
		background: var(--lightestColor);
	}
	.tranche.activated {
		background: var(--lighterColor);
		font-weight: bold;
	}
`;
function Reference(node) {
  const engine = (0, import_react2.useContext)(EngineContext);
  const { dottedName, nodeValue, unit } = node;
  const rule = engine == null ? void 0 : engine.context.parsedRules[node.dottedName];
  if (!rule) {
    throw new Error(`Unknown rule: ${dottedName}`);
  }
  const [folded, setFolded] = (0, import_react2.useState)(true);
  const isFoldEnabled = (0, import_react2.useContext)(UnfoldIsEnabledContext);
  if (node.dottedName === node.contextDottedName + " . " + node.name && !node.name.includes(" . ") && rule.virtualRule) {
    return (0, import_jsx_runtime6.jsx)(Explanation, { node: engine == null ? void 0 : engine.evaluate(rule) });
  }
  return (0, import_jsx_runtime6.jsxs)(
    "div",
    {
      style: {
        display: "flex",
        flex: isFoldEnabled ? 1 : "initial",
        flexDirection: "column",
        maxWidth: "100%"
      },
      children: [
        (0, import_jsx_runtime6.jsxs)(
          "div",
          {
            style: {
              display: "flex",
              alignItems: "baseline",
              flexWrap: "wrap",
              justifyContent: "space-between"
            },
            children: [
              (0, import_jsx_runtime6.jsx)("span", { style: { paddingRight: "0.2rem" }, children: (0, import_jsx_runtime6.jsx)(RuleLinkWithContext, { dottedName }) }),
              (0, import_jsx_runtime6.jsxs)(
                "div",
                {
                  style: {
                    flex: 1,
                    display: "flex",
                    alignItems: "baseline"
                  },
                  children: [
                    isFoldEnabled && (0, import_jsx_runtime6.jsxs)(import_jsx_runtime6.Fragment, { children: [
                      (0, import_jsx_runtime6.jsx)(
                        UnfoldButton,
                        {
                          onClick: () => setFolded(!folded),
                          "aria-expanded": !folded,
                          className: "publicodes_btn-small",
                          "aria-label": folded ? "Déplier, afficher le détail" : "Replier, afficher le détail",
                          children: folded ? "Déplier" : "Replier"
                        }
                      ),
                      (0, import_jsx_runtime6.jsx)(StyledGuide, {})
                    ] }),
                    nodeValue !== void 0 && (0, import_jsx_runtime6.jsx)(NodeValueLeaf, { data: nodeValue, unit })
                  ]
                }
              )
            ]
          }
        ),
        " ",
        !folded && (0, import_jsx_runtime6.jsx)("div", { children: (0, import_jsx_runtime6.jsx)(UnfoldIsEnabledContext.Provider, { value: false, children: (0, import_jsx_runtime6.jsx)(Explanation, { node: engine == null ? void 0 : engine.evaluate(rule) }) }) })
      ]
    }
  );
}
var UnfoldIsEnabledContext = (0, import_react2.createContext)(false);
var UnfoldButton = st.button`
	text-transform: none !important;
`;
var StyledGuide = st.div`
	@media (max-width: 500px) {
		/* border: none; */
	}
	margin: 0.5rem;
	flex: 1;
	border-bottom: 2px dotted lightgray;
`;
function DefaultInlineMecanism({
  sourceMap,
  nodeValue,
  unit
}) {
  const { args, mecanismName } = sourceMap;
  const isChainableMecanism = "valeur" in args && mecanismName in args && Object.keys(args).length === 2;
  const isUnaryMecanism = "valeur" in args && Object.keys(args).length === 1;
  return (0, import_jsx_runtime7.jsxs)(import_jsx_runtime7.Fragment, { children: [
    isChainableMecanism && (0, import_jsx_runtime7.jsx)(ListOrScalarExplanation, { node: args.valeur }),
    (0, import_jsx_runtime7.jsx)(
      "div",
      {
        style: {
          marginTop: isChainableMecanism ? "1rem" : 0
        },
        children: (0, import_jsx_runtime7.jsx)(Mecanism, { name: mecanismName, value: nodeValue, unit, children: isChainableMecanism ? (0, import_jsx_runtime7.jsx)(
          ListOrScalarExplanation,
          {
            node: args[mecanismName],
            mecanismName
          }
        ) : isUnaryMecanism ? (0, import_jsx_runtime7.jsx)(
          ListOrScalarExplanation,
          {
            node: args.valeur,
            mecanismName
          }
        ) : (0, import_jsx_runtime7.jsx)("ul", { children: Object.entries(args).map(([key, value]) => (0, import_jsx_runtime7.jsxs)(
          "li",
          {
            style: {
              display: "flex",
              alignItems: "baseline",
              padding: "0.25rem 0"
            },
            children: [
              (0, import_jsx_runtime7.jsxs)("span", { children: [
                key,
                " : "
              ] }),
              (0, import_jsx_runtime7.jsx)("span", { children: (0, import_jsx_runtime7.jsx)(ListOrScalarExplanation, { node: value }) })
            ]
          },
          key
        )) }) })
      }
    )
  ] });
}
function ListOrScalarExplanation({
  node,
  mecanismName
}) {
  if (Array.isArray(node)) {
    const sign = mecanismName === "produit" ? "×" : mecanismName === "somme" ? "+" : void 0;
    return (0, import_jsx_runtime7.jsx)(
      Table,
      {
        explanation: node,
        hideNotApplicable: mecanismName !== "produit",
        sign
      }
    );
  }
  return (0, import_jsx_runtime7.jsx)(Explanation, { node });
}
var isZeroOrNotApplicable = (x) => {
  var _a;
  const nodeValue = (_a = (0, import_react.useContext)(EngineContext)) == null ? void 0 : _a.evaluate(x).nodeValue;
  return nodeValue === null || nodeValue === 0;
};
function Table({ explanation, hideNotApplicable = true, sign }) {
  const [applicableExplanation, notApplicableExplanation] = explanation.reduce(
    (acc, x) => {
      acc[hideNotApplicable && isZeroOrNotApplicable(x) ? 1 : 0].push(x);
      return acc;
    },
    [[], []]
  );
  const [showNotApplicable, setShowNotApplicable] = (0, import_react.useState)(
    applicableExplanation.length === 0
  );
  const id = (0, import_react.useMemo)(
    () => "notApplicableExplanation" + Math.random().toString(36).substring(7),
    []
  );
  return (0, import_jsx_runtime7.jsxs)(import_jsx_runtime7.Fragment, { children: [
    (0, import_jsx_runtime7.jsx)(StyledListContainer, { $sign: sign, children: applicableExplanation.map((node, i) => (0, import_jsx_runtime7.jsx)(Row, { node }, i)) }),
    notApplicableExplanation.length > 0 && applicableExplanation.length !== 0 && (0, import_jsx_runtime7.jsx)(
      StyledButtonContainer,
      {
        style: {
          textAlign: "right"
        },
        children: (0, import_jsx_runtime7.jsx)(
          "button",
          {
            "aria-expanded": showNotApplicable,
            "aria-controls": id,
            className: "publicodes_btn-small",
            onClick: () => setShowNotApplicable(!showNotApplicable),
            children: showNotApplicable ? "Masquer les valeurs non applicable" : `Voir toute la liste`
          }
        )
      }
    ),
    showNotApplicable && (0, import_jsx_runtime7.jsx)(
      StyledListContainer,
      {
        id,
        $sign: sign,
        $showFirst: applicableExplanation.length > 0,
        children: notApplicableExplanation.map((node, i) => (0, import_jsx_runtime7.jsx)(Row, { node }, i))
      }
    )
  ] });
}
var StyledButtonContainer = st.div`
	margin: 0.5rem 0;
	margin-left: 1rem;
`;
var StyledListContainer = st.ul`
	margin: 0;
	margin-left: 1rem;

	${({ $sign, $showFirst }) => $sign && !$showFirst && nt`
			& > li:first-child::marker {
				content: '';
			}
		`}
	${({ $sign }) => $sign && nt`
			& > li::marker {
				font-weight: bold;
				content: '${$sign}  ';
			}
		`}
`;
function Row({ node }) {
  return (0, import_jsx_runtime7.jsx)(StyledRow, { style: { padding: "0.25rem 0" }, children: (0, import_jsx_runtime7.jsx)(UnfoldIsEnabledContext.Provider, { value: true, children: (0, import_jsx_runtime7.jsx)(Explanation, { node }) }) });
}
var StyledRow = st.li`
	> * {
		width: 100%;
	}
`;
function MecanismCondition(node) {
  return (0, import_jsx_runtime8.jsx)(
    DefaultInlineMecanism,
    {
      ...node,
      sourceMap: { mecanismName: node.nodeKind, args: node.explanation }
    }
  );
}
function Constant({
  nodeValue,
  type,
  fullPrecision,
  unit
}) {
  if (nodeValue === void 0) {
    return null;
  }
  if (nodeValue === null) {
    return (0, import_jsx_runtime9.jsx)("span", { className: "value", children: formatValue2({ nodeValue }) });
  } else if (fullPrecision) {
    return (0, import_jsx_runtime9.jsx)("span", { className: type, children: formatValue2(
      { nodeValue, unit },
      {
        precision: 5
      }
    ) });
  } else {
    return (0, import_jsx_runtime9.jsx)("span", { className: "value", children: formatValue2({ nodeValue, unit }) });
  }
}
function Contexte({ explanation }) {
  const engine = useEngine();
  const contexteEngine = explanation.subEngineId ? engine.context.subEngines.get(explanation.subEngineId) ?? engine : engine;
  return (0, import_jsx_runtime10.jsxs)(import_jsx_runtime10.Fragment, { children: [
    (0, import_jsx_runtime10.jsxs)(Mecanism, { name: "contexte", children: [
      (0, import_jsx_runtime10.jsx)("p", { children: "Ce calcul est effectué en changeant les valeurs des règles suivantes :" }),
      (0, import_jsx_runtime10.jsx)(StyledDL, { children: explanation.contexte.map(([origin, newValue]) => (0, import_jsx_runtime10.jsxs)(import_react3.Fragment, { children: [
        (0, import_jsx_runtime10.jsx)("dt", { children: (0, import_jsx_runtime10.jsx)(RuleLinkWithContext, { dottedName: origin.dottedName }) }),
        (0, import_jsx_runtime10.jsxs)("dd", { children: [
          (0, import_jsx_runtime10.jsx)("span", { "aria-hidden": true, children: " = " }),
          (0, import_jsx_runtime10.jsx)(Explanation, { node: newValue })
        ] })
      ] }, origin.dottedName)) })
    ] }),
    (0, import_jsx_runtime10.jsx)(EngineContext.Provider, { value: contexteEngine, children: (0, import_jsx_runtime10.jsx)(Explanation, { node: explanation.valeur }) })
  ] });
}
var StyledDL = st.dl`
	display: grid;
	grid-template-columns: auto 1fr;
	gap: 0.6rem;
	line-height: 1.75;
	dd {
		margin: 0;
		display: flex;
		gap: 0.5rem;
	}
	@media (max-width: 600px) {
		grid-template-columns: auto;
		line-height: initial;
		dd {
			justify-content: flex-end;
			margin-bottom: 0.5rem;
		}
	}
`;
function MecanismDurée(node) {
  return (0, import_jsx_runtime11.jsx)(
    DefaultInlineMecanism,
    {
      ...node,
      sourceMap: { mecanismName: node.nodeKind, args: node.explanation }
    }
  );
}
function MecanismEstNonApplicable(node) {
  return (0, import_jsx_runtime12.jsx)(
    DefaultInlineMecanism,
    {
      ...node,
      sourceMap: {
        mecanismName: node.nodeKind,
        args: { valeur: node.explanation }
      }
    }
  );
}
function MecanismEstNonDéfini(node) {
  return (0, import_jsx_runtime13.jsx)(
    DefaultInlineMecanism,
    {
      ...node,
      sourceMap: {
        mecanismName: node.nodeKind,
        args: { valeur: node.explanation }
      }
    }
  );
}
function Grille({ nodeValue, explanation, unit }) {
  return (0, import_jsx_runtime14.jsx)(StyledComponent, { children: (0, import_jsx_runtime14.jsx)(Mecanism, { name: "grille", value: nodeValue, unit, children: (0, import_jsx_runtime14.jsxs)("ul", { className: "properties", children: [
    (0, import_jsx_runtime14.jsx)(BarèmeAttributes, { explanation }),
    (0, import_jsx_runtime14.jsx)(
      TrancheTable,
      {
        tranches: explanation.tranches,
        multiplicateur: explanation.multiplicateur
      }
    )
  ] }) }) });
}
function InversionNumérique({
  nodeValue,
  explanation
}) {
  const engine = useEngine();
  return (0, import_jsx_runtime15.jsx)(Mecanism, { name: "inversion numérique", value: nodeValue, children: engine.cache.inversionFail && explanation.inversionGoal ? (0, import_jsx_runtime15.jsxs)(import_jsx_runtime15.Fragment, { children: [
    (0, import_jsx_runtime15.jsx)("p", { children: "Cette valeur devrait pouvoir être estimée à partir d’une autre variable qui possède une formule de calcul et dont la valeur a été fixée dans la simulation :" }),
    (0, import_jsx_runtime15.jsx)(Explanation, { node: explanation.inversionGoal }),
    (0, import_jsx_runtime15.jsx)("p", { children: "Malheureusement, il a été impossible de retrouver une valeur pour cette formule qui permette d’atterrir sur la valeur demandée." })
  ] }) : explanation.inversionGoal ? (0, import_jsx_runtime15.jsxs)(import_jsx_runtime15.Fragment, { children: [
    (0, import_jsx_runtime15.jsx)("p", { children: "Cette valeur a été estimée à partir d’une autre variable qui possède une formule de calcul et dont la valeur a été fixée dans la simulation :" }),
    (0, import_jsx_runtime15.jsx)(Explanation, { node: explanation.inversionGoal })
  ] }) : (0, import_jsx_runtime15.jsxs)(import_jsx_runtime15.Fragment, { children: [
    (0, import_jsx_runtime15.jsx)("p", { children: "Cette formule de calcul n’existe pas, mais on peut la calculer par inversion en utilisant les formules des règles suivantes :" }),
    (0, import_jsx_runtime15.jsx)("ul", { id: "inversionsPossibles", children: explanation.inversionCandidates.map((el) => (0, import_jsx_runtime15.jsx)("li", { children: (0, import_jsx_runtime15.jsx)(Explanation, { node: el }) }, el.dottedName)) })
  ] }) });
}
function Operation({
  nodeValue,
  explanation,
  operator,
  unit
}) {
  const isUnaryOperation = explanation[0].nodeValue === 0 && operator === "−" && explanation[0].nodeKind === "constant";
  return (0, import_jsx_runtime16.jsxs)(StyledOperation, { className: "operation", role: "math", children: [
    (0, import_jsx_runtime16.jsx)("span", { children: "(" }),
    !isUnaryOperation && (0, import_jsx_runtime16.jsxs)(import_jsx_runtime16.Fragment, { children: [
      (0, import_jsx_runtime16.jsx)(Explanation, { node: explanation[0] }),
      " "
    ] }),
    operator,
    " ",
    (0, import_jsx_runtime16.jsx)(Explanation, { node: explanation[1] }),
    nodeValue != void 0 && (0, import_jsx_runtime16.jsxs)("span", { className: "result", children: [
      (0, import_jsx_runtime16.jsx)("small", { children: " = " }),
      (0, import_jsx_runtime16.jsx)(NodeValueLeaf, { data: nodeValue, unit })
    ] }),
    (0, import_jsx_runtime16.jsx)("span", { children: ")" })
  ] });
}
var StyledOperation = st.div`
	display: flex;
	flex-wrap: wrap;
	gap: 0.125rem;
	> .operation ::before,
	> .operation ::after {
		content: '';
	}
	.result {
		margin-left: 0.2rem;
	}
	.operation .result {
		display: none;
	}
`;
function Replacement(node) {
  const engine = useEngine();
  const sourceMaps = node.sourceMap;
  const originalNode = sourceMaps.args.originalNode;
  const applicableReplacement = sourceMaps.args.applicableReplacements.find(
    ({ definitionRule }) => engine.evaluate(definitionRule).nodeValue === node.nodeValue
  );
  if (!applicableReplacement || applicableReplacement.replaceByNonApplicable) {
    originalNode.nodeValue = node.nodeValue;
    return (0, import_jsx_runtime17.jsx)(Explanation, { node: originalNode });
  }
  const [showOriginal, setShowOriginal] = (0, import_react4.useState)(false);
  const id = (0, import_react4.useId)();
  return (0, import_jsx_runtime17.jsx)(import_jsx_runtime17.Fragment, { children: (0, import_jsx_runtime17.jsxs)(
    "span",
    {
      style: {
        display: "inline-flex",
        maxWidth: "100%"
      },
      children: [
        (0, import_jsx_runtime17.jsxs)(
          "span",
          {
            style: {
              display: "flex",
              flexDirection: "column",
              flex: "1 1 0%"
            },
            children: [
              showOriginal && (0, import_jsx_runtime17.jsx)(
                "span",
                {
                  id,
                  style: {
                    opacity: "0.6",
                    textDecoration: "line-through"
                  },
                  children: (0, import_jsx_runtime17.jsx)(Explanation, { node: originalNode })
                }
              ),
              (0, import_jsx_runtime17.jsx)(Explanation, { node: applicableReplacement.definitionRule })
            ]
          }
        ),
        (0, import_jsx_runtime17.jsx)(
          "div",
          {
            style: {
              marginLeft: "0.4rem"
            },
            children: (0, import_jsx_runtime17.jsx)(
              "button",
              {
                onClick: () => setShowOriginal(!showOriginal),
                type: "button",
                className: "publicodes_btn-small",
                "aria-expanded": showOriginal,
                "aria-controls": id,
                title: showOriginal ? "Cacher la valeur d’origine" : "Voir la valeur d’origine",
                children: "🔄"
              }
            )
          }
        )
      ]
    }
  ) });
}
function ReplacementMecanism(node) {
  return (0, import_jsx_runtime18.jsxs)("span", { children: [
    "Remplace ",
    (0, import_jsx_runtime18.jsx)(Explanation, { node: node.replacedReference }),
    " ",
    node.rawNode.dans && (0, import_jsx_runtime18.jsxs)(import_jsx_runtime18.Fragment, { children: [
      "dans",
      " ",
      node.whiteListedNames.map((child, i) => (0, import_jsx_runtime18.jsx)(Explanation, { node: child }, i)).join(", ")
    ] }),
    node.rawNode["sauf dans"] && (0, import_jsx_runtime18.jsxs)(import_jsx_runtime18.Fragment, { children: [
      "sauf dans",
      " ",
      node.blackListedNames.map((child, i) => (0, import_jsx_runtime18.jsx)(Explanation, { node: child }, i)).join(", ")
    ] })
  ] });
}
function RuleMecanism({
  explanation,
  dottedName
}) {
  return (0, import_jsx_runtime19.jsx)(Styled, { children: (0, import_jsx_runtime19.jsx)(DottedNameContext.Provider, { value: dottedName, children: (0, import_jsx_runtime19.jsx)(StyledExplanation, { children: (0, import_jsx_runtime19.jsx)(Explanation, { node: explanation.valeur }) }) }) });
}
var StyledExplanation = st.div`
	border-left: 1rem solid hsl(220, 60%, 97.5%);
	padding-left: 1rem;
	margin-left: -2rem;
`;
var Styled = st.div`
	margin-top: 0.5rem;
	margin-bottom: 1rem;
	display: flex;
	flex-direction: column;
`;
function MecanismRésoudreRéférenceCirculaire({
  explanation,
  nodeValue
}) {
  return (0, import_jsx_runtime20.jsxs)(Mecanism, { name: "résoudre la référence circulaire", value: nodeValue, children: [
    (0, import_jsx_runtime20.jsxs)("p", { children: [
      " ",
      "Cette valeur a été retrouvé en résolvant la référence circulaire dans la formule ci dessous :",
      " "
    ] }),
    (0, import_jsx_runtime20.jsx)(Explanation, { node: explanation.valeur })
  ] });
}
function MecanismSituation({ sourceMap }) {
  const engine = (0, import_react5.useContext)(EngineContext);
  const situationValeur = engine == null ? void 0 : engine.evaluate(
    sourceMap.args["dans la situation"]
  );
  return (situationValeur == null ? void 0 : situationValeur.nodeValue) !== void 0 ? (0, import_jsx_runtime21.jsx)(InfixMecanism, { prefixed: true, value: sourceMap.args["valeur"], children: (0, import_jsx_runtime21.jsxs)("p", { children: [
    (0, import_jsx_runtime21.jsx)("strong", { children: "Valeur renseignée dans la simulation : " }),
    (0, import_jsx_runtime21.jsx)(Explanation, { node: situationValeur.explanation.valeur })
  ] }) }) : (0, import_jsx_runtime21.jsx)(Explanation, { node: sourceMap.args["valeur"] });
}
function TauxProgressif({
  nodeValue,
  explanation,
  unit
}) {
  return (0, import_jsx_runtime22.jsx)(StyledComponent, { children: (0, import_jsx_runtime22.jsx)(Mecanism, { name: "taux progressif", value: nodeValue, unit, children: (0, import_jsx_runtime22.jsxs)("ul", { className: "properties", children: [
    (0, import_jsx_runtime22.jsx)(BarèmeAttributes, { explanation }),
    (0, import_jsx_runtime22.jsx)(
      TrancheTable,
      {
        tranches: explanation.tranches,
        multiplicateur: explanation.multiplicateur
      }
    )
  ] }) }) });
}
function Texte({ explanation }) {
  return (0, import_jsx_runtime23.jsx)("p", { children: explanation.map(
    (element) => typeof element === "string" ? element : (0, import_jsx_runtime23.jsx)(Highlight, { children: (0, import_jsx_runtime23.jsx)(Explanation, { node: element }) }, element.rawNode)
  ) });
}
var Highlight = st.span`
	border: 1px solid rgba(0, 0, 0, 0.1);
	padding: 0.2rem;
	position: relative;
	border-radius: 0.15rem;
	background-color: rgba(0, 0, 0, 0.05);
`;
function MecanismUnité({
  nodeValue,
  explanation,
  unit
}) {
  if (explanation.nodeKind === "constant") {
    return formatValue3({ nodeValue, unit });
  } else if (explanation.nodeKind === "reference") {
    return (0, import_jsx_runtime24.jsxs)(import_jsx_runtime24.Fragment, { children: [
      (0, import_jsx_runtime24.jsx)(Explanation, { node: explanation }),
      " ",
      serializeUnit(unit)
    ] });
  } else {
    return (0, import_jsx_runtime24.jsx)(InfixMecanism, { value: explanation, children: (0, import_jsx_runtime24.jsxs)("p", { children: [
      (0, import_jsx_runtime24.jsx)("strong", { children: "Unité : " }),
      serializeUnit(unit)
    ] }) });
  }
}
function Variations({ nodeValue, explanation, unit }) {
  const activeCaseIndex = explanation.findIndex(
    ({ condition }) => condition.nodeValue === true
  );
  let activeCase;
  if (activeCaseIndex !== void 0) {
    activeCase = explanation[activeCaseIndex];
    explanation = [
      ...explanation.slice(0, activeCaseIndex),
      ...explanation.slice(activeCaseIndex + 1)
    ];
  }
  const [isExpanded, setIsExpanded] = (0, import_react6.useState)(!activeCase);
  return (0, import_jsx_runtime25.jsx)(Mecanism, { name: "variations", unit, value: nodeValue, children: (0, import_jsx_runtime25.jsxs)("ul", { children: [
    activeCase && (0, import_jsx_runtime25.jsxs)("li", { children: [
      (0, import_jsx_runtime25.jsx)(Case, { ...activeCase }),
      (0, import_jsx_runtime25.jsx)("span", { style: { paddingLeft: "1rem" }, children: (0, import_jsx_runtime25.jsxs)(
        "button",
        {
          className: "publicodes_btn-small",
          onClick: () => setIsExpanded(!isExpanded),
          children: [
            isExpanded ? "Masquer" : "Afficher",
            " les autres cas"
          ]
        }
      ) })
    ] }),
    isExpanded && (0, import_jsx_runtime25.jsx)(import_jsx_runtime25.Fragment, { children: explanation.map((currentCase, i) => (0, import_jsx_runtime25.jsx)("li", { children: (0, import_jsx_runtime25.jsx)(Case, { ...currentCase }) }, i)) })
  ] }) });
}
function Case({ condition, consequence }) {
  return (0, import_jsx_runtime25.jsx)(StyledCaseContainer, { children: (0, import_jsx_runtime25.jsxs)(StyledCase, { children: [
    (0, import_jsx_runtime25.jsx)(StyledCondition, { children: condition.nodeKind === "constant" && condition.nodeValue === true ? (0, import_jsx_runtime25.jsx)(StyledText, { children: "Par défaut : " }) : (0, import_jsx_runtime25.jsxs)(import_jsx_runtime25.Fragment, { children: [
      (0, import_jsx_runtime25.jsx)(StyledText, { children: "Condition : " }),
      (0, import_jsx_runtime25.jsx)(StyledExplanation2, { children: (0, import_jsx_runtime25.jsx)(Explanation, { node: condition }) })
    ] }) }),
    (0, import_jsx_runtime25.jsx)(StyledExplanation2, { children: (0, import_jsx_runtime25.jsx)(Explanation, { node: consequence }) })
  ] }) });
}
var StyledExplanation2 = st.div``;
var StyledText = st.span`
	font-weight: bold;
`;
var StyledCondition = st.div`
	padding-bottom: 1rem;
	padding-top: 0.5rem;
	display: flex;
	align-items: baseline;
`;
var StyledCase = st.div`
	border-left: 1rem solid hsl(36, 60%, 97%);
	padding-left: 1rem;
	margin-left: -1rem;
`;
var StyledCaseContainer = st.div`
	padding: 1rem 0;
`;
function UnePossibilité(node) {
  return (0, import_jsx_runtime26.jsx)(
    Mecanism,
    {
      name: "une possibilité",
      value: node.nodeValue,
      docUrl: "http://publi.codes/docs/manuel/une-possibilit%C3%A9",
      children: (0, import_jsx_runtime26.jsx)("ul", { children: node.explanation.map((possibility, i) => {
        var _a;
        const notApplicable = ((_a = possibility.notApplicable) == null ? void 0 : _a.nodeValue) === true;
        return (0, import_jsx_runtime26.jsx)("li", { children: possibility.nodeKind === "reference" ? (0, import_jsx_runtime26.jsxs)(import_jsx_runtime26.Fragment, { children: [
          (0, import_jsx_runtime26.jsx)(
            RuleLinkWithContext,
            {
              dottedName: possibility.dottedName,
              children: (0, import_jsx_runtime26.jsx)(
                "code",
                {
                  style: {
                    textDecoration: notApplicable ? "line-through" : ""
                  },
                  children: possibility.publicodesValue
                }
              )
            }
          ),
          notApplicable && (0, import_jsx_runtime26.jsx)(StyledNodeValuePointer, { children: "Non Applicable" })
        ] }) : possibility.nodeKind === "constant" && possibility.type === "string" ? (0, import_jsx_runtime26.jsx)("code", { children: possibility.publicodesValue }) : (0, import_jsx_runtime26.jsx)(Explanation, { node: possibility }) }, i);
      }) })
    }
  );
}
function MecanismArrondi2(node) {
  return (0, import_jsx_runtime27.jsx)(Mecanism, { name: "logarithme", value: node.nodeValue, children: (0, import_jsx_runtime27.jsx)(Explanation, { node: node.explanation }) });
}
var UIComponents = {
  constant: Constant,
  arrondi: MecanismArrondi,
  barème: Barème,
  durée: MecanismDurée,
  grille: Grille,
  inversion: InversionNumérique,
  operation: Operation,
  texte: Texte,
  reference: Reference,
  "est non applicable": MecanismEstNonApplicable,
  "est non défini": MecanismEstNonDéfini,
  rule: RuleMecanism,
  condition: MecanismCondition,
  "dans la situation": MecanismSituation,
  contexte: Contexte,
  replacement: Replacement,
  replacementRule: ReplacementMecanism,
  "taux progressif": TauxProgressif,
  "résoudre référence circulaire": MecanismRésoudreRéférenceCirculaire,
  unité: MecanismUnité,
  "variable manquante": (node) => (0, import_jsx_runtime28.jsx)(Explanation, { node: node.explanation }),
  variations: Variations,
  logarithme: MecanismArrondi2,
  "une possibilité": UnePossibilité
};
function Explanation({ node }) {
  var _a, _b;
  const visualisationKind = ((_a = node.sourceMap) == null ? void 0 : _a.mecanismName) ?? node.nodeKind;
  const engine = useEngine();
  const evaluateEverything = transformAST((node2) => {
    if ("nodeValue" in node2 || "replacementRule" === node2.nodeKind) {
      return false;
    }
    return engine.evaluateNode(node2);
  }, false);
  const displayedNode = evaluateEverything(node);
  const Component = UIComponents[visualisationKind] ?? (((_b = node.sourceMap) == null ? void 0 : _b.mecanismName) ? DefaultInlineMecanism : void 0);
  if (!Component) {
    throw new Error(`Unknown visualisation: ${visualisationKind}`);
  }
  return (0, import_jsx_runtime28.jsx)(Component, { ...displayedNode });
}
function getPrecision(rule) {
  if (typeof rule.nodeValue !== "number") {
    return;
  }
  const precision = reduceAST(
    (acc, node) => {
      if (node.nodeValue !== rule.nodeValue) {
        return acc;
      }
      if (node.nodeKind === "constant") {
        return 20;
      }
      if (node.nodeKind !== "arrondi") {
        return;
      }
      const precision2 = node.explanation.arrondi.nodeValue;
      if (typeof precision2 === "number") {
        return precision2;
      }
      if (precision2 === true) {
        return 0;
      }
    },
    void 0,
    rule.explanation.valeur
  );
  return precision;
}
var { encodeRuleName } = utils;
function RuleSource({ engine, dottedName }) {
  const href = useRuleSource(engine, dottedName);
  if (typeof window !== "undefined" && window.location.host === "publi.codes") {
    return null;
  }
  const linkLabel = "Afficher la règle dans le bac à sable Publicodes";
  return (0, import_jsx_runtime29.jsx)("p", { style: { textAlign: "right" }, children: (0, import_jsx_runtime29.jsxs)(
    "a",
    {
      target: "_blank",
      href,
      title: `${linkLabel}, nouvelle fenêtre`,
      rel: "noreferrer",
      children: [
        (0, import_jsx_runtime29.jsx)("span", { "aria-hidden": true, children: "✍️" }),
        " ",
        linkLabel
      ]
    }
  ) });
}
var useRuleSource = (engine, dottedName) => {
  const dependencies = Array.from(
    engine.context.referencesMaps.referencesIn.get(dottedName) ?? []
  );
  const node = engine.evaluateNode(engine.context.parsedRules[dottedName]);
  const rules = {
    [dottedName]: Object.fromEntries(
      Object.entries(node.rawNode).filter(([key]) => key !== "nom")
    )
  };
  const situation = Object.fromEntries(
    dependencies.filter((name) => name !== dottedName && !name.endsWith(" . $SITUATION")).map((dottedName2) => [dottedName2, formatValueForStudio(node)])
  );
  const source = encodeURIComponent(JSON.stringify({ rules, situation }));
  return `https://publi.codes/studio/${encodeRuleName(dottedName)}#${source}`;
};
function formatValueForStudio(node) {
  const base = formatValue4(node).replace(/\s\/\s/g, "/").replace(/(\d)\s(\d)/g, "$1$2").replace(",", ".");
  if (base.match(/^[0-9]/) || base === "Oui" || base === "Non") {
    return base.toLowerCase();
  } else if (base === "-") {
    return "non";
  } else {
    return `'${base}'`;
  }
}
var Ul = st.ul`
	padding: 0;
	max-height: 400px;
	overflow: auto;
	list-style: none;
`;
var Li = st.li`
	position: relative;
	padding-left: 1.5rem;

	&::before {
		content: '●';
		font-size: 80%;
		display: inline-block;
		position: absolute;
		left: 0;
		width: 1.5rem;
		text-align: center;
		color: #b3b3b3;
		margin-bottom: 0.5rem;
	}
`;
function DeveloperAccordion({
  rule,
  engine,
  dottedName,
  situation = {},
  apiDocumentationUrl,
  apiEvaluateUrl,
  npmPackage
}) {
  const { Accordion } = (0, import_react8.useContext)(RenderersContext);
  const accordionItems = [
    {
      title: "Règle et situation",
      id: "rule-situation",
      children: (0, import_jsx_runtime30.jsxs)(import_jsx_runtime30.Fragment, { children: [
        (0, import_jsx_runtime30.jsx)(ActualRule, { engine, dottedName }),
        (0, import_jsx_runtime30.jsx)(ActualSituation, { situation })
      ] })
    },
    apiDocumentationUrl && apiEvaluateUrl || npmPackage ? {
      title: "Réutiliser ce calcul (" + [
        apiDocumentationUrl && apiEvaluateUrl ? "API REST" : null,
        npmPackage ? "Paquet NPM" : null
      ].filter((x) => x !== null).join(" / ") + ")",
      id: "usage",
      children: (0, import_jsx_runtime30.jsxs)(import_jsx_runtime30.Fragment, { children: [
        utils2.isExperimental(
          engine.baseContext.parsedRules,
          dottedName
        ) && (0, import_jsx_runtime30.jsxs)(StyledWarning, { children: [
          (0, import_jsx_runtime30.jsx)("h5", { children: "⚠️ Cette règle est tagguée comme experimentale ⚠️" }),
          (0, import_jsx_runtime30.jsx)("p", { children: "Cela veut dire qu’elle peut être modifiée, renommée, ou supprimée sans qu’il n’y ait de changement de version majeure dans l’API." })
        ] }),
        npmPackage && (0, import_jsx_runtime30.jsx)(
          PackageUsage,
          {
            rule,
            situation,
            dottedName,
            npmPackage
          }
        ),
        apiDocumentationUrl && apiEvaluateUrl && (0, import_jsx_runtime30.jsx)(
          ApiUsage,
          {
            situation,
            dottedName,
            apiDocumentationUrl,
            apiEvaluateUrl
          }
        )
      ] })
    } : null,
    {
      title: "Dépendances et effets de la règle",
      id: "dependencies-effects",
      children: (0, import_jsx_runtime30.jsxs)(import_jsx_runtime30.Fragment, { children: [
        (0, import_jsx_runtime30.jsx)(MissingVars, { selfMissing: Object.keys(rule.missingVariables) }),
        (0, import_jsx_runtime30.jsx)(
          ReverseMissing,
          {
            engine,
            dottedName,
            ruleIsNotDefined: rule.nodeValue === void 0
          }
        ),
        (0, import_jsx_runtime30.jsx)(
          Effect,
          {
            engine,
            dottedName,
            replacements: rule.replacements
          }
        )
      ] })
    }
  ].filter((elem) => elem !== null);
  return (0, import_jsx_runtime30.jsx)(Accordion, { items: accordionItems });
}
function ActualRule({
  engine,
  dottedName
}) {
  const { Code } = (0, import_react8.useContext)(RenderersContext);
  return (0, import_jsx_runtime30.jsxs)("section", { children: [
    (0, import_jsx_runtime30.jsx)("h5", { children: "Règle actuelle" }),
    (0, import_jsx_runtime30.jsx)(Code, { tabs: { dottedName } }),
    (0, import_jsx_runtime30.jsx)(RuleSource, { dottedName, engine })
  ] });
}
function ActualSituation({
  situation
}) {
  const { Code } = (0, import_react8.useContext)(RenderersContext);
  const keys = Object.keys(situation);
  const tabs = {
    json: JSON.stringify(situation, null, 2)
  };
  return (0, import_jsx_runtime30.jsxs)("section", { children: [
    (0, import_jsx_runtime30.jsx)("h5", { children: "Situation actuelle" }),
    keys.length ? (0, import_jsx_runtime30.jsx)("p", { children: "Voici les données que vous avez saisies dans notre simulateur sous forme de JSON." }) : (0, import_jsx_runtime30.jsx)("p", { children: "Votre situation est pour l’instant vide, vous n’avez probablement pas encore fait de simulation." }),
    (0, import_jsx_runtime30.jsx)(Code, { tabs })
  ] });
}
var LINK_NPM_LABEL = "Retrouvez ce paquet sur NPM";
var LINK_PUBLICODES_LABEL = "moteur Publicodes";
function PackageUsage({
  rule,
  situation,
  dottedName,
  npmPackage
}) {
  const { Code, Link } = (0, import_react8.useContext)(RenderersContext);
  const tabs = {
    npmPackage: `// npm i publicodes ${npmPackage}

import Engine, { formatValue } from 'publicodes'
import rules from '${npmPackage}'

const engine = new Engine(rules)
engine.setSituation(${JSON.stringify(situation, null, 2)})

// ${rule.title}
const evaluation = engine.evaluate(${JSON.stringify(dottedName)})

console.log(formatValue(evaluation))
`
  };
  return (0, import_jsx_runtime30.jsxs)("section", { children: [
    (0, import_jsx_runtime30.jsx)("h5", { children: "Lancer un calcul avec Publicodes" }),
    (0, import_jsx_runtime30.jsxs)("p", { children: [
      "Vous pouvez installer notre package de règles pour l’utiliser avec le",
      " ",
      (0, import_jsx_runtime30.jsx)(
        Link,
        {
          title: `${LINK_PUBLICODES_LABEL}, accéder au site publi.codes, nouvelle fenêtre`,
          href: "https://publi.codes/",
          children: LINK_PUBLICODES_LABEL
        }
      ),
      " ",
      "et ainsi effectuer vos propres calculs. Voici un exemple avec votre situation et la règle actuelle :"
    ] }),
    (0, import_jsx_runtime30.jsx)(Code, { tabs }),
    (0, import_jsx_runtime30.jsx)("p", { style: { textAlign: "right" }, children: (0, import_jsx_runtime30.jsxs)(
      Link,
      {
        href: "https://www.npmjs.com/package/" + npmPackage,
        title: `${LINK_NPM_LABEL}, accéder à la page npm du package Publicodes, nouvelle fenêtre`,
        children: [
          (0, import_jsx_runtime30.jsx)("span", { "aria-hidden": true, children: "📦" }),
          " ",
          LINK_NPM_LABEL
        ]
      }
    ) })
  ] });
}
var LINK_API_LABEL = "En savoir plus sur notre API REST";
function ApiUsage({
  situation,
  dottedName,
  apiDocumentationUrl,
  apiEvaluateUrl
}) {
  const { Code, Link } = (0, import_react8.useContext)(RenderersContext);
  const data = {
    expressions: [dottedName],
    situation
  };
  const tabs = {
    curl: `curl '${apiEvaluateUrl}' \\
  -H 'accept: application/json' \\
  -H 'content-type: application/json' \\
  --data-raw $'${JSON.stringify(data).replace(/'/g, "'\\''")}' \\
  --compressed`,
    "fetch js": `const request = await fetch("${apiEvaluateUrl}", {
  "headers": { "content-type": "application/json" },
  "method": "POST",
  "body": JSON.stringify(${JSON.stringify(data, null, 2)}),
})
const { evaluate } = await request.json()

console.log(evaluate)`
  };
  return (0, import_jsx_runtime30.jsxs)("section", { children: [
    (0, import_jsx_runtime30.jsx)("h5", { children: "Utiliser notre API REST" }),
    (0, import_jsx_runtime30.jsx)("p", { children: "Vous trouverez ici un exemple d’utilisation de notre API REST via curl ou un fetch javascript." }),
    (0, import_jsx_runtime30.jsx)(Code, { tabs }),
    apiDocumentationUrl && (0, import_jsx_runtime30.jsx)("p", { style: { textAlign: "right" }, children: (0, import_jsx_runtime30.jsxs)(
      Link,
      {
        to: apiDocumentationUrl,
        title: `${LINK_API_LABEL}, accéder à la documentation, nouvelle fenêtre`,
        children: [
          (0, import_jsx_runtime30.jsx)("span", { "aria-hidden": true, children: "👩‍💻" }),
          " ",
          LINK_API_LABEL
        ]
      }
    ) })
  ] });
}
function MissingVars({ selfMissing }) {
  return (0, import_jsx_runtime30.jsxs)("section", { children: [
    (0, import_jsx_runtime30.jsx)("h5", { children: "Données manquantes" }),
    (selfMissing == null ? void 0 : selfMissing.length) ? (0, import_jsx_runtime30.jsxs)(import_jsx_runtime30.Fragment, { children: [
      (0, import_jsx_runtime30.jsx)("p", { children: "Les règles suivantes sont nécessaires pour le calcul mais n’ont pas été saisies dans la situation. Leur valeur par défaut est utilisée." }),
      (0, import_jsx_runtime30.jsx)(Ul, { children: selfMissing.map((dottedName) => (0, import_jsx_runtime30.jsx)(Li, { children: (0, import_jsx_runtime30.jsx)(RuleLinkWithContext, { dottedName }) }, dottedName)) })
    ] }) : (0, import_jsx_runtime30.jsx)("p", { children: "Il n’y a pas de données manquante." })
  ] });
}
var isReplacementOfThisRule = (node, dottedName) => node && "replacements" in node && node.replacements.some(
  ({ replacedReference }) => replacedReference.dottedName === dottedName
);
function ReverseMissing({
  engine,
  dottedName,
  ruleIsNotDefined = false
}) {
  const ruleNamesWithMissing = Array.from(
    engine.context.referencesMaps.rulesThatUse.get(dottedName) ?? []
  ).filter(
    (ruleName) => ruleName !== "$EVALUATION" && ruleName in engine.context.parsedRules && !engine.context.parsedRules[ruleName].private && !isReplacementOfThisRule(
      engine.context.parsedRules[ruleName],
      dottedName
    )
  );
  return (0, import_jsx_runtime30.jsxs)("section", { children: [
    (0, import_jsx_runtime30.jsx)("h5", { children: "Règles qui ont besoin de cette valeur" }),
    ruleNamesWithMissing.length ? (0, import_jsx_runtime30.jsxs)(import_jsx_runtime30.Fragment, { children: [
      (0, import_jsx_runtime30.jsxs)("p", { children: [
        "Les règles suivantes ont besoin de la règle courante pour être calculées :",
        ruleIsNotDefined && (0, import_jsx_runtime30.jsxs)(import_jsx_runtime30.Fragment, { children: [
          " ",
          "La règle courante n’étant pas encore définie, c’est sa valeur par défaut qui est utilisée pour déterminer la valeur de ces règles."
        ] })
      ] }),
      (0, import_jsx_runtime30.jsx)(Ul, { children: ruleNamesWithMissing.map((dottedName2) => (0, import_jsx_runtime30.jsx)(Li, { children: (0, import_jsx_runtime30.jsx)(RuleLinkWithContext, { dottedName: dottedName2 }) }, dottedName2)) })
    ] }) : (0, import_jsx_runtime30.jsx)("p", { children: "Aucune règle n’utilise cette valeur." })
  ] });
}
function Effect({
  engine,
  dottedName,
  replacements
}) {
  const effects = Array.from(
    engine.context.referencesMaps.rulesThatUse.get(dottedName) ?? []
  ).filter(
    (ruleName) => ruleName !== "$EVALUATION" && ruleName in engine.context.parsedRules && !engine.context.parsedRules[ruleName].private && isReplacementOfThisRule(engine.context.parsedRules[ruleName], dottedName)
  );
  return (0, import_jsx_runtime30.jsxs)(import_jsx_runtime30.Fragment, { children: [
    (0, import_jsx_runtime30.jsxs)("section", { children: [
      (0, import_jsx_runtime30.jsx)("h5", { children: "Effets sur d’autres règles" }),
      replacements.length ? (0, import_jsx_runtime30.jsxs)(import_jsx_runtime30.Fragment, { children: [
        (0, import_jsx_runtime30.jsx)("p", { children: "Une règle peut avoir des effets sur d’autres règles afin de modifier leur comportement." }),
        (0, import_jsx_runtime30.jsx)(Ul, { children: replacements.map((replacement) => (0, import_jsx_runtime30.jsx)(
          Li,
          {
            style: { marginBottom: "0.5rem" },
            children: (0, import_jsx_runtime30.jsx)(Explanation, { node: replacement })
          },
          replacement.replacedReference.dottedName
        )) })
      ] }) : (0, import_jsx_runtime30.jsx)("p", { children: "Cette règle ne modifie aucune autre règle." })
    ] }),
    (0, import_jsx_runtime30.jsxs)("section", { children: [
      (0, import_jsx_runtime30.jsx)("h5", { children: "Règles qui peuvent avoir un effet sur cette valeur" }),
      effects.length ? (0, import_jsx_runtime30.jsxs)(import_jsx_runtime30.Fragment, { children: [
        (0, import_jsx_runtime30.jsx)("p", { children: "Les règles suivantes peuvent remplacer la valeur de la règle courante :" }),
        (0, import_jsx_runtime30.jsx)(Ul, { children: effects.map((dottedName2) => (0, import_jsx_runtime30.jsx)(Li, { children: (0, import_jsx_runtime30.jsx)(RuleLinkWithContext, { dottedName: dottedName2 }) }, dottedName2)) })
      ] }) : (0, import_jsx_runtime30.jsx)("p", { children: "Aucune autre règle n’a d’effets sur cette valeur." })
    ] })
  ] });
}
var StyledWarning = st.div``;
function Meta({ title, description }) {
  const { Head } = (0, import_react9.useContext)(RenderersContext);
  if (!Head) {
    return null;
  }
  return (0, import_jsx_runtime31.jsxs)(Head, { children: [
    (0, import_jsx_runtime31.jsx)("title", { children: title }),
    (0, import_jsx_runtime31.jsx)("meta", { property: "og:type", content: "article" }),
    (0, import_jsx_runtime31.jsx)("meta", { property: "og:title", content: title }),
    description && (0, import_jsx_runtime31.jsx)("meta", { property: "og:description", content: description }),
    description && (0, import_jsx_runtime31.jsx)("meta", { name: "description", content: description })
  ] });
}
function RuleHeader({ dottedName }) {
  const engine = useEngine();
  const {
    title,
    rawNode: { description, question, icônes }
  } = engine.context.parsedRules[dottedName];
  const displayTitle = icônes ? title + " " + icônes : title;
  return (0, import_jsx_runtime32.jsxs)("header", { children: [
    (0, import_jsx_runtime32.jsx)(Meta, { title: displayTitle, description: description || question }),
    (0, import_jsx_runtime32.jsxs)("div", { children: [
      (0, import_jsx_runtime32.jsx)("span", { id: "rules-nav-open-nav-button" }),
      utils3.ruleParents(dottedName).reverse().map((parentDottedName) => (0, import_jsx_runtime32.jsxs)("span", { children: [
        (0, import_jsx_runtime32.jsx)(RuleLinkWithContext, { dottedName: parentDottedName, displayIcon: true }),
        (0, import_jsx_runtime32.jsx)("span", { "aria-hidden": true, children: " › " })
      ] }, parentDottedName))
    ] }),
    (0, import_jsx_runtime32.jsx)("h1", { children: (0, import_jsx_runtime32.jsx)(RuleLinkWithContext, { dottedName, displayIcon: true }) })
  ] });
}
var Close = ({ className }) => (0, import_jsx_runtime33.jsx)(
  "svg",
  {
    "aria-hidden": "true",
    xmlns: "http://www.w3.org/2000/svg",
    width: "16",
    height: "16",
    viewBox: "0 0 16 16",
    fill: "currentcolor",
    className,
    children: (0, import_jsx_runtime33.jsx)(
      "path",
      {
        d: "M9.04286 8L13 11.9571V13H11.9571L8 9.04286L4.04286 13H3V11.9571L6.95714 8L3 4.04286V3H4.04286L8 6.95714L11.9571 3H13V4.04286L9.04286 8Z",
        fill: "currentcolor"
      }
    )
  }
);
var RulesSearch = (0, import_react10.lazy)(() => import("./RulesSearch-UG6F4GD6-IPK3B3YU.js"));
var RulesNav = ({
  dottedName,
  searchBar,
  mobileMenuPortalId,
  openNavButtonPortalId
}) => {
  const baseEngine = useEngine();
  const parsedRules = baseEngine.getParsedRules();
  const parsedRulesNames = (0, import_react10.useMemo)(
    () => Object.keys(parsedRules).sort((a, b) => a.localeCompare(b)),
    [parsedRules]
  );
  const [navOpen, setNavOpen] = (0, import_react10.useState)(false);
  const initLevel = (dn) => Object.fromEntries([
    [dn, true],
    ...utils4.ruleParents(dn).map((parent) => [parent, true])
  ]);
  const [level, setLevel] = (0, import_react10.useState)(initLevel(dottedName));
  (0, import_react10.useEffect)(() => {
    setLevel((prev) => ({ ...prev, ...initLevel(dottedName) }));
  }, [dottedName]);
  const toggleDropdown = (0, import_react10.useCallback)((ruleDottedName) => {
    setLevel(
      (prevLevel) => !prevLevel[ruleDottedName] ? {
        ...prevLevel,
        [ruleDottedName]: !prevLevel[ruleDottedName]
      } : Object.fromEntries(
        Object.entries(prevLevel).map(
          ([dot, val]) => dot.startsWith(ruleDottedName) ? [dot, false] : [dot, val]
        )
      )
    );
  }, []);
  const openNavButtonPortalElement = typeof window === "undefined" ? null : openNavButtonPortalId && window.document.getElementById(openNavButtonPortalId) || window.document.getElementById("rules-nav-open-nav-button");
  const openNavButtonRef = (0, import_react10.useRef)(null);
  (0, import_react10.useEffect)(() => {
    if (openNavButtonRef.current && !navOpen) {
      openNavButtonRef.current.focus();
    }
  }, [openNavButtonRef, navOpen]);
  const navRef = (0, import_react10.useRef)(null);
  (0, import_react10.useEffect)(() => {
    if (!navRef.current || !navOpen) {
      return;
    }
    const focusableElements = navRef.current.querySelectorAll(
      'a[href], button, textarea, input, select, [tabindex]:not([tabindex="-1"])'
    );
    const firstElement = focusableElements[0];
    const lastElement = focusableElements[focusableElements.length - 1];
    const handleKeyDown = (event) => {
      if (openNavButtonPortalElement && navOpen) {
        if (event.key === "Escape") {
          event.preventDefault();
          setNavOpen(false);
        } else if (event.key === "Tab" && navRef.current) {
          if (event.shiftKey) {
            if (document.activeElement === firstElement) {
              event.preventDefault();
              lastElement.focus();
            }
          } else {
            if (document.activeElement === lastElement) {
              event.preventDefault();
              firstElement.focus();
            }
          }
        }
      }
    };
    navRef.current.addEventListener("keydown", handleKeyDown);
    return () => {
      if (navRef.current) {
        navRef.current.removeEventListener("keydown", handleKeyDown);
      }
    };
  }, [navRef, navOpen]);
  const menu = (0, import_jsx_runtime34.jsxs)(Container, { $open: navOpen, children: [
    (0, import_jsx_runtime34.jsx)(
      Background,
      {
        $open: navOpen,
        onClick: () => {
          setNavOpen((open) => !open);
        }
      }
    ),
    openNavButtonPortalElement && import_react_dom.default.createPortal(
      (0, import_jsx_runtime34.jsx)(
        OpenNavButton,
        {
          ref: openNavButtonRef,
          onClick: () => {
            setNavOpen(true);
            if (navRef.current) {
              navRef.current.focus();
            }
          },
          children: "Toutes les règles"
        }
      ),
      openNavButtonPortalElement
    ),
    (0, import_jsx_runtime34.jsxs)(
      NavContainer,
      {
        role: navOpen ? "dialog" : void 0,
        "aria-modal": navOpen ? "true" : void 0,
        "aria-label": navOpen ? "Menu de navigation" : void 0,
        $open: navOpen,
        ref: navRef,
        tabIndex: -1,
        children: [
          (0, import_jsx_runtime34.jsxs)(
            "nav",
            {
              role: "navigation",
              "aria-label": "Menu de navigation sur les règles de la documentation",
              children: [
                searchBar ? (0, import_jsx_runtime34.jsx)(import_react10.Suspense, { fallback: (0, import_jsx_runtime34.jsx)("p", { children: "Chargement..." }), children: (0, import_jsx_runtime34.jsx)(RulesSearch, {}) }) : null,
                (0, import_jsx_runtime34.jsx)(
                  NavUl,
                  {
                    onClick: () => {
                      setNavOpen(false);
                    },
                    rules: parsedRulesNames,
                    level,
                    navRef,
                    toggleDropdown,
                    dottedName,
                    parentName: ""
                  }
                )
              ]
            }
          ),
          navOpen && (0, import_jsx_runtime34.jsx)(
            CloseButton,
            {
              "aria-label": "Fermer le menu de navigation",
              onClick: () => setNavOpen(false),
              children: (0, import_jsx_runtime34.jsx)(Close, {})
            }
          )
        ]
      }
    )
  ] });
  const isMobileMenu = typeof window !== "undefined" && window.matchMedia(`(max-width: ${breakpointsWidth.lg})`).matches;
  const mobileMenuPortalElement = typeof window !== "undefined" && mobileMenuPortalId ? window.document.getElementById(mobileMenuPortalId) : null;
  return isMobileMenu && mobileMenuPortalElement ? import_react_dom.default.createPortal(menu, mobileMenuPortalElement) : menu;
};
var NavUl = ({
  rules,
  level,
  navRef,
  onClick,
  toggleDropdown,
  dottedName,
  parentName
}) => {
  return (0, import_jsx_runtime34.jsx)("ul", { children: rules.map((ruleDottedName) => {
    const parentDottedName = utils4.ruleParent(ruleDottedName);
    if (parentDottedName !== parentName) {
      return null;
    }
    const open = ruleDottedName in level && level[ruleDottedName];
    return (0, import_jsx_runtime34.jsx)(
      MemoNavLi,
      {
        onClick,
        ruleDottedName,
        open,
        active: dottedName === ruleDottedName,
        onClickDropdown: toggleDropdown,
        navRef,
        children: level[ruleDottedName] && (0, import_jsx_runtime34.jsx)(
          NavUl,
          {
            onClick,
            rules,
            level,
            navRef,
            toggleDropdown,
            dottedName,
            parentName: ruleDottedName
          }
        )
      },
      ruleDottedName
    );
  }) });
};
var NavLi = ({
  ruleDottedName,
  open,
  active,
  onClick,
  onClickDropdown,
  navRef,
  children
}) => {
  const baseEngine = useEngine();
  const parsedRules = baseEngine.getParsedRules();
  const childrenCount = Object.keys(parsedRules).reduce(
    (acc, ruleDot) => ruleDot.startsWith(ruleDottedName + " . ") && ruleDot.split(" . ").length === ruleDottedName.split(" . ").length + 1 ? acc + 1 : acc,
    0
  );
  const initialRender = (0, import_react10.useRef)(true);
  const activeLi = (0, import_react10.useRef)(null);
  (0, import_react10.useEffect)(() => {
    var _a, _b;
    if (initialRender.current) {
      initialRender.current = false;
      return;
    }
    if (navRef.current && ((_a = activeLi.current) == null ? void 0 : _a.offsetTop)) {
      navRef.current.scrollTop = (_b = activeLi.current) == null ? void 0 : _b.offsetTop;
    }
  }, [active]);
  return (0, import_jsx_runtime34.jsxs)(
    "li",
    {
      ref: active ? activeLi : void 0,
      style: {
        paddingLeft: (ruleDottedName.split(" . ").length - 1) * 16
      },
      className: childrenCount > 0 ? "dropdown " : "",
      children: [
        (0, import_jsx_runtime34.jsxs)("span", { className: `content ${active ? "active " : ""}`, children: [
          (0, import_jsx_runtime34.jsx)(
            RuleLinkWithContext,
            {
              dottedName: ruleDottedName,
              displayIcon: true,
              onClick
            }
          ),
          childrenCount > 0 && (0, import_jsx_runtime34.jsx)(
            DropdownButton,
            {
              "aria-label": open ? "Replier le sous-menu" : "Déplier le sous-menu",
              "aria-expanded": open,
              onClick: () => onClickDropdown(ruleDottedName),
              children: (0, import_jsx_runtime34.jsx)(StyledArrow, { $open: open })
            }
          )
        ] }),
        children
      ]
    },
    ruleDottedName
  );
};
var MemoNavLi = (0, import_react10.memo)(NavLi);
var breakpointsWidth = {
  sm: "576px",
  md: "768px",
  lg: "992px",
  xl: "1200px"
};
var Container = st.div`
	z-index: 200;
	overflow: auto;
	position: sticky;
	top: 0;

	@media (min-width: ${breakpointsWidth.lg}) {
		max-width: 50%;
		flex-shrink: 0;
	}
`;
var Background = st.div`
	background: rgb(0 0 0 / 25%);
	position: fixed;
	top: 0;
	left: 0;
	bottom: 0;
	right: 0;
	z-index: 200;
	transition: ease-in-out 0.25s;
	transition-property: visibility, opacity;
	visibility: ${({ $open }) => $open ? "visible" : "hidden"};
	opacity: ${({ $open }) => $open ? "1" : "0"};

	@media (min-width: ${breakpointsWidth.lg}) {
		display: none;
	}
`;
var OpenNavButton = st.button`
	margin: 0.25rem 0;
	margin-right: 0.5rem;
	background: none;
	border: 1px solid rgb(29, 66, 140);
	border-radius: 3px;
	color: rgb(29, 66, 140);
	padding: 0.5rem;
	display: inline-block;

	&:hover {
		background-color: rgb(219, 231, 255);
	}
	@media (min-width: ${breakpointsWidth.lg}) {
		display: none;
	}
`;
var NavContainer = st.div`
	@media (min-width: ${breakpointsWidth.lg}) {
		flex-shrink: 0;
	}
	border-right: 1px solid #e6e6e6;
	overflow: auto;
	max-height: calc(100vh - 2rem);
	position: sticky;
	top: 0;
	@media (max-width: ${breakpointsWidth.lg}) {
		position: fixed;
		top: 0;
		left: 0;
		padding-top: 1rem;
		padding-right: 2rem;
		bottom: 0;
		z-index: 200;
		max-height: initial;
		background: white;
		max-width: 80vw;
		height: 100%;

		transition: all ease-in-out 0.25s;
		${({ $open }) => $open ? "" : "transform: translateX(-100%);"}
	}

	&:focus {
		outline: none;
	}

	ul {
		flex-wrap: nowrap;
		margin: 0;

		padding: 0;
		list-style: none;
		li {
			margin-bottom: 3px;
			max-width: 350px;
			.content {
				border-radius: 3px;
				padding: 3px 1rem;
				display: flex;
				width: fit-content;
				align-items: center;
				flex-direction: row-reverse;
				flex-wrap: nowrap;
			}

			span {
				&.active {
					background-color: #e6e6e6;
				}
			}

			&:not(.active) a {
				font-weight: normal;
			}
			&:not(.dropdown) .content:after {
				content: ' ';
				display: inline-block;
				background-color: #b3b3b3;
				min-width: 0.5rem;
				min-height: 0.5rem;
				border-radius: 0.5rem;
				margin-left: 0.5rem;
				margin-right: 1.25rem;
				pointer-events: none;
			}
		}
	}
`;
var DropdownButton = st.button`
	margin-right: 0.75rem;
	flex-shrink: 0;
	background: none;
	border: 1px solid #b3b3b3;
	border-radius: 2rem;
	width: 1.5rem;
	height: 1.5rem;
	color: #999;
	padding: 0;
	display: inline-block;
`;
var StyledArrow = st(Arrow)`
	width: 100%;
	transition: transform 0.1s;
	height: 100%;
	transform: rotate(${({ $open }) => $open ? "0deg" : "-90deg"});
`;
var CloseButton = st.button`
	cursor: pointer;
	position: absolute;
	border-radius: 0.25rem;
	top: 0.25rem;
	padding: 0.25rem;
	right: 0.25rem;
	height: 1.5rem;
	background-color: transparent;
	border: none;

	&:hover {
		background-color: #e6e6e6;
	}
`;
function RulePage({
  documentationPath,
  rulePath,
  engine,
  renderers,
  searchBar,
  language,
  apiDocumentationUrl,
  apiEvaluateUrl,
  npmPackage,
  mobileMenuPortalId,
  openNavButtonPortalId,
  showDevSection = true
}) {
  const currentEngineId = typeof window !== "undefined" && new URLSearchParams(window.location.search).get("currentEngineId");
  const prevRenderers = (0, import_react7.useRef)(renderers);
  (0, import_react7.useEffect)(() => {
    if (prevRenderers.current !== renderers) {
      prevRenderers.current = renderers;
    }
  }, [renderers]);
  return (0, import_jsx_runtime35.jsx)(EngineContext.Provider, { value: engine, children: (0, import_jsx_runtime35.jsx)(BasepathContext.Provider, { value: documentationPath, children: (0, import_jsx_runtime35.jsx)(RenderersContext.Provider, { value: defaultRenderers(renderers), children: (0, import_jsx_runtime35.jsx)(
    Rule,
    {
      dottedName: utils5.decodeRuleName(rulePath),
      subEngineId: currentEngineId ? parseInt(currentEngineId, 10) : void 0,
      language,
      apiDocumentationUrl,
      apiEvaluateUrl,
      npmPackage,
      mobileMenuPortalId,
      openNavButtonPortalId,
      showDevSection,
      searchBar
    }
  ) }) }) });
}
function Rule({
  dottedName,
  language,
  subEngineId,
  searchBar = false,
  apiDocumentationUrl,
  apiEvaluateUrl,
  npmPackage,
  mobileMenuPortalId,
  openNavButtonPortalId,
  showDevSection
}) {
  const baseEngine = useEngine();
  const { References, Text } = (0, import_react7.useContext)(RenderersContext);
  const subEngines = baseEngine.context.subEngines;
  const useSubEngine = subEngineId && subEngines.has(subEngineId);
  const engine = useSubEngine ? subEngines.get(subEngineId) : baseEngine;
  if (!(dottedName in engine.context.parsedRules)) {
    return (0, import_jsx_runtime35.jsx)("p", { children: "Cette règle est introuvable dans la base" });
  }
  engine.resetCache();
  engine.cache.traversedVariablesStack = [];
  const rule = engine.evaluateNode(
    engine.context.parsedRules[dottedName]
  );
  const { description, question } = rule.rawNode;
  const { valeur, nullableParent, ruleDisabledByItsParent } = rule.explanation;
  const situation = buildSituationUsedInRule(engine, rule);
  const references = References == null ? void 0 : References({
    references: rule.rawNode.références,
    dottedName: rule.dottedName
  });
  return (0, import_jsx_runtime35.jsx)(EngineContext.Provider, { value: engine, children: (0, import_jsx_runtime35.jsxs)(Container2, { id: "documentation-rule-root", children: [
    (0, import_jsx_runtime35.jsx)(
      RulesNav,
      {
        dottedName,
        mobileMenuPortalId,
        openNavButtonPortalId,
        searchBar
      }
    ),
    (0, import_jsx_runtime35.jsx)(Article, { children: (0, import_jsx_runtime35.jsxs)(DottedNameContext.Provider, { value: dottedName, children: [
      (0, import_jsx_runtime35.jsx)(RuleHeader, { dottedName }),
      (0, import_jsx_runtime35.jsx)("section", { children: (0, import_jsx_runtime35.jsx)(Text, { children: description || question || "" }) }),
      (0, import_jsx_runtime35.jsxs)("p", { style: { fontSize: "1.25rem", lineHeight: "2rem" }, children: [
        "Valeur :",
        " ",
        formatValue5(rule, { language, precision: getPrecision(rule) }),
        rule.nodeValue === void 0 && rule.unit && (0, import_jsx_runtime35.jsxs)(import_jsx_runtime35.Fragment, { children: [
          (0, import_jsx_runtime35.jsx)("br", {}),
          "Unité : ",
          serializeUnit2(rule.unit)
        ] })
      ] }),
      ruleDisabledByItsParent && nullableParent && (0, import_jsx_runtime35.jsx)(import_jsx_runtime35.Fragment, { children: (0, import_jsx_runtime35.jsxs)("blockquote", { children: [
        "Cette règle est ",
        (0, import_jsx_runtime35.jsx)("strong", { children: "non applicable" }),
        " car elle appartient à l’espace de nom :",
        " ",
        (0, import_jsx_runtime35.jsx)(Explanation, { node: nullableParent })
      ] }) }),
      useSubEngine && (0, import_jsx_runtime35.jsxs)(
        "div",
        {
          style: {
            margin: "1rem 0",
            padding: "0rem 1rem",
            display: "flex",
            justifyContent: "flex-end",
            columnGap: "1rem",
            alignItems: "baseline",
            flexWrap: "wrap",
            background: "hsl(220, 60%, 97.5%)",
            borderRadius: "0.25rem"
          },
          children: [
            (0, import_jsx_runtime35.jsxs)("p", { children: [
              "Vous naviguez la documentation avec un",
              " ",
              (0, import_jsx_runtime35.jsx)("strong", { children: "contexte" }),
              " d’évaluation",
              " ",
              (0, import_jsx_runtime35.jsx)("strong", { children: "spécifique" }),
              "."
            ] }),
            (0, import_jsx_runtime35.jsx)("div", { style: { flex: 1 } }),
            (0, import_jsx_runtime35.jsx)(
              "p",
              {
                style: {
                  textAlign: "right",
                  marginTop: 0
                },
                children: (0, import_jsx_runtime35.jsx)(
                  RuleLinkWithContext,
                  {
                    dottedName,
                    useSubEngine: false,
                    children: "Retourner à la version de base"
                  }
                )
              }
            )
          ]
        }
      ),
      (0, import_jsx_runtime35.jsx)("h2", { children: "Comment cette donnée est-elle calculée ?" }),
      rule.possibilities && (0, import_jsx_runtime35.jsx)(Explanation, { node: rule.possibilities }),
      (0, import_jsx_runtime35.jsx)("div", { id: "documentation-rule-explanation", children: (0, import_jsx_runtime35.jsx)(Explanation, { node: valeur }) }),
      rule.rawNode.note && (0, import_jsx_runtime35.jsxs)(import_jsx_runtime35.Fragment, { children: [
        (0, import_jsx_runtime35.jsx)("h3", { children: "Note" }),
        (0, import_jsx_runtime35.jsx)("div", { children: (0, import_jsx_runtime35.jsx)(Text, { children: rule.rawNode.note }) })
      ] }),
      references && (0, import_jsx_runtime35.jsxs)(import_jsx_runtime35.Fragment, { children: [
        (0, import_jsx_runtime35.jsx)("h3", { children: "Références" }),
        references
      ] }),
      (0, import_jsx_runtime35.jsx)("br", {}),
      showDevSection && (0, import_jsx_runtime35.jsxs)(import_jsx_runtime35.Fragment, { children: [
        (0, import_jsx_runtime35.jsx)("h3", { children: "Informations techniques" }),
        (0, import_jsx_runtime35.jsx)(Text, { children: "Si vous êtes développeur/euse vous trouverez ci-dessous des informations techniques utiles pour l’intégration de cette règle dans votre application." }),
        (0, import_jsx_runtime35.jsx)(
          DeveloperAccordion,
          {
            engine,
            situation,
            dottedName,
            rule,
            apiDocumentationUrl,
            apiEvaluateUrl,
            npmPackage
          }
        )
      ] })
    ] }) })
  ] }) });
}
var Container2 = st.div`
	display: flex;
	flex-wrap: nowrap;
	align-items: flex-start;
	@media (max-width: ${breakpointsWidth.lg}) {
		flex-direction: column;
	}
`;
var Article = st.article`
	flex-shrink: 1;
	max-width: 100%;
	@media (min-width: ${breakpointsWidth.lg}) {
		min-width: 0;
		padding-left: 1rem;
		border-left: 1px solid #e6e6e6;
		margin-left: -1px;
	}
`;
function buildSituationUsedInRule(engine, rule) {
  const currentSituation = engine.getSituation();
  const situationUsedInRule = Object.fromEntries(
    Object.entries(currentSituation).filter(([dottedName]) => {
      var _a;
      if (dottedName === rule.dottedName) {
        return true;
      }
      return (_a = rule.traversedVariables) == null ? void 0 : _a.includes(dottedName);
    })
  );
  return situationUsedInRule;
}
function getDocumentationSiteMap({
  engine,
  documentationPath
}) {
  const parsedRules = engine.context.parsedRules;
  return Object.fromEntries(
    Object.keys(parsedRules).filter(
      (dottedName) => !dottedName.match(/(\$SITUATION|\$EVALUATION|\$INTERNAL)/)
    ).map((dottedName) => [
      documentationPath + "/" + utils6.encodeRuleName(dottedName),
      dottedName
    ])
  );
}
export {
  Explanation,
  RuleLink,
  RulePage,
  getDocumentationSiteMap
};
//# sourceMappingURL=@publicodes_react-ui.js.map
