import { DottedName } from 'modele-social'
import { formatValue } from 'publicodes'
import React, { useState } from 'react'
import { Trans, useTranslation } from 'react-i18next'
import { styled } from 'styled-components'

import Value from '@/components/EngineValue'
import { PlaceDesEntreprisesButton } from '@/components/PlaceDesEntreprises'
import RuleLink from '@/components/RuleLink'
import Simulation, {
	SimulationGoal,
	SimulationGoals,
} from '@/components/Simulation'
import { FromTop } from '@/components/ui/animate'
import Warning from '@/components/ui/WarningBlock'
import { useEngine } from '@/components/utils/EngineContext'
import { Grid } from '@/design-system/layout'
import { Strong } from '@/design-system/typography'
import { H2 } from '@/design-system/typography/heading'
import { Link } from '@/design-system/typography/link'
import { Li, Ul } from '@/design-system/typography/list'
import { Body } from '@/design-system/typography/paragraphs'
import { catchDivideByZeroError } from '@/utils'

declare global {
	interface Window {
		STONLY_WID: string
		StonlyWidget?: {
			open: () => void
			close: () => void
			toggle: () => void
			launcherShow: () => void
			launcherHide: () => void
			startURLWatcher: () => void
			stopURLWatcher: () => void
		}
	}
}

export default function Ch√¥magePartiel() {
	const { t } = useTranslation()

	return (
		<>
			<Grid
				container
				spacing={2}
				css={`
					justify-content: center;
				`}
			>
				<Grid item xl={9} lg={10} md={11} sm={12}>
					{' '}
					<Warning localStorageKey="covid19">
						<Ul>
							<Li>
								Ce simulateur ne prend pas en compte les r√©mun√©rations brut
								d√©finies sur 39h hebdomadaires.
							</Li>
							<Li>
								De m√™me, il ne prend pas en compte les indemnit√©s compl√©mentaire
								d'activit√© partielle pr√©vue par une convention/accord collectif
								ou une d√©cision unilat√©rale de l'employeur.
							</Li>
						</Ul>
					</Warning>
				</Grid>
			</Grid>

			<Simulation
				results={<ExplanationSection />}
				customEndMessages={<span>Voir les r√©sultats au-dessus</span>}
			>
				<SimulationGoals legend="Salaire brut avant ch√¥mage partiel">
					<SimulationGoal
						label={t('Salaire brut mensuel')}
						dottedName="salari√© . contrat . salaire brut"
					/>
				</SimulationGoals>
			</Simulation>
		</>
	)
}

export const SeoExplanations = () => {
	const { t } = useTranslation()

	return (
		<Trans i18nKey="pages.simulateurs.ch√¥mage-partiel.seo">
			<H2>Comment calculer l'indemnit√© d'activit√© partielle l√©gale ?</H2>
			<Body>
				L'indemnit√© d'activit√© partielle de base est fix√©e par la loi √†{' '}
				<Strong>
					<Value
						linkToRule={false}
						expression={
							'salari√© . activit√© partielle . indemnit√©s . l√©gale . taux'
						}
					/>{' '}
					du brut
				</Strong>
				. Elle est proratis√©e en fonction du nombre d'heures ch√¥m√©es. Pour un
				salari√© √† 2300 ‚Ç¨ brut mensuel, qui travaille √† 50% de son temps usuel,
				cela donne <Strong>2300 ‚Ç¨ √ó 50% √ó 60% = 805 ‚Ç¨</Strong>
			</Body>
			<Body>
				A cette indemnit√© de base s'ajoute l'indemnit√© compl√©mentaire pour les
				salaires proches du SMIC. Ce compl√©ment intervient lorsque le cumul de
				la r√©mun√©ration et de l'indemnit√© de base est en dessous d'un SMIC net.
				Ces indemnit√©s sont prises en charge par l'employeur, qui sera ensuite
				rembours√© en parti ou en totalit√© par l'√âtat.
			</Body>
			<Body>
				üëâ{' '}
				<RuleLink dottedName="salari√© . activit√© partielle . indemnit√©s">
					Voir le d√©tail du calcul de l'indemnit√©
				</RuleLink>
			</Body>
			<H2>Comment calculer la part rembours√©e par l'√âtat ?</H2>
			<Body>
				L'√âtat prend en charge une partie de l'indemnit√© partielle pour les
				salaires allant jusqu'√† <Strong>4,5 SMIC</Strong>, avec un minimum √†
				<Strong>
					{' '}
					<Value
						linkToRule={false}
						expression={
							'salari√© . activit√© partielle . indemnisation entreprise . plancher horaire * 1 heure'
						}
					/>{' '}
				</Strong>
				par heures ch√¥m√©e.
			</Body>
			<Body>
				üëâ{' '}
				<RuleLink dottedName="salari√© . activit√© partielle . indemnisation entreprise">
					Voir le d√©tail du calcul du remboursement de l'indemnit√©
				</RuleLink>
			</Body>
			<H2>√âchanger avec un conseiller sur l'activit√© partielle</H2>
			<Body as="div">
				Vous souhaitez :
				<Ul>
					<Li>v√©rifier l'allocation per√ßue, le reste √† charge</Li>
					<Li>
						conna√Ætre la proc√©dure de consultation du{' '}
						<abbr title="Comit√© social et √©conomique">CSE</abbr>, la demande
						d'autorisation pr√©alable
					</Li>
					<Li>vous informer sur l'activit√© partielle longue dur√©e</Li>
					<Li>
						former vos salari√©s en activit√© partielle √† de nouvelles comp√©tences
						(co√ªts p√©dagogique pris en charge)
					</Li>
				</Ul>
				<Body>
					Service public simple et rapide : vous √™tes rappel√©(e) par le
					conseiller qui peut vous aider. Partenaires mobilis√©s : les directions
					d√©partementales de l'emploi, du travail et des solidarit√©s.
				</Body>
				<PlaceDesEntreprisesButton pathname="/aide-entreprise/activite-partielle-mon-entreprise-urssaf-fr/demande/activite-partielle" />
			</Body>

			<H2>
				{' '}
				Quelles sont les cotisations sociales √† payer pour l'indemnit√©
				d'activit√© partielle ?
			</H2>
			<Body>
				L'indemnit√© d'activit√© partielle est soumise √† la CSG/CRDS et √† une
				contribution maladie dans certains cas. Pour en savoir plus, voir la
				page explicative sur{' '}
				<Link
					aria-label={t(
						"le site de l'Urssaf, acc√©der au site de l'Urssaf, nouvelle fen√™tre"
					)}
					href="https://www.urssaf.fr/portail/home/employeur/reduire-ou-cesser-lactivite/la-reduction-ou-la-cessation-tem/lactivite-partielle-dispositif-d/le-regime-social-de-lindemnite-d.html"
				>
					le site de l'Urssaf
				</Link>
				.
			</Body>
		</Trans>
	)
}

function ExplanationSection() {
	const {
		i18n: { language },
		t,
	} = useTranslation()

	const engine = useEngine()
	const net = 'salari√© . r√©mun√©ration . net . √† payer avant imp√¥t'
	const netHabituel = 'salari√© . activit√© partielle . net habituel'
	const totalEntreprise = 'salari√© . co√ªt total employeur'
	const totalEntrepriseHabituel =
		'salari√© . activit√© partielle . total employeur habituel'

	return (
		<FromTop>
			<div
				css={`
					overflow: hidden;
					margin: 1rem 0;
				`}
			>
				<ComparaisonTable
					rows={[
						['', t('Habituellement'), t('Avec ch√¥mage partiel')],
						[
							{ dottedName: net },
							{ dottedName: netHabituel },
							{
								dottedName: net,
								additionalText: language === 'fr' && (
									<span data-test-id="comparaison-net">
										Soit{' '}
										<Strong>
											{formatValue(
												catchDivideByZeroError(() =>
													engine.evaluate({
														valeur: `${net} / ${netHabituel}`,
														unit√©: '%',
														arrondi: 'oui',
													})
												)
											)}
										</Strong>{' '}
										du revenu net
									</span>
								),
							},
						],
						[
							{ dottedName: totalEntreprise },
							{ dottedName: totalEntrepriseHabituel },
							{
								dottedName: totalEntreprise,
								additionalText: language === 'fr' && (
									<span data-test-id="comparaison-total">
										Soit{' '}
										<Strong>
											{formatValue(
												catchDivideByZeroError(() =>
													engine.evaluate({
														valeur: `${totalEntreprise} / ${totalEntrepriseHabituel}`,
														unit√©: '%',
														arrondi: 'oui',
													})
												)
											)}
										</Strong>{' '}
										du co√ªt habituel
									</span>
								),
							},
						],
					]}
				/>
			</div>
		</FromTop>
	)
}

type ComparaisonTableProps = {
	rows: [Array<string>, ...Array<Line>]
}

type Line = Array<{
	dottedName: DottedName
	additionalText?: React.ReactNode
}>

function ComparaisonTable({ rows: [head, ...body] }: ComparaisonTableProps) {
	const columns = head.filter((x) => x !== '')
	const [currentColumnIndex, setCurrentColumnIndex] = useState(
		columns.length - 1
	)

	const { t } = useTranslation()

	const captionText = (
		<Trans i18nKey="chomagePartiel.tableCaption">
			Tableau indiquant le salaire net et le co√ªt pour l'employeur avec ou sans
			ch√¥mage partiel.
		</Trans>
	)

	return (
		<>
			<ResultTable className="mobile-version">
				<caption className="sr-only">{captionText}</caption>
				<thead>
					<tr>
						<th id="emptyTh1"></th>
						<th scope="col">
							<select
								onChange={(evt) =>
									setCurrentColumnIndex(Number(evt.target.value))
								}
								value={currentColumnIndex}
							>
								{columns.map((name, i) => (
									<option value={i} key={i}>
										{name}
									</option>
								))}
							</select>
						</th>
					</tr>
				</thead>
				<tbody>
					{body.map(([label, ...line], i) => (
						<tr key={i}>
							<th scope="row">
								<RowLabel {...label} />
							</th>
							<td>
								<ValueWithLink {...line[currentColumnIndex]} />
							</td>
						</tr>
					))}
				</tbody>
			</ResultTable>
			<ResultTable>
				<caption className="sr-only">{captionText}</caption>
				<thead>
					<tr>
						{head.map((label, i) => (
							<th key={i} scope="col">
								{label || t('Type')}
							</th>
						))}
					</tr>
				</thead>
				<tbody>
					{body.map(([label, ...line], i) => (
						<tr key={i}>
							<th scope="row">
								<RowLabel {...label} />
							</th>
							{line.map((cell, j) => (
								<td key={j}>
									<ValueWithLink {...cell} />
									{cell.additionalText && (
										<p
											css={`
												text-align: right;
											`}
										>
											{cell.additionalText}
										</p>
									)}
								</td>
							))}
						</tr>
					))}
				</tbody>
			</ResultTable>
		</>
	)
}

function ValueWithLink({ dottedName }: { dottedName: DottedName }) {
	const { language } = useTranslation().i18n
	const engine = useEngine()

	return (
		<RuleLink dottedName={dottedName}>
			{formatValue(engine.evaluate(dottedName), {
				language,
				displayedUnit: '‚Ç¨',
				precision: 0,
			})}
		</RuleLink>
	)
}

function RowLabel({ dottedName }: { dottedName: DottedName }) {
	const target = useEngine().getRule(dottedName)

	return (
		<>
			{' '}
			<div
				css={`
					font-weight: bold;
				`}
			>
				{target.title}
			</div>
			<p>{target.rawNode.r√©sum√©}</p>
		</>
	)
}

const ResultTable = styled.table`
	font-family: ${({ theme }) => theme.fonts.main};
	width: 100%;
	border-collapse: collapse;

	th {
		font-weight: initial;
	}

	&.mobile-version {
		display: none;
		@media (max-width: 660px) {
			display: table;
		}
		td,
		th {
			text-align: center;
		}
	}

	&:not(.mobile-version) {
		display: none;
		@media (min-width: 660px) {
			display: table;
		}

		td:nth-child(2),
		th:nth-child(2) {
			font-size: 1em;
			opacity: 0.8;
		}
		td,
		th {
			vertical-align: top;
			text-align: right;
		}
	}

	tbody tr {
		border-top: 1px solid rgba(0, 0, 0, 0.1);
	}

	td,
	th {
		padding: 0.8rem 1rem 0;
	}

	td:first-child,
	th:first-child {
		text-align: left;
		p {
			margin-top: 0.2rem;
		}
	}

	th:nth-child(n + 2) {
		white-space: nowrap;
		text-align: right;
		padding: 8px 16px;
	}

	th:first-child {
		width: 100%;
		padding-left: 10px;
		text-align: left;
	}

	td:nth-child(3),
	th:nth-child(2),
	th:nth-child(3) {
		font-weight: bold;
		p {
			font-weight: initial;
		}
	}

	td:last-child,
	th:last-child {
		background: var(--lighterColor);
		color: inherit;
	}
`
