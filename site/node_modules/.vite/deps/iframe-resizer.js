import {
  __commonJS
} from "./chunk-2LSFTFF7.js";

// ../node_modules/iframe-resizer/js/iframeResizer.js
var require_iframeResizer = __commonJS({
  "../node_modules/iframe-resizer/js/iframeResizer.js"(exports, module) {
    (function(undefined) {
      if (typeof window === "undefined")
        return;
      var count = 0, logEnabled = false, hiddenCheckEnabled = false, msgHeader = "message", msgHeaderLen = msgHeader.length, msgId = "[iFrameSizer]", msgIdLen = msgId.length, pagePosition = null, requestAnimationFrame = window.requestAnimationFrame, resetRequiredMethods = Object.freeze({
        max: 1,
        scroll: 1,
        bodyScroll: 1,
        documentElementScroll: 1
      }), settings = {}, timer = null, defaults = Object.freeze({
        autoResize: true,
        bodyBackground: null,
        bodyMargin: null,
        bodyMarginV1: 8,
        bodyPadding: null,
        checkOrigin: true,
        inPageLinks: false,
        enablePublicMethods: true,
        heightCalculationMethod: "bodyOffset",
        id: "iFrameResizer",
        interval: 32,
        log: false,
        maxHeight: Infinity,
        maxWidth: Infinity,
        minHeight: 0,
        minWidth: 0,
        mouseEvents: true,
        resizeFrom: "parent",
        scrolling: false,
        sizeHeight: true,
        sizeWidth: false,
        warningTimeout: 5e3,
        tolerance: 0,
        widthCalculationMethod: "scroll",
        onClose: function() {
          return true;
        },
        onClosed: function() {
        },
        onInit: function() {
        },
        onMessage: function() {
          warn("onMessage function not defined");
        },
        onMouseEnter: function() {
        },
        onMouseLeave: function() {
        },
        onResized: function() {
        },
        onScroll: function() {
          return true;
        }
      });
      function getMutationObserver() {
        return window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver;
      }
      function addEventListener(el, evt, func) {
        el.addEventListener(evt, func, false);
      }
      function removeEventListener(el, evt, func) {
        el.removeEventListener(evt, func, false);
      }
      function setupRequestAnimationFrame() {
        var vendors = ["moz", "webkit", "o", "ms"];
        var x;
        for (x = 0; x < vendors.length && !requestAnimationFrame; x += 1) {
          requestAnimationFrame = window[vendors[x] + "RequestAnimationFrame"];
        }
        if (requestAnimationFrame) {
          requestAnimationFrame = requestAnimationFrame.bind(window);
        } else {
          log("setup", "RequestAnimationFrame not supported");
        }
      }
      function getMyID(iframeId) {
        var retStr = "Host page: " + iframeId;
        if (window.top !== window.self) {
          retStr = window.parentIFrame && window.parentIFrame.getId ? window.parentIFrame.getId() + ": " + iframeId : "Nested host page: " + iframeId;
        }
        return retStr;
      }
      function formatLogHeader(iframeId) {
        return msgId + "[" + getMyID(iframeId) + "]";
      }
      function isLogEnabled(iframeId) {
        return settings[iframeId] ? settings[iframeId].log : logEnabled;
      }
      function log(iframeId, msg) {
        output("log", iframeId, msg, isLogEnabled(iframeId));
      }
      function info(iframeId, msg) {
        output("info", iframeId, msg, isLogEnabled(iframeId));
      }
      function warn(iframeId, msg) {
        output("warn", iframeId, msg, true);
      }
      function output(type, iframeId, msg, enabled) {
        if (true === enabled && "object" === typeof window.console) {
          console[type](formatLogHeader(iframeId), msg);
        }
      }
      function iFrameListener(event) {
        function resizeIFrame() {
          function resize() {
            setSize(messageData);
            setPagePosition(iframeId);
            on("onResized", messageData);
          }
          ensureInRange("Height");
          ensureInRange("Width");
          syncResize(resize, messageData, "init");
        }
        function processMsg() {
          var data = msg.slice(msgIdLen).split(":");
          var height = data[1] ? parseInt(data[1], 10) : 0;
          var iframe = settings[data[0]] && settings[data[0]].iframe;
          var compStyle = getComputedStyle(iframe);
          return {
            iframe,
            id: data[0],
            height: height + getPaddingEnds(compStyle) + getBorderEnds(compStyle),
            width: data[2],
            type: data[3]
          };
        }
        function getPaddingEnds(compStyle) {
          if (compStyle.boxSizing !== "border-box") {
            return 0;
          }
          var top = compStyle.paddingTop ? parseInt(compStyle.paddingTop, 10) : 0;
          var bot = compStyle.paddingBottom ? parseInt(compStyle.paddingBottom, 10) : 0;
          return top + bot;
        }
        function getBorderEnds(compStyle) {
          if (compStyle.boxSizing !== "border-box") {
            return 0;
          }
          var top = compStyle.borderTopWidth ? parseInt(compStyle.borderTopWidth, 10) : 0;
          var bot = compStyle.borderBottomWidth ? parseInt(compStyle.borderBottomWidth, 10) : 0;
          return top + bot;
        }
        function ensureInRange(Dimension) {
          var max = Number(settings[iframeId]["max" + Dimension]), min = Number(settings[iframeId]["min" + Dimension]), dimension = Dimension.toLowerCase(), size = Number(messageData[dimension]);
          log(iframeId, "Checking " + dimension + " is in range " + min + "-" + max);
          if (size < min) {
            size = min;
            log(iframeId, "Set " + dimension + " to min value");
          }
          if (size > max) {
            size = max;
            log(iframeId, "Set " + dimension + " to max value");
          }
          messageData[dimension] = "" + size;
        }
        function isMessageFromIFrame() {
          function checkAllowedOrigin() {
            function checkList() {
              var i = 0, retCode = false;
              log(
                iframeId,
                "Checking connection is from allowed list of origins: " + checkOrigin
              );
              for (; i < checkOrigin.length; i++) {
                if (checkOrigin[i] === origin) {
                  retCode = true;
                  break;
                }
              }
              return retCode;
            }
            function checkSingle() {
              var remoteHost = settings[iframeId] && settings[iframeId].remoteHost;
              log(iframeId, "Checking connection is from: " + remoteHost);
              return origin === remoteHost;
            }
            return checkOrigin.constructor === Array ? checkList() : checkSingle();
          }
          var origin = event.origin, checkOrigin = settings[iframeId] && settings[iframeId].checkOrigin;
          if (checkOrigin && "" + origin !== "null" && !checkAllowedOrigin()) {
            throw new Error(
              "Unexpected message received from: " + origin + " for " + messageData.iframe.id + ". Message was: " + event.data + ". This error can be disabled by setting the checkOrigin: false option or by providing of array of trusted domains."
            );
          }
          return true;
        }
        function isMessageForUs() {
          return msgId === ("" + msg).slice(0, msgIdLen) && msg.slice(msgIdLen).split(":")[0] in settings;
        }
        function isMessageFromMetaParent() {
          var retCode = messageData.type in { true: 1, false: 1, undefined: 1 };
          if (retCode) {
            log(iframeId, "Ignoring init message from meta parent page");
          }
          return retCode;
        }
        function getMsgBody(offset) {
          return msg.slice(msg.indexOf(":") + msgHeaderLen + offset);
        }
        function forwardMsgFromIFrame(msgBody) {
          log(
            iframeId,
            "onMessage passed: {iframe: " + messageData.iframe.id + ", message: " + msgBody + "}"
          );
          on("onMessage", {
            iframe: messageData.iframe,
            message: JSON.parse(msgBody)
          });
          log(iframeId, "--");
        }
        function getPageInfo() {
          var bodyPosition = document.body.getBoundingClientRect(), iFramePosition = messageData.iframe.getBoundingClientRect();
          return JSON.stringify({
            iframeHeight: iFramePosition.height,
            iframeWidth: iFramePosition.width,
            clientHeight: Math.max(
              document.documentElement.clientHeight,
              window.innerHeight || 0
            ),
            clientWidth: Math.max(
              document.documentElement.clientWidth,
              window.innerWidth || 0
            ),
            offsetTop: parseInt(iFramePosition.top - bodyPosition.top, 10),
            offsetLeft: parseInt(iFramePosition.left - bodyPosition.left, 10),
            scrollTop: window.pageYOffset,
            scrollLeft: window.pageXOffset,
            documentHeight: document.documentElement.clientHeight,
            documentWidth: document.documentElement.clientWidth,
            windowHeight: window.innerHeight,
            windowWidth: window.innerWidth
          });
        }
        function sendPageInfoToIframe(iframe, iframeId2) {
          function debouncedTrigger() {
            trigger("Send Page Info", "pageInfo:" + getPageInfo(), iframe, iframeId2);
          }
          debounceFrameEvents(debouncedTrigger, 32, iframeId2);
        }
        function startPageInfoMonitor() {
          function setListener(type, func) {
            function sendPageInfo() {
              if (settings[id]) {
                sendPageInfoToIframe(settings[id].iframe, id);
              } else {
                stop();
              }
            }
            ;
            ["scroll", "resize"].forEach(function(evt) {
              log(id, type + evt + " listener for sendPageInfo");
              func(window, evt, sendPageInfo);
            });
          }
          function stop() {
            setListener("Remove ", removeEventListener);
          }
          function start() {
            setListener("Add ", addEventListener);
          }
          var id = iframeId;
          start();
          if (settings[id]) {
            settings[id].stopPageInfo = stop;
          }
        }
        function stopPageInfoMonitor() {
          if (settings[iframeId] && settings[iframeId].stopPageInfo) {
            settings[iframeId].stopPageInfo();
            delete settings[iframeId].stopPageInfo;
          }
        }
        function checkIFrameExists() {
          var retBool = true;
          if (null === messageData.iframe) {
            warn(iframeId, "IFrame (" + messageData.id + ") not found");
            retBool = false;
          }
          return retBool;
        }
        function getElementPosition(target) {
          var iFramePosition = target.getBoundingClientRect();
          getPagePosition(iframeId);
          return {
            x: Math.floor(Number(iFramePosition.left) + Number(pagePosition.x)),
            y: Math.floor(Number(iFramePosition.top) + Number(pagePosition.y))
          };
        }
        function scrollRequestFromChild(addOffset) {
          function reposition() {
            pagePosition = newPosition;
            scrollTo();
            log(iframeId, "--");
          }
          function calcOffset() {
            return {
              x: Number(messageData.width) + offset.x,
              y: Number(messageData.height) + offset.y
            };
          }
          function scrollParent() {
            if (window.parentIFrame) {
              window.parentIFrame["scrollTo" + (addOffset ? "Offset" : "")](
                newPosition.x,
                newPosition.y
              );
            } else {
              warn(
                iframeId,
                "Unable to scroll to requested position, window.parentIFrame not found"
              );
            }
          }
          var offset = addOffset ? getElementPosition(messageData.iframe) : { x: 0, y: 0 }, newPosition = calcOffset();
          log(
            iframeId,
            "Reposition requested from iFrame (offset x:" + offset.x + " y:" + offset.y + ")"
          );
          if (window.top === window.self) {
            reposition();
          } else {
            scrollParent();
          }
        }
        function scrollTo() {
          if (false === on("onScroll", pagePosition)) {
            unsetPagePosition();
          } else {
            setPagePosition(iframeId);
          }
        }
        function findTarget(location) {
          function jumpToTarget() {
            var jumpPosition = getElementPosition(target);
            log(
              iframeId,
              "Moving to in page link (#" + hash + ") at x: " + jumpPosition.x + " y: " + jumpPosition.y
            );
            pagePosition = {
              x: jumpPosition.x,
              y: jumpPosition.y
            };
            scrollTo();
            log(iframeId, "--");
          }
          function jumpToParent() {
            if (window.parentIFrame) {
              window.parentIFrame.moveToAnchor(hash);
            } else {
              log(
                iframeId,
                "In page link #" + hash + " not found and window.parentIFrame not found"
              );
            }
          }
          var hash = location.split("#")[1] || "", hashData = decodeURIComponent(hash), target = document.getElementById(hashData) || document.getElementsByName(hashData)[0];
          if (target) {
            jumpToTarget();
          } else if (window.top === window.self) {
            log(iframeId, "In page link #" + hash + " not found");
          } else {
            jumpToParent();
          }
        }
        function onMouse(event2) {
          var mousePos = {};
          if (Number(messageData.width) === 0 && Number(messageData.height) === 0) {
            var data = getMsgBody(9).split(":");
            mousePos = {
              x: data[1],
              y: data[0]
            };
          } else {
            mousePos = {
              x: messageData.width,
              y: messageData.height
            };
          }
          on(event2, {
            iframe: messageData.iframe,
            screenX: Number(mousePos.x),
            screenY: Number(mousePos.y),
            type: messageData.type
          });
        }
        function on(funcName, val) {
          return chkEvent(iframeId, funcName, val);
        }
        function actionMsg() {
          if (settings[iframeId] && settings[iframeId].firstRun)
            firstRun();
          switch (messageData.type) {
            case "close": {
              closeIFrame(messageData.iframe);
              break;
            }
            case "message": {
              forwardMsgFromIFrame(getMsgBody(6));
              break;
            }
            case "mouseenter": {
              onMouse("onMouseEnter");
              break;
            }
            case "mouseleave": {
              onMouse("onMouseLeave");
              break;
            }
            case "autoResize": {
              settings[iframeId].autoResize = JSON.parse(getMsgBody(9));
              break;
            }
            case "scrollTo": {
              scrollRequestFromChild(false);
              break;
            }
            case "scrollToOffset": {
              scrollRequestFromChild(true);
              break;
            }
            case "pageInfo": {
              sendPageInfoToIframe(
                settings[iframeId] && settings[iframeId].iframe,
                iframeId
              );
              startPageInfoMonitor();
              break;
            }
            case "pageInfoStop": {
              stopPageInfoMonitor();
              break;
            }
            case "inPageLink": {
              findTarget(getMsgBody(9));
              break;
            }
            case "reset": {
              resetIFrame(messageData);
              break;
            }
            case "init": {
              resizeIFrame();
              on("onInit", messageData.iframe);
              break;
            }
            default: {
              if (Number(messageData.width) === 0 && Number(messageData.height) === 0) {
                warn(
                  "Unsupported message received (" + messageData.type + "), this is likely due to the iframe containing a later version of iframe-resizer than the parent page"
                );
              } else {
                resizeIFrame();
              }
            }
          }
        }
        function hasSettings(iframeId2) {
          var retBool = true;
          if (!settings[iframeId2]) {
            retBool = false;
            warn(
              messageData.type + " No settings for " + iframeId2 + ". Message was: " + msg
            );
          }
          return retBool;
        }
        function iFrameReadyMsgReceived() {
          for (var iframeId2 in settings) {
            trigger(
              "iFrame requested init",
              createOutgoingMsg(iframeId2),
              settings[iframeId2].iframe,
              iframeId2
            );
          }
        }
        function firstRun() {
          if (settings[iframeId]) {
            settings[iframeId].firstRun = false;
          }
        }
        var msg = event.data, messageData = {}, iframeId = null;
        if ("[iFrameResizerChild]Ready" === msg) {
          iFrameReadyMsgReceived();
        } else if (isMessageForUs()) {
          messageData = processMsg();
          iframeId = messageData.id;
          if (settings[iframeId]) {
            settings[iframeId].loaded = true;
          }
          if (!isMessageFromMetaParent() && hasSettings(iframeId)) {
            log(iframeId, "Received: " + msg);
            if (checkIFrameExists() && isMessageFromIFrame()) {
              actionMsg();
            }
          }
        } else {
          info(iframeId, "Ignored: " + msg);
        }
      }
      function chkEvent(iframeId, funcName, val) {
        var func = null, retVal = null;
        if (settings[iframeId]) {
          func = settings[iframeId][funcName];
          if ("function" === typeof func) {
            retVal = func(val);
          } else {
            throw new TypeError(
              funcName + " on iFrame[" + iframeId + "] is not a function"
            );
          }
        }
        return retVal;
      }
      function removeIframeListeners(iframe) {
        var iframeId = iframe.id;
        delete settings[iframeId];
      }
      function closeIFrame(iframe) {
        var iframeId = iframe.id;
        if (chkEvent(iframeId, "onClose", iframeId) === false) {
          log(iframeId, "Close iframe cancelled by onClose event");
          return;
        }
        log(iframeId, "Removing iFrame: " + iframeId);
        try {
          if (iframe.parentNode) {
            iframe.parentNode.removeChild(iframe);
          }
        } catch (error) {
          warn(error);
        }
        chkEvent(iframeId, "onClosed", iframeId);
        log(iframeId, "--");
        removeIframeListeners(iframe);
      }
      function getPagePosition(iframeId) {
        if (null === pagePosition) {
          pagePosition = {
            x: window.pageXOffset === undefined ? document.documentElement.scrollLeft : window.pageXOffset,
            y: window.pageYOffset === undefined ? document.documentElement.scrollTop : window.pageYOffset
          };
          log(
            iframeId,
            "Get page position: " + pagePosition.x + "," + pagePosition.y
          );
        }
      }
      function setPagePosition(iframeId) {
        if (null !== pagePosition) {
          window.scrollTo(pagePosition.x, pagePosition.y);
          log(
            iframeId,
            "Set page position: " + pagePosition.x + "," + pagePosition.y
          );
          unsetPagePosition();
        }
      }
      function unsetPagePosition() {
        pagePosition = null;
      }
      function resetIFrame(messageData) {
        function reset() {
          setSize(messageData);
          trigger("reset", "reset", messageData.iframe, messageData.id);
        }
        log(
          messageData.id,
          "Size reset requested by " + ("init" === messageData.type ? "host page" : "iFrame")
        );
        getPagePosition(messageData.id);
        syncResize(reset, messageData, "reset");
      }
      function setSize(messageData) {
        function setDimension(dimension) {
          if (!messageData.id) {
            log("undefined", "messageData id not set");
            return;
          }
          messageData.iframe.style[dimension] = messageData[dimension] + "px";
          log(
            messageData.id,
            "IFrame (" + iframeId + ") " + dimension + " set to " + messageData[dimension] + "px"
          );
        }
        function chkZero(dimension) {
          if (!hiddenCheckEnabled && "0" === messageData[dimension]) {
            hiddenCheckEnabled = true;
            log(iframeId, "Hidden iFrame detected, creating visibility listener");
            fixHiddenIFrames();
          }
        }
        function processDimension(dimension) {
          setDimension(dimension);
          chkZero(dimension);
        }
        var iframeId = messageData.iframe.id;
        if (settings[iframeId]) {
          if (settings[iframeId].sizeHeight) {
            processDimension("height");
          }
          if (settings[iframeId].sizeWidth) {
            processDimension("width");
          }
        }
      }
      function syncResize(func, messageData, doNotSync) {
        if (doNotSync !== messageData.type && requestAnimationFrame && // including check for jasmine because had trouble getting spy to work in unit test using requestAnimationFrame
        !window.jasmine) {
          log(messageData.id, "Requesting animation frame");
          requestAnimationFrame(func);
        } else {
          func();
        }
      }
      function trigger(calleeMsg, msg, iframe, id, noResponseWarning) {
        function postMessageToIFrame() {
          var target = settings[id] && settings[id].targetOrigin;
          log(
            id,
            "[" + calleeMsg + "] Sending msg to iframe[" + id + "] (" + msg + ") targetOrigin: " + target
          );
          iframe.contentWindow.postMessage(msgId + msg, target);
        }
        function iFrameNotFound() {
          warn(id, "[" + calleeMsg + "] IFrame(" + id + ") not found");
        }
        function chkAndSend() {
          if (iframe && "contentWindow" in iframe && null !== iframe.contentWindow) {
            postMessageToIFrame();
          } else {
            iFrameNotFound();
          }
        }
        function warnOnNoResponse() {
          function warning() {
            if (settings[id] && !settings[id].loaded && !errorShown) {
              errorShown = true;
              warn(
                id,
                "IFrame has not responded within " + settings[id].warningTimeout / 1e3 + " seconds. Check iFrameResizer.contentWindow.js has been loaded in iFrame. This message can be ignored if everything is working, or you can set the warningTimeout option to a higher value or zero to suppress this warning."
              );
            }
          }
          if (!!noResponseWarning && settings[id] && !!settings[id].warningTimeout) {
            settings[id].msgTimeout = setTimeout(
              warning,
              settings[id].warningTimeout
            );
          }
        }
        var errorShown = false;
        id = id || iframe.id;
        if (settings[id]) {
          chkAndSend();
          warnOnNoResponse();
        }
      }
      function createOutgoingMsg(iframeId) {
        return iframeId + ":" + settings[iframeId].bodyMarginV1 + ":" + settings[iframeId].sizeWidth + ":" + settings[iframeId].log + ":" + settings[iframeId].interval + ":" + settings[iframeId].enablePublicMethods + ":" + settings[iframeId].autoResize + ":" + settings[iframeId].bodyMargin + ":" + settings[iframeId].heightCalculationMethod + ":" + settings[iframeId].bodyBackground + ":" + settings[iframeId].bodyPadding + ":" + settings[iframeId].tolerance + ":" + settings[iframeId].inPageLinks + ":" + settings[iframeId].resizeFrom + ":" + settings[iframeId].widthCalculationMethod + ":" + settings[iframeId].mouseEvents;
      }
      function isNumber(value) {
        return typeof value === "number";
      }
      function setupIFrame(iframe, options) {
        function setLimits() {
          function addStyle(style) {
            var styleValue = settings[iframeId][style];
            if (Infinity !== styleValue && 0 !== styleValue) {
              iframe.style[style] = isNumber(styleValue) ? styleValue + "px" : styleValue;
              log(iframeId, "Set " + style + " = " + iframe.style[style]);
            }
          }
          function chkMinMax(dimension) {
            if (settings[iframeId]["min" + dimension] > settings[iframeId]["max" + dimension]) {
              throw new Error(
                "Value for min" + dimension + " can not be greater than max" + dimension
              );
            }
          }
          chkMinMax("Height");
          chkMinMax("Width");
          addStyle("maxHeight");
          addStyle("minHeight");
          addStyle("maxWidth");
          addStyle("minWidth");
        }
        function newId() {
          var id = options && options.id || defaults.id + count++;
          if (null !== document.getElementById(id)) {
            id += count++;
          }
          return id;
        }
        function ensureHasId(iframeId2) {
          if (typeof iframeId2 !== "string") {
            throw new TypeError("Invaild id for iFrame. Expected String");
          }
          if ("" === iframeId2) {
            iframe.id = iframeId2 = newId();
            logEnabled = (options || {}).log;
            log(
              iframeId2,
              "Added missing iframe ID: " + iframeId2 + " (" + iframe.src + ")"
            );
          }
          return iframeId2;
        }
        function setScrolling() {
          log(
            iframeId,
            "IFrame scrolling " + (settings[iframeId] && settings[iframeId].scrolling ? "enabled" : "disabled") + " for " + iframeId
          );
          iframe.style.overflow = false === (settings[iframeId] && settings[iframeId].scrolling) ? "hidden" : "auto";
          switch (settings[iframeId] && settings[iframeId].scrolling) {
            case "omit": {
              break;
            }
            case true: {
              iframe.scrolling = "yes";
              break;
            }
            case false: {
              iframe.scrolling = "no";
              break;
            }
            default: {
              iframe.scrolling = settings[iframeId] ? settings[iframeId].scrolling : "no";
            }
          }
        }
        function setupBodyMarginValues() {
          if ("number" === typeof (settings[iframeId] && settings[iframeId].bodyMargin) || "0" === (settings[iframeId] && settings[iframeId].bodyMargin)) {
            settings[iframeId].bodyMarginV1 = settings[iframeId].bodyMargin;
            settings[iframeId].bodyMargin = "" + settings[iframeId].bodyMargin + "px";
          }
        }
        function checkReset() {
          var firstRun = settings[iframeId] && settings[iframeId].firstRun, resetRequertMethod = settings[iframeId] && settings[iframeId].heightCalculationMethod in resetRequiredMethods;
          if (!firstRun && resetRequertMethod) {
            resetIFrame({ iframe, height: 0, width: 0, type: "init" });
          }
        }
        function setupIFrameObject() {
          if (settings[iframeId]) {
            settings[iframeId].iframe.iFrameResizer = {
              close: closeIFrame.bind(null, settings[iframeId].iframe),
              removeListeners: removeIframeListeners.bind(
                null,
                settings[iframeId].iframe
              ),
              resize: trigger.bind(
                null,
                "Window resize",
                "resize",
                settings[iframeId].iframe
              ),
              moveToAnchor: function(anchor) {
                trigger(
                  "Move to anchor",
                  "moveToAnchor:" + anchor,
                  settings[iframeId].iframe,
                  iframeId
                );
              },
              sendMessage: function(message) {
                message = JSON.stringify(message);
                trigger(
                  "Send Message",
                  "message:" + message,
                  settings[iframeId].iframe,
                  iframeId
                );
              }
            };
          }
        }
        function init(msg) {
          function iFrameLoaded() {
            trigger("iFrame.onload", msg, iframe, undefined, true);
            checkReset();
          }
          function createDestroyObserver(MutationObserver2) {
            if (!iframe.parentNode) {
              return;
            }
            var destroyObserver = new MutationObserver2(function(mutations) {
              mutations.forEach(function(mutation) {
                var removedNodes = Array.prototype.slice.call(mutation.removedNodes);
                removedNodes.forEach(function(removedNode) {
                  if (removedNode === iframe) {
                    closeIFrame(iframe);
                  }
                });
              });
            });
            destroyObserver.observe(iframe.parentNode, {
              childList: true
            });
          }
          var MutationObserver = getMutationObserver();
          if (MutationObserver) {
            createDestroyObserver(MutationObserver);
          }
          addEventListener(iframe, "load", iFrameLoaded);
          trigger("init", msg, iframe, undefined, true);
        }
        function checkOptions(options2) {
          if ("object" !== typeof options2) {
            throw new TypeError("Options is not an object");
          }
        }
        function copyOptions(options2) {
          for (var option in defaults) {
            if (Object.prototype.hasOwnProperty.call(defaults, option)) {
              settings[iframeId][option] = Object.prototype.hasOwnProperty.call(
                options2,
                option
              ) ? options2[option] : defaults[option];
            }
          }
        }
        function getTargetOrigin(remoteHost) {
          return "" === remoteHost || null !== remoteHost.match(/^(about:blank|javascript:|file:\/\/)/) ? "*" : remoteHost;
        }
        function depricate(key) {
          var splitName = key.split("Callback");
          if (splitName.length === 2) {
            var name = "on" + splitName[0].charAt(0).toUpperCase() + splitName[0].slice(1);
            this[name] = this[key];
            delete this[key];
            warn(
              iframeId,
              "Deprecated: '" + key + "' has been renamed '" + name + "'. The old method will be removed in the next major version."
            );
          }
        }
        function processOptions(options2) {
          options2 = options2 || {};
          settings[iframeId] = /* @__PURE__ */ Object.create(null);
          settings[iframeId].iframe = iframe;
          settings[iframeId].firstRun = true;
          settings[iframeId].remoteHost = iframe.src && iframe.src.split("/").slice(0, 3).join("/");
          checkOptions(options2);
          Object.keys(options2).forEach(depricate, options2);
          copyOptions(options2);
          if (settings[iframeId]) {
            settings[iframeId].targetOrigin = true === settings[iframeId].checkOrigin ? getTargetOrigin(settings[iframeId].remoteHost) : "*";
          }
        }
        function beenHere() {
          return iframeId in settings && "iFrameResizer" in iframe;
        }
        var iframeId = ensureHasId(iframe.id);
        if (beenHere()) {
          warn(iframeId, "Ignored iFrame, already setup.");
        } else {
          processOptions(options);
          setScrolling();
          setLimits();
          setupBodyMarginValues();
          init(createOutgoingMsg(iframeId));
          setupIFrameObject();
        }
      }
      function debouce(fn, time) {
        if (null === timer) {
          timer = setTimeout(function() {
            timer = null;
            fn();
          }, time);
        }
      }
      var frameTimer = {};
      function debounceFrameEvents(fn, time, frameId) {
        if (!frameTimer[frameId]) {
          frameTimer[frameId] = setTimeout(function() {
            frameTimer[frameId] = null;
            fn();
          }, time);
        }
      }
      function fixHiddenIFrames() {
        function checkIFrames() {
          function checkIFrame(settingId) {
            function chkDimension(dimension) {
              return "0px" === (settings[settingId] && settings[settingId].iframe.style[dimension]);
            }
            function isVisible(el) {
              return null !== el.offsetParent;
            }
            if (settings[settingId] && isVisible(settings[settingId].iframe) && (chkDimension("height") || chkDimension("width"))) {
              trigger(
                "Visibility change",
                "resize",
                settings[settingId].iframe,
                settingId
              );
            }
          }
          Object.keys(settings).forEach(function(key) {
            checkIFrame(key);
          });
        }
        function mutationObserved(mutations) {
          log(
            "window",
            "Mutation observed: " + mutations[0].target + " " + mutations[0].type
          );
          debouce(checkIFrames, 16);
        }
        function createMutationObserver() {
          var target = document.querySelector("body"), config = {
            attributes: true,
            attributeOldValue: false,
            characterData: true,
            characterDataOldValue: false,
            childList: true,
            subtree: true
          }, observer = new MutationObserver(mutationObserved);
          observer.observe(target, config);
        }
        var MutationObserver = getMutationObserver();
        if (MutationObserver) {
          createMutationObserver();
        }
      }
      function resizeIFrames(event) {
        function resize() {
          sendTriggerMsg("Window " + event, "resize");
        }
        log("window", "Trigger event: " + event);
        debouce(resize, 16);
      }
      function tabVisible() {
        function resize() {
          sendTriggerMsg("Tab Visible", "resize");
        }
        if ("hidden" !== document.visibilityState) {
          log("document", "Trigger event: Visibility change");
          debouce(resize, 16);
        }
      }
      function sendTriggerMsg(eventName, event) {
        function isIFrameResizeEnabled(iframeId) {
          return settings[iframeId] && "parent" === settings[iframeId].resizeFrom && settings[iframeId].autoResize && !settings[iframeId].firstRun;
        }
        Object.keys(settings).forEach(function(iframeId) {
          if (isIFrameResizeEnabled(iframeId)) {
            trigger(eventName, event, settings[iframeId].iframe, iframeId);
          }
        });
      }
      function setupEventListeners() {
        addEventListener(window, "message", iFrameListener);
        addEventListener(window, "resize", function() {
          resizeIFrames("resize");
        });
        addEventListener(document, "visibilitychange", tabVisible);
        addEventListener(document, "-webkit-visibilitychange", tabVisible);
      }
      function factory() {
        function init(options, element) {
          function chkType() {
            if (!element.tagName) {
              throw new TypeError("Object is not a valid DOM element");
            } else if ("IFRAME" !== element.tagName.toUpperCase()) {
              throw new TypeError(
                "Expected <IFRAME> tag, found <" + element.tagName + ">"
              );
            }
          }
          if (element) {
            chkType();
            setupIFrame(element, options);
            iFrames.push(element);
          }
        }
        function warnDeprecatedOptions(options) {
          if (options && options.enablePublicMethods) {
            warn(
              "enablePublicMethods option has been removed, public methods are now always available in the iFrame"
            );
          }
        }
        var iFrames;
        setupRequestAnimationFrame();
        setupEventListeners();
        return function iFrameResizeF(options, target) {
          iFrames = [];
          warnDeprecatedOptions(options);
          switch (typeof target) {
            case "undefined":
            case "string": {
              Array.prototype.forEach.call(
                document.querySelectorAll(target || "iframe"),
                init.bind(undefined, options)
              );
              break;
            }
            case "object": {
              init(options, target);
              break;
            }
            default: {
              throw new TypeError("Unexpected data type (" + typeof target + ")");
            }
          }
          return iFrames;
        };
      }
      function createJQueryPublicMethod($) {
        if (!$.fn) {
          info("", "Unable to bind to jQuery, it is not fully loaded.");
        } else if (!$.fn.iFrameResize) {
          $.fn.iFrameResize = function $iFrameResizeF(options) {
            function init(index, element) {
              setupIFrame(element, options);
            }
            return this.filter("iframe").each(init).end();
          };
        }
      }
      if (window.jQuery !== undefined) {
        createJQueryPublicMethod(window.jQuery);
      }
      if (typeof define === "function" && define.amd) {
        define([], factory);
      } else if (typeof module === "object" && typeof module.exports === "object") {
        module.exports = factory();
      }
      window.iFrameResize = window.iFrameResize || factory();
    })();
  }
});

// ../node_modules/iframe-resizer/js/iframeResizer.contentWindow.js
var require_iframeResizer_contentWindow = __commonJS({
  "../node_modules/iframe-resizer/js/iframeResizer.contentWindow.js"(exports, module) {
    (function(undefined) {
      if (typeof window === "undefined")
        return;
      var autoResize = true, base = 10, bodyBackground = "", bodyMargin = 0, bodyMarginStr = "", bodyObserver = null, bodyPadding = "", calculateWidth = false, doubleEventList = { resize: 1, click: 1 }, eventCancelTimer = 128, firstRun = true, height = 1, heightCalcModeDefault = "bodyOffset", heightCalcMode = heightCalcModeDefault, initLock = true, initMsg = "", inPageLinks = {}, interval = 32, intervalTimer = null, logging = false, mouseEvents = false, msgID = "[iFrameSizer]", msgIdLen = msgID.length, myID = "", resetRequiredMethods = {
        max: 1,
        min: 1,
        bodyScroll: 1,
        documentElementScroll: 1
      }, resizeFrom = "child", sendPermit = true, target = window.parent, targetOriginDefault = "*", tolerance = 0, triggerLocked = false, triggerLockedTimer = null, throttledTimer = 16, width = 1, widthCalcModeDefault = "scroll", widthCalcMode = widthCalcModeDefault, win = window, onMessage = function() {
        warn("onMessage function not defined");
      }, onReady = function() {
      }, onPageInfo = function() {
      }, customCalcMethods = {
        height: function() {
          warn("Custom height calculation function not defined");
          return document.documentElement.offsetHeight;
        },
        width: function() {
          warn("Custom width calculation function not defined");
          return document.body.scrollWidth;
        }
      }, eventHandlersByName = {}, passiveSupported = false;
      function noop() {
      }
      try {
        var options = Object.create(
          {},
          {
            passive: {
              // eslint-disable-next-line getter-return
              get: function() {
                passiveSupported = true;
              }
            }
          }
        );
        window.addEventListener("test", noop, options);
        window.removeEventListener("test", noop, options);
      } catch (error) {
      }
      function addEventListener(el, evt, func, options2) {
        el.addEventListener(evt, func, passiveSupported ? options2 || {} : false);
      }
      function removeEventListener(el, evt, func) {
        el.removeEventListener(evt, func, false);
      }
      function capitalizeFirstLetter(string) {
        return string.charAt(0).toUpperCase() + string.slice(1);
      }
      function throttle(func) {
        var context, args, result, timeout = null, previous = 0, later = function() {
          previous = Date.now();
          timeout = null;
          result = func.apply(context, args);
          if (!timeout) {
            context = args = null;
          }
        };
        return function() {
          var now = Date.now();
          if (!previous) {
            previous = now;
          }
          var remaining = throttledTimer - (now - previous);
          context = this;
          args = arguments;
          if (remaining <= 0 || remaining > throttledTimer) {
            if (timeout) {
              clearTimeout(timeout);
              timeout = null;
            }
            previous = now;
            result = func.apply(context, args);
            if (!timeout) {
              context = args = null;
            }
          } else if (!timeout) {
            timeout = setTimeout(later, remaining);
          }
          return result;
        };
      }
      function formatLogMsg(msg) {
        return msgID + "[" + myID + "] " + msg;
      }
      function log(msg) {
        if (logging && "object" === typeof window.console) {
          console.log(formatLogMsg(msg));
        }
      }
      function warn(msg) {
        if ("object" === typeof window.console) {
          console.warn(formatLogMsg(msg));
        }
      }
      function init() {
        readDataFromParent();
        log("Initialising iFrame (" + window.location.href + ")");
        readDataFromPage();
        setMargin();
        setBodyStyle("background", bodyBackground);
        setBodyStyle("padding", bodyPadding);
        injectClearFixIntoBodyElement();
        checkHeightMode();
        checkWidthMode();
        stopInfiniteResizingOfIFrame();
        setupPublicMethods();
        setupMouseEvents();
        startEventListeners();
        inPageLinks = setupInPageLinks();
        sendSize("init", "Init message from host page");
        onReady();
      }
      function readDataFromParent() {
        function strBool(str) {
          return "true" === str;
        }
        var data = initMsg.slice(msgIdLen).split(":");
        myID = data[0];
        bodyMargin = undefined === data[1] ? bodyMargin : Number(data[1]);
        calculateWidth = undefined === data[2] ? calculateWidth : strBool(data[2]);
        logging = undefined === data[3] ? logging : strBool(data[3]);
        interval = undefined === data[4] ? interval : Number(data[4]);
        autoResize = undefined === data[6] ? autoResize : strBool(data[6]);
        bodyMarginStr = data[7];
        heightCalcMode = undefined === data[8] ? heightCalcMode : data[8];
        bodyBackground = data[9];
        bodyPadding = data[10];
        tolerance = undefined === data[11] ? tolerance : Number(data[11]);
        inPageLinks.enable = undefined === data[12] ? false : strBool(data[12]);
        resizeFrom = undefined === data[13] ? resizeFrom : data[13];
        widthCalcMode = undefined === data[14] ? widthCalcMode : data[14];
        mouseEvents = undefined === data[15] ? mouseEvents : strBool(data[15]);
      }
      function depricate(key) {
        var splitName = key.split("Callback");
        if (splitName.length === 2) {
          var name = "on" + splitName[0].charAt(0).toUpperCase() + splitName[0].slice(1);
          this[name] = this[key];
          delete this[key];
          warn(
            "Deprecated: '" + key + "' has been renamed '" + name + "'. The old method will be removed in the next major version."
          );
        }
      }
      function readDataFromPage() {
        function readData() {
          var data = window.iFrameResizer;
          log("Reading data from page: " + JSON.stringify(data));
          Object.keys(data).forEach(depricate, data);
          onMessage = "onMessage" in data ? data.onMessage : onMessage;
          onReady = "onReady" in data ? data.onReady : onReady;
          targetOriginDefault = "targetOrigin" in data ? data.targetOrigin : targetOriginDefault;
          heightCalcMode = "heightCalculationMethod" in data ? data.heightCalculationMethod : heightCalcMode;
          widthCalcMode = "widthCalculationMethod" in data ? data.widthCalculationMethod : widthCalcMode;
        }
        function setupCustomCalcMethods(calcMode, calcFunc) {
          if ("function" === typeof calcMode) {
            log("Setup custom " + calcFunc + "CalcMethod");
            customCalcMethods[calcFunc] = calcMode;
            calcMode = "custom";
          }
          return calcMode;
        }
        if ("iFrameResizer" in window && Object === window.iFrameResizer.constructor) {
          readData();
          heightCalcMode = setupCustomCalcMethods(heightCalcMode, "height");
          widthCalcMode = setupCustomCalcMethods(widthCalcMode, "width");
        }
        log("TargetOrigin for parent set to: " + targetOriginDefault);
      }
      function chkCSS(attr, value) {
        if (-1 !== value.indexOf("-")) {
          warn("Negative CSS value ignored for " + attr);
          value = "";
        }
        return value;
      }
      function setBodyStyle(attr, value) {
        if (undefined !== value && "" !== value && "null" !== value) {
          document.body.style[attr] = value;
          log("Body " + attr + ' set to "' + value + '"');
        }
      }
      function setMargin() {
        if (undefined === bodyMarginStr) {
          bodyMarginStr = bodyMargin + "px";
        }
        setBodyStyle("margin", chkCSS("margin", bodyMarginStr));
      }
      function stopInfiniteResizingOfIFrame() {
        document.documentElement.style.height = "";
        document.body.style.height = "";
        log('HTML & body height set to "auto"');
      }
      function manageTriggerEvent(options2) {
        var listener = {
          add: function(eventName) {
            function handleEvent() {
              sendSize(options2.eventName, options2.eventType);
            }
            eventHandlersByName[eventName] = handleEvent;
            addEventListener(window, eventName, handleEvent, { passive: true });
          },
          remove: function(eventName) {
            var handleEvent = eventHandlersByName[eventName];
            delete eventHandlersByName[eventName];
            removeEventListener(window, eventName, handleEvent);
          }
        };
        if (options2.eventNames && Array.prototype.map) {
          options2.eventName = options2.eventNames[0];
          options2.eventNames.map(listener[options2.method]);
        } else {
          listener[options2.method](options2.eventName);
        }
        log(
          capitalizeFirstLetter(options2.method) + " event listener: " + options2.eventType
        );
      }
      function manageEventListeners(method) {
        manageTriggerEvent({
          method,
          eventType: "Animation Start",
          eventNames: ["animationstart", "webkitAnimationStart"]
        });
        manageTriggerEvent({
          method,
          eventType: "Animation Iteration",
          eventNames: ["animationiteration", "webkitAnimationIteration"]
        });
        manageTriggerEvent({
          method,
          eventType: "Animation End",
          eventNames: ["animationend", "webkitAnimationEnd"]
        });
        manageTriggerEvent({
          method,
          eventType: "Input",
          eventName: "input"
        });
        manageTriggerEvent({
          method,
          eventType: "Mouse Up",
          eventName: "mouseup"
        });
        manageTriggerEvent({
          method,
          eventType: "Mouse Down",
          eventName: "mousedown"
        });
        manageTriggerEvent({
          method,
          eventType: "Orientation Change",
          eventName: "orientationchange"
        });
        manageTriggerEvent({
          method,
          eventType: "Print",
          eventNames: ["afterprint", "beforeprint"]
        });
        manageTriggerEvent({
          method,
          eventType: "Ready State Change",
          eventName: "readystatechange"
        });
        manageTriggerEvent({
          method,
          eventType: "Touch Start",
          eventName: "touchstart"
        });
        manageTriggerEvent({
          method,
          eventType: "Touch End",
          eventName: "touchend"
        });
        manageTriggerEvent({
          method,
          eventType: "Touch Cancel",
          eventName: "touchcancel"
        });
        manageTriggerEvent({
          method,
          eventType: "Transition Start",
          eventNames: [
            "transitionstart",
            "webkitTransitionStart",
            "MSTransitionStart",
            "oTransitionStart",
            "otransitionstart"
          ]
        });
        manageTriggerEvent({
          method,
          eventType: "Transition Iteration",
          eventNames: [
            "transitioniteration",
            "webkitTransitionIteration",
            "MSTransitionIteration",
            "oTransitionIteration",
            "otransitioniteration"
          ]
        });
        manageTriggerEvent({
          method,
          eventType: "Transition End",
          eventNames: [
            "transitionend",
            "webkitTransitionEnd",
            "MSTransitionEnd",
            "oTransitionEnd",
            "otransitionend"
          ]
        });
        if ("child" === resizeFrom) {
          manageTriggerEvent({
            method,
            eventType: "IFrame Resized",
            eventName: "resize"
          });
        }
      }
      function checkCalcMode(calcMode, calcModeDefault, modes, type) {
        if (calcModeDefault !== calcMode) {
          if (!(calcMode in modes)) {
            warn(
              calcMode + " is not a valid option for " + type + "CalculationMethod."
            );
            calcMode = calcModeDefault;
          }
          log(type + ' calculation method set to "' + calcMode + '"');
        }
        return calcMode;
      }
      function checkHeightMode() {
        heightCalcMode = checkCalcMode(
          heightCalcMode,
          heightCalcModeDefault,
          getHeight,
          "height"
        );
      }
      function checkWidthMode() {
        widthCalcMode = checkCalcMode(
          widthCalcMode,
          widthCalcModeDefault,
          getWidth,
          "width"
        );
      }
      function startEventListeners() {
        if (true === autoResize) {
          manageEventListeners("add");
          setupMutationObserver();
        } else {
          log("Auto Resize disabled");
        }
      }
      function disconnectMutationObserver() {
        if (null !== bodyObserver) {
          bodyObserver.disconnect();
        }
      }
      function stopEventListeners() {
        manageEventListeners("remove");
        disconnectMutationObserver();
        clearInterval(intervalTimer);
      }
      function injectClearFixIntoBodyElement() {
        var clearFix = document.createElement("div");
        clearFix.style.clear = "both";
        clearFix.style.display = "block";
        clearFix.style.height = "0";
        document.body.appendChild(clearFix);
      }
      function setupInPageLinks() {
        function getPagePosition() {
          return {
            x: window.pageXOffset === undefined ? document.documentElement.scrollLeft : window.pageXOffset,
            y: window.pageYOffset === undefined ? document.documentElement.scrollTop : window.pageYOffset
          };
        }
        function getElementPosition(el) {
          var elPosition = el.getBoundingClientRect(), pagePosition = getPagePosition();
          return {
            x: parseInt(elPosition.left, 10) + parseInt(pagePosition.x, 10),
            y: parseInt(elPosition.top, 10) + parseInt(pagePosition.y, 10)
          };
        }
        function findTarget(location) {
          function jumpToTarget(target3) {
            var jumpPosition = getElementPosition(target3);
            log(
              "Moving to in page link (#" + hash + ") at x: " + jumpPosition.x + " y: " + jumpPosition.y
            );
            sendMsg(jumpPosition.y, jumpPosition.x, "scrollToOffset");
          }
          var hash = location.split("#")[1] || location, hashData = decodeURIComponent(hash), target2 = document.getElementById(hashData) || document.getElementsByName(hashData)[0];
          if (undefined === target2) {
            log(
              "In page link (#" + hash + ") not found in iFrame, so sending to parent"
            );
            sendMsg(0, 0, "inPageLink", "#" + hash);
          } else {
            jumpToTarget(target2);
          }
        }
        function checkLocationHash() {
          var hash = window.location.hash;
          var href = window.location.href;
          if ("" !== hash && "#" !== hash) {
            findTarget(href);
          }
        }
        function bindAnchors() {
          function setupLink(el) {
            function linkClicked(e) {
              e.preventDefault();
              findTarget(this.getAttribute("href"));
            }
            if ("#" !== el.getAttribute("href")) {
              addEventListener(el, "click", linkClicked);
            }
          }
          Array.prototype.forEach.call(
            document.querySelectorAll('a[href^="#"]'),
            setupLink
          );
        }
        function bindLocationHash() {
          addEventListener(window, "hashchange", checkLocationHash);
        }
        function initCheck() {
          setTimeout(checkLocationHash, eventCancelTimer);
        }
        function enableInPageLinks() {
          if (Array.prototype.forEach && document.querySelectorAll) {
            log("Setting up location.hash handlers");
            bindAnchors();
            bindLocationHash();
            initCheck();
          } else {
            warn(
              "In page linking not fully supported in this browser! (See README.md for IE8 workaround)"
            );
          }
        }
        if (inPageLinks.enable) {
          enableInPageLinks();
        } else {
          log("In page linking not enabled");
        }
        return {
          findTarget
        };
      }
      function setupMouseEvents() {
        if (mouseEvents !== true)
          return;
        function sendMouse(e) {
          sendMsg(0, 0, e.type, e.screenY + ":" + e.screenX);
        }
        function addMouseListener(evt, name) {
          log("Add event listener: " + name);
          addEventListener(window.document, evt, sendMouse);
        }
        addMouseListener("mouseenter", "Mouse Enter");
        addMouseListener("mouseleave", "Mouse Leave");
      }
      function setupPublicMethods() {
        log("Enable public methods");
        win.parentIFrame = {
          autoResize: function autoResizeF(resize) {
            if (true === resize && false === autoResize) {
              autoResize = true;
              startEventListeners();
            } else if (false === resize && true === autoResize) {
              autoResize = false;
              stopEventListeners();
            }
            sendMsg(0, 0, "autoResize", JSON.stringify(autoResize));
            return autoResize;
          },
          close: function closeF() {
            sendMsg(0, 0, "close");
          },
          getId: function getIdF() {
            return myID;
          },
          getPageInfo: function getPageInfoF(callback) {
            if ("function" === typeof callback) {
              onPageInfo = callback;
              sendMsg(0, 0, "pageInfo");
            } else {
              onPageInfo = function() {
              };
              sendMsg(0, 0, "pageInfoStop");
            }
          },
          moveToAnchor: function moveToAnchorF(hash) {
            inPageLinks.findTarget(hash);
          },
          reset: function resetF() {
            resetIFrame("parentIFrame.reset");
          },
          scrollTo: function scrollToF(x, y) {
            sendMsg(y, x, "scrollTo");
          },
          scrollToOffset: function scrollToF(x, y) {
            sendMsg(y, x, "scrollToOffset");
          },
          sendMessage: function sendMessageF(msg, targetOrigin) {
            sendMsg(0, 0, "message", JSON.stringify(msg), targetOrigin);
          },
          setHeightCalculationMethod: function setHeightCalculationMethodF(heightCalculationMethod) {
            heightCalcMode = heightCalculationMethod;
            checkHeightMode();
          },
          setWidthCalculationMethod: function setWidthCalculationMethodF(widthCalculationMethod) {
            widthCalcMode = widthCalculationMethod;
            checkWidthMode();
          },
          setTargetOrigin: function setTargetOriginF(targetOrigin) {
            log("Set targetOrigin: " + targetOrigin);
            targetOriginDefault = targetOrigin;
          },
          size: function sizeF(customHeight, customWidth) {
            var valString = "" + (customHeight || "") + (customWidth ? "," + customWidth : "");
            sendSize(
              "size",
              "parentIFrame.size(" + valString + ")",
              customHeight,
              customWidth
            );
          }
        };
      }
      function initInterval() {
        if (0 !== interval) {
          log("setInterval: " + interval + "ms");
          intervalTimer = setInterval(function() {
            sendSize("interval", "setInterval: " + interval);
          }, Math.abs(interval));
        }
      }
      function setupBodyMutationObserver() {
        function addImageLoadListners(mutation) {
          function addImageLoadListener(element) {
            if (false === element.complete) {
              log("Attach listeners to " + element.src);
              element.addEventListener("load", imageLoaded, false);
              element.addEventListener("error", imageError, false);
              elements.push(element);
            }
          }
          if (mutation.type === "attributes" && mutation.attributeName === "src") {
            addImageLoadListener(mutation.target);
          } else if (mutation.type === "childList") {
            Array.prototype.forEach.call(
              mutation.target.querySelectorAll("img"),
              addImageLoadListener
            );
          }
        }
        function removeFromArray(element) {
          elements.splice(elements.indexOf(element), 1);
        }
        function removeImageLoadListener(element) {
          log("Remove listeners from " + element.src);
          element.removeEventListener("load", imageLoaded, false);
          element.removeEventListener("error", imageError, false);
          removeFromArray(element);
        }
        function imageEventTriggered(event, type, typeDesc) {
          removeImageLoadListener(event.target);
          sendSize(type, typeDesc + ": " + event.target.src);
        }
        function imageLoaded(event) {
          imageEventTriggered(event, "imageLoad", "Image loaded");
        }
        function imageError(event) {
          imageEventTriggered(event, "imageLoadFailed", "Image load failed");
        }
        function mutationObserved(mutations) {
          sendSize(
            "mutationObserver",
            "mutationObserver: " + mutations[0].target + " " + mutations[0].type
          );
          mutations.forEach(addImageLoadListners);
        }
        function createMutationObserver() {
          var target2 = document.querySelector("body"), config = {
            attributes: true,
            attributeOldValue: false,
            characterData: true,
            characterDataOldValue: false,
            childList: true,
            subtree: true
          };
          observer = new MutationObserver(mutationObserved);
          log("Create body MutationObserver");
          observer.observe(target2, config);
          return observer;
        }
        var elements = [], MutationObserver = window.MutationObserver || window.WebKitMutationObserver, observer = createMutationObserver();
        return {
          disconnect: function() {
            if ("disconnect" in observer) {
              log("Disconnect body MutationObserver");
              observer.disconnect();
              elements.forEach(removeImageLoadListener);
            }
          }
        };
      }
      function setupMutationObserver() {
        var forceIntervalTimer = 0 > interval;
        if (window.MutationObserver || window.WebKitMutationObserver) {
          if (forceIntervalTimer) {
            initInterval();
          } else {
            bodyObserver = setupBodyMutationObserver();
          }
        } else {
          log("MutationObserver not supported in this browser!");
          initInterval();
        }
      }
      function getComputedStyle2(prop, el) {
        var retVal = 0;
        el = el || document.body;
        retVal = document.defaultView.getComputedStyle(el, null);
        retVal = null === retVal ? 0 : retVal[prop];
        return parseInt(retVal, base);
      }
      function chkEventThottle(timer) {
        if (timer > throttledTimer / 2) {
          throttledTimer = 2 * timer;
          log("Event throttle increased to " + throttledTimer + "ms");
        }
      }
      function getMaxElement(side, elements) {
        var elementsLength = elements.length, elVal = 0, maxVal = 0, Side = capitalizeFirstLetter(side), timer = Date.now();
        for (var i = 0; i < elementsLength; i++) {
          elVal = elements[i].getBoundingClientRect()[side] + getComputedStyle2("margin" + Side, elements[i]);
          if (elVal > maxVal) {
            maxVal = elVal;
          }
        }
        timer = Date.now() - timer;
        log("Parsed " + elementsLength + " HTML elements");
        log("Element position calculated in " + timer + "ms");
        chkEventThottle(timer);
        return maxVal;
      }
      function getAllMeasurements(dimensions) {
        return [
          dimensions.bodyOffset(),
          dimensions.bodyScroll(),
          dimensions.documentElementOffset(),
          dimensions.documentElementScroll()
        ];
      }
      function getTaggedElements(side, tag) {
        function noTaggedElementsFound() {
          warn("No tagged elements (" + tag + ") found on page");
          return document.querySelectorAll("body *");
        }
        var elements = document.querySelectorAll("[" + tag + "]");
        if (elements.length === 0)
          noTaggedElementsFound();
        return getMaxElement(side, elements);
      }
      function getAllElements() {
        return document.querySelectorAll("body *");
      }
      var getHeight = {
        bodyOffset: function getBodyOffsetHeight() {
          return document.body.offsetHeight + getComputedStyle2("marginTop") + getComputedStyle2("marginBottom");
        },
        offset: function() {
          return getHeight.bodyOffset();
        },
        bodyScroll: function getBodyScrollHeight() {
          return document.body.scrollHeight;
        },
        custom: function getCustomWidth() {
          return customCalcMethods.height();
        },
        documentElementOffset: function getDEOffsetHeight() {
          return document.documentElement.offsetHeight;
        },
        documentElementScroll: function getDEScrollHeight() {
          return document.documentElement.scrollHeight;
        },
        max: function getMaxHeight() {
          return Math.max.apply(null, getAllMeasurements(getHeight));
        },
        min: function getMinHeight() {
          return Math.min.apply(null, getAllMeasurements(getHeight));
        },
        grow: function growHeight() {
          return getHeight.max();
        },
        lowestElement: function getBestHeight() {
          return Math.max(
            getHeight.bodyOffset() || getHeight.documentElementOffset(),
            getMaxElement("bottom", getAllElements())
          );
        },
        taggedElement: function getTaggedElementsHeight() {
          return getTaggedElements("bottom", "data-iframe-height");
        }
      }, getWidth = {
        bodyScroll: function getBodyScrollWidth() {
          return document.body.scrollWidth;
        },
        bodyOffset: function getBodyOffsetWidth() {
          return document.body.offsetWidth;
        },
        custom: function getCustomWidth() {
          return customCalcMethods.width();
        },
        documentElementScroll: function getDEScrollWidth() {
          return document.documentElement.scrollWidth;
        },
        documentElementOffset: function getDEOffsetWidth() {
          return document.documentElement.offsetWidth;
        },
        scroll: function getMaxWidth() {
          return Math.max(getWidth.bodyScroll(), getWidth.documentElementScroll());
        },
        max: function getMaxWidth() {
          return Math.max.apply(null, getAllMeasurements(getWidth));
        },
        min: function getMinWidth() {
          return Math.min.apply(null, getAllMeasurements(getWidth));
        },
        rightMostElement: function rightMostElement() {
          return getMaxElement("right", getAllElements());
        },
        taggedElement: function getTaggedElementsWidth() {
          return getTaggedElements("right", "data-iframe-width");
        }
      };
      function sizeIFrame(triggerEvent, triggerEventDesc, customHeight, customWidth) {
        function resizeIFrame() {
          height = currentHeight;
          width = currentWidth;
          sendMsg(height, width, triggerEvent);
        }
        function isSizeChangeDetected() {
          function checkTolarance(a, b) {
            var retVal = Math.abs(a - b) <= tolerance;
            return !retVal;
          }
          currentHeight = undefined === customHeight ? getHeight[heightCalcMode]() : customHeight;
          currentWidth = undefined === customWidth ? getWidth[widthCalcMode]() : customWidth;
          return checkTolarance(height, currentHeight) || calculateWidth && checkTolarance(width, currentWidth);
        }
        function isForceResizableEvent() {
          return !(triggerEvent in { init: 1, interval: 1, size: 1 });
        }
        function isForceResizableCalcMode() {
          return heightCalcMode in resetRequiredMethods || calculateWidth && widthCalcMode in resetRequiredMethods;
        }
        function logIgnored() {
          log("No change in size detected");
        }
        function checkDownSizing() {
          if (isForceResizableEvent() && isForceResizableCalcMode()) {
            resetIFrame(triggerEventDesc);
          } else if (!(triggerEvent in { interval: 1 })) {
            logIgnored();
          }
        }
        var currentHeight, currentWidth;
        if (isSizeChangeDetected() || "init" === triggerEvent) {
          lockTrigger();
          resizeIFrame();
        } else {
          checkDownSizing();
        }
      }
      var sizeIFrameThrottled = throttle(sizeIFrame);
      function sendSize(triggerEvent, triggerEventDesc, customHeight, customWidth) {
        function recordTrigger() {
          if (!(triggerEvent in { reset: 1, resetPage: 1, init: 1 })) {
            log("Trigger event: " + triggerEventDesc);
          }
        }
        function isDoubleFiredEvent() {
          return triggerLocked && triggerEvent in doubleEventList;
        }
        if (isDoubleFiredEvent()) {
          log("Trigger event cancelled: " + triggerEvent);
        } else {
          recordTrigger();
          if (triggerEvent === "init") {
            sizeIFrame(triggerEvent, triggerEventDesc, customHeight, customWidth);
          } else {
            sizeIFrameThrottled(
              triggerEvent,
              triggerEventDesc,
              customHeight,
              customWidth
            );
          }
        }
      }
      function lockTrigger() {
        if (!triggerLocked) {
          triggerLocked = true;
          log("Trigger event lock on");
        }
        clearTimeout(triggerLockedTimer);
        triggerLockedTimer = setTimeout(function() {
          triggerLocked = false;
          log("Trigger event lock off");
          log("--");
        }, eventCancelTimer);
      }
      function triggerReset(triggerEvent) {
        height = getHeight[heightCalcMode]();
        width = getWidth[widthCalcMode]();
        sendMsg(height, width, triggerEvent);
      }
      function resetIFrame(triggerEventDesc) {
        var hcm = heightCalcMode;
        heightCalcMode = heightCalcModeDefault;
        log("Reset trigger event: " + triggerEventDesc);
        lockTrigger();
        triggerReset("reset");
        heightCalcMode = hcm;
      }
      function sendMsg(height2, width2, triggerEvent, msg, targetOrigin) {
        function setTargetOrigin() {
          if (undefined === targetOrigin) {
            targetOrigin = targetOriginDefault;
          } else {
            log("Message targetOrigin: " + targetOrigin);
          }
        }
        function sendToParent() {
          var size = height2 + ":" + width2, message = myID + ":" + size + ":" + triggerEvent + (undefined === msg ? "" : ":" + msg);
          log("Sending message to host page (" + message + ")");
          target.postMessage(msgID + message, targetOrigin);
        }
        if (true === sendPermit) {
          setTargetOrigin();
          sendToParent();
        }
      }
      function receiver(event) {
        var processRequestFromParent = {
          init: function initFromParent() {
            initMsg = event.data;
            target = event.source;
            init();
            firstRun = false;
            setTimeout(function() {
              initLock = false;
            }, eventCancelTimer);
          },
          reset: function resetFromParent() {
            if (initLock) {
              log("Page reset ignored by init");
            } else {
              log("Page size reset by host page");
              triggerReset("resetPage");
            }
          },
          resize: function resizeFromParent() {
            sendSize("resizeParent", "Parent window requested size check");
          },
          moveToAnchor: function moveToAnchorF() {
            inPageLinks.findTarget(getData());
          },
          inPageLink: function inPageLinkF() {
            this.moveToAnchor();
          },
          // Backward compatibility
          pageInfo: function pageInfoFromParent() {
            var msgBody = getData();
            log("PageInfoFromParent called from parent: " + msgBody);
            onPageInfo(JSON.parse(msgBody));
            log(" --");
          },
          message: function messageFromParent() {
            var msgBody = getData();
            log("onMessage called from parent: " + msgBody);
            onMessage(JSON.parse(msgBody));
            log(" --");
          }
        };
        function isMessageForUs() {
          return msgID === ("" + event.data).slice(0, msgIdLen);
        }
        function getMessageType() {
          return event.data.split("]")[1].split(":")[0];
        }
        function getData() {
          return event.data.slice(event.data.indexOf(":") + 1);
        }
        function isMiddleTier() {
          return !(typeof module !== "undefined" && module.exports) && "iFrameResize" in window || window.jQuery !== undefined && "iFrameResize" in window.jQuery.prototype;
        }
        function isInitMsg() {
          return event.data.split(":")[2] in { true: 1, false: 1 };
        }
        function callFromParent() {
          var messageType = getMessageType();
          if (messageType in processRequestFromParent) {
            processRequestFromParent[messageType]();
          } else if (!isMiddleTier() && !isInitMsg()) {
            warn("Unexpected message (" + event.data + ")");
          }
        }
        function processMessage() {
          if (false === firstRun) {
            callFromParent();
          } else if (isInitMsg()) {
            processRequestFromParent.init();
          } else {
            log(
              'Ignored message of type "' + getMessageType() + '". Received before initialization.'
            );
          }
        }
        if (isMessageForUs()) {
          processMessage();
        }
      }
      function chkLateLoaded() {
        if ("loading" !== document.readyState) {
          window.parent.postMessage("[iFrameResizerChild]Ready", "*");
        }
      }
      addEventListener(window, "message", receiver);
      addEventListener(window, "readystatechange", chkLateLoaded);
      chkLateLoaded();
    })();
  }
});

// ../node_modules/iframe-resizer/index.js
var require_iframe_resizer = __commonJS({
  "../node_modules/iframe-resizer/index.js"(exports, module) {
    var iframeResize = require_iframeResizer();
    module.exports = {
      iframeResize,
      iframeResizer: iframeResize,
      // Backwards compatibility
      contentWindow: require_iframeResizer_contentWindow()
    };
  }
});
export default require_iframe_resizer();
//# sourceMappingURL=iframe-resizer.js.map
