{
  "version": 3,
  "sources": ["../../../../node_modules/tabbable/src/index.js", "../../../../node_modules/focus-trap/index.js", "../../../../node_modules/focus-trap-react/dist/focus-trap-react.js"],
  "sourcesContent": ["// NOTE: separate `:not()` selectors has broader browser support than the newer\n//  `:not([inert], [inert] *)` (Feb 2023)\n// CAREFUL: JSDom does not support `:not([inert] *)` as a selector; using it causes\n//  the entire query to fail, resulting in no nodes found, which will break a lot\n//  of things... so we have to rely on JS to identify nodes inside an inert container\nconst candidateSelectors = [\n  'input:not([inert])',\n  'select:not([inert])',\n  'textarea:not([inert])',\n  'a[href]:not([inert])',\n  'button:not([inert])',\n  '[tabindex]:not(slot):not([inert])',\n  'audio[controls]:not([inert])',\n  'video[controls]:not([inert])',\n  '[contenteditable]:not([contenteditable=\"false\"]):not([inert])',\n  'details>summary:first-of-type:not([inert])',\n  'details:not([inert])',\n];\nconst candidateSelector = /* #__PURE__ */ candidateSelectors.join(',');\n\nconst NoElement = typeof Element === 'undefined';\n\nconst matches = NoElement\n  ? function () {}\n  : Element.prototype.matches ||\n    Element.prototype.msMatchesSelector ||\n    Element.prototype.webkitMatchesSelector;\n\nconst getRootNode =\n  !NoElement && Element.prototype.getRootNode\n    ? (element) => element?.getRootNode?.()\n    : (element) => element?.ownerDocument;\n\n/**\n * Determines if a node is inert or in an inert ancestor.\n * @param {Element} [node]\n * @param {boolean} [lookUp] If true and `node` is not inert, looks up at ancestors to\n *  see if any of them are inert. If false, only `node` itself is considered.\n * @returns {boolean} True if inert itself or by way of being in an inert ancestor.\n *  False if `node` is falsy.\n */\nconst isInert = function (node, lookUp = true) {\n  // CAREFUL: JSDom does not support inert at all, so we can't use the `HTMLElement.inert`\n  //  JS API property; we have to check the attribute, which can either be empty or 'true';\n  //  if it's `null` (not specified) or 'false', it's an active element\n  const inertAtt = node?.getAttribute?.('inert');\n  const inert = inertAtt === '' || inertAtt === 'true';\n\n  // NOTE: this could also be handled with `node.matches('[inert], :is([inert] *)')`\n  //  if it weren't for `matches()` not being a function on shadow roots; the following\n  //  code works for any kind of node\n  // CAREFUL: JSDom does not appear to support certain selectors like `:not([inert] *)`\n  //  so it likely would not support `:is([inert] *)` either...\n  const result = inert || (lookUp && node && isInert(node.parentNode)); // recursive\n\n  return result;\n};\n\n/**\n * Determines if a node's content is editable.\n * @param {Element} [node]\n * @returns True if it's content-editable; false if it's not or `node` is falsy.\n */\nconst isContentEditable = function (node) {\n  // CAREFUL: JSDom does not support the `HTMLElement.isContentEditable` API so we have\n  //  to use the attribute directly to check for this, which can either be empty or 'true';\n  //  if it's `null` (not specified) or 'false', it's a non-editable element\n  const attValue = node?.getAttribute?.('contenteditable');\n  return attValue === '' || attValue === 'true';\n};\n\n/**\n * @param {Element} el container to check in\n * @param {boolean} includeContainer add container to check\n * @param {(node: Element) => boolean} filter filter candidates\n * @returns {Element[]}\n */\nconst getCandidates = function (el, includeContainer, filter) {\n  // even if `includeContainer=false`, we still have to check it for inertness because\n  //  if it's inert, all its children are inert\n  if (isInert(el)) {\n    return [];\n  }\n\n  let candidates = Array.prototype.slice.apply(\n    el.querySelectorAll(candidateSelector)\n  );\n  if (includeContainer && matches.call(el, candidateSelector)) {\n    candidates.unshift(el);\n  }\n  candidates = candidates.filter(filter);\n  return candidates;\n};\n\n/**\n * @callback GetShadowRoot\n * @param {Element} element to check for shadow root\n * @returns {ShadowRoot|boolean} ShadowRoot if available or boolean indicating if a shadowRoot is attached but not available.\n */\n\n/**\n * @callback ShadowRootFilter\n * @param {Element} shadowHostNode the element which contains shadow content\n * @returns {boolean} true if a shadow root could potentially contain valid candidates.\n */\n\n/**\n * @typedef {Object} CandidateScope\n * @property {Element} scopeParent contains inner candidates\n * @property {Element[]} candidates list of candidates found in the scope parent\n */\n\n/**\n * @typedef {Object} IterativeOptions\n * @property {GetShadowRoot|boolean} getShadowRoot true if shadow support is enabled; falsy if not;\n *  if a function, implies shadow support is enabled and either returns the shadow root of an element\n *  or a boolean stating if it has an undisclosed shadow root\n * @property {(node: Element) => boolean} filter filter candidates\n * @property {boolean} flatten if true then result will flatten any CandidateScope into the returned list\n * @property {ShadowRootFilter} shadowRootFilter filter shadow roots;\n */\n\n/**\n * @param {Element[]} elements list of element containers to match candidates from\n * @param {boolean} includeContainer add container list to check\n * @param {IterativeOptions} options\n * @returns {Array.<Element|CandidateScope>}\n */\nconst getCandidatesIteratively = function (\n  elements,\n  includeContainer,\n  options\n) {\n  const candidates = [];\n  const elementsToCheck = Array.from(elements);\n  while (elementsToCheck.length) {\n    const element = elementsToCheck.shift();\n    if (isInert(element, false)) {\n      // no need to look up since we're drilling down\n      // anything inside this container will also be inert\n      continue;\n    }\n\n    if (element.tagName === 'SLOT') {\n      // add shadow dom slot scope (slot itself cannot be focusable)\n      const assigned = element.assignedElements();\n      const content = assigned.length ? assigned : element.children;\n      const nestedCandidates = getCandidatesIteratively(content, true, options);\n      if (options.flatten) {\n        candidates.push(...nestedCandidates);\n      } else {\n        candidates.push({\n          scopeParent: element,\n          candidates: nestedCandidates,\n        });\n      }\n    } else {\n      // check candidate element\n      const validCandidate = matches.call(element, candidateSelector);\n      if (\n        validCandidate &&\n        options.filter(element) &&\n        (includeContainer || !elements.includes(element))\n      ) {\n        candidates.push(element);\n      }\n\n      // iterate over shadow content if possible\n      const shadowRoot =\n        element.shadowRoot ||\n        // check for an undisclosed shadow\n        (typeof options.getShadowRoot === 'function' &&\n          options.getShadowRoot(element));\n\n      // no inert look up because we're already drilling down and checking for inertness\n      //  on the way down, so all containers to this root node should have already been\n      //  vetted as non-inert\n      const validShadowRoot =\n        !isInert(shadowRoot, false) &&\n        (!options.shadowRootFilter || options.shadowRootFilter(element));\n\n      if (shadowRoot && validShadowRoot) {\n        // add shadow dom scope IIF a shadow root node was given; otherwise, an undisclosed\n        //  shadow exists, so look at light dom children as fallback BUT create a scope for any\n        //  child candidates found because they're likely slotted elements (elements that are\n        //  children of the web component element (which has the shadow), in the light dom, but\n        //  slotted somewhere _inside_ the undisclosed shadow) -- the scope is created below,\n        //  _after_ we return from this recursive call\n        const nestedCandidates = getCandidatesIteratively(\n          shadowRoot === true ? element.children : shadowRoot.children,\n          true,\n          options\n        );\n\n        if (options.flatten) {\n          candidates.push(...nestedCandidates);\n        } else {\n          candidates.push({\n            scopeParent: element,\n            candidates: nestedCandidates,\n          });\n        }\n      } else {\n        // there's not shadow so just dig into the element's (light dom) children\n        //  __without__ giving the element special scope treatment\n        elementsToCheck.unshift(...element.children);\n      }\n    }\n  }\n  return candidates;\n};\n\n/**\n * @private\n * Determines if the node has an explicitly specified `tabindex` attribute.\n * @param {HTMLElement} node\n * @returns {boolean} True if so; false if not.\n */\nconst hasTabIndex = function (node) {\n  return !isNaN(parseInt(node.getAttribute('tabindex'), 10));\n};\n\n/**\n * Determine the tab index of a given node.\n * @param {HTMLElement} node\n * @returns {number} Tab order (negative, 0, or positive number).\n * @throws {Error} If `node` is falsy.\n */\nconst getTabIndex = function (node) {\n  if (!node) {\n    throw new Error('No node provided');\n  }\n\n  if (node.tabIndex < 0) {\n    // in Chrome, <details/>, <audio controls/> and <video controls/> elements get a default\n    // `tabIndex` of -1 when the 'tabindex' attribute isn't specified in the DOM,\n    // yet they are still part of the regular tab order; in FF, they get a default\n    // `tabIndex` of 0; since Chrome still puts those elements in the regular tab\n    // order, consider their tab index to be 0.\n    // Also browsers do not return `tabIndex` correctly for contentEditable nodes;\n    // so if they don't have a tabindex attribute specifically set, assume it's 0.\n    if (\n      (/^(AUDIO|VIDEO|DETAILS)$/.test(node.tagName) ||\n        isContentEditable(node)) &&\n      !hasTabIndex(node)\n    ) {\n      return 0;\n    }\n  }\n\n  return node.tabIndex;\n};\n\n/**\n * Determine the tab index of a given node __for sort order purposes__.\n * @param {HTMLElement} node\n * @param {boolean} [isScope] True for a custom element with shadow root or slot that, by default,\n *  has tabIndex -1, but needs to be sorted by document order in order for its content to be\n *  inserted into the correct sort position.\n * @returns {number} Tab order (negative, 0, or positive number).\n */\nconst getSortOrderTabIndex = function (node, isScope) {\n  const tabIndex = getTabIndex(node);\n\n  if (tabIndex < 0 && isScope && !hasTabIndex(node)) {\n    return 0;\n  }\n\n  return tabIndex;\n};\n\nconst sortOrderedTabbables = function (a, b) {\n  return a.tabIndex === b.tabIndex\n    ? a.documentOrder - b.documentOrder\n    : a.tabIndex - b.tabIndex;\n};\n\nconst isInput = function (node) {\n  return node.tagName === 'INPUT';\n};\n\nconst isHiddenInput = function (node) {\n  return isInput(node) && node.type === 'hidden';\n};\n\nconst isDetailsWithSummary = function (node) {\n  const r =\n    node.tagName === 'DETAILS' &&\n    Array.prototype.slice\n      .apply(node.children)\n      .some((child) => child.tagName === 'SUMMARY');\n  return r;\n};\n\nconst getCheckedRadio = function (nodes, form) {\n  for (let i = 0; i < nodes.length; i++) {\n    if (nodes[i].checked && nodes[i].form === form) {\n      return nodes[i];\n    }\n  }\n};\n\nconst isTabbableRadio = function (node) {\n  if (!node.name) {\n    return true;\n  }\n  const radioScope = node.form || getRootNode(node);\n  const queryRadios = function (name) {\n    return radioScope.querySelectorAll(\n      'input[type=\"radio\"][name=\"' + name + '\"]'\n    );\n  };\n\n  let radioSet;\n  if (\n    typeof window !== 'undefined' &&\n    typeof window.CSS !== 'undefined' &&\n    typeof window.CSS.escape === 'function'\n  ) {\n    radioSet = queryRadios(window.CSS.escape(node.name));\n  } else {\n    try {\n      radioSet = queryRadios(node.name);\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(\n        'Looks like you have a radio button with a name attribute containing invalid CSS selector characters and need the CSS.escape polyfill: %s',\n        err.message\n      );\n      return false;\n    }\n  }\n\n  const checked = getCheckedRadio(radioSet, node.form);\n  return !checked || checked === node;\n};\n\nconst isRadio = function (node) {\n  return isInput(node) && node.type === 'radio';\n};\n\nconst isNonTabbableRadio = function (node) {\n  return isRadio(node) && !isTabbableRadio(node);\n};\n\n// determines if a node is ultimately attached to the window's document\nconst isNodeAttached = function (node) {\n  // The root node is the shadow root if the node is in a shadow DOM; some document otherwise\n  //  (but NOT _the_ document; see second 'If' comment below for more).\n  // If rootNode is shadow root, it'll have a host, which is the element to which the shadow\n  //  is attached, and the one we need to check if it's in the document or not (because the\n  //  shadow, and all nodes it contains, is never considered in the document since shadows\n  //  behave like self-contained DOMs; but if the shadow's HOST, which is part of the document,\n  //  is hidden, or is not in the document itself but is detached, it will affect the shadow's\n  //  visibility, including all the nodes it contains). The host could be any normal node,\n  //  or a custom element (i.e. web component). Either way, that's the one that is considered\n  //  part of the document, not the shadow root, nor any of its children (i.e. the node being\n  //  tested).\n  // To further complicate things, we have to look all the way up until we find a shadow HOST\n  //  that is attached (or find none) because the node might be in nested shadows...\n  // If rootNode is not a shadow root, it won't have a host, and so rootNode should be the\n  //  document (per the docs) and while it's a Document-type object, that document does not\n  //  appear to be the same as the node's `ownerDocument` for some reason, so it's safer\n  //  to ignore the rootNode at this point, and use `node.ownerDocument`. Otherwise,\n  //  using `rootNode.contains(node)` will _always_ be true we'll get false-positives when\n  //  node is actually detached.\n  // NOTE: If `nodeRootHost` or `node` happens to be the `document` itself (which is possible\n  //  if a tabbable/focusable node was quickly added to the DOM, focused, and then removed\n  //  from the DOM as in https://github.com/focus-trap/focus-trap-react/issues/905), then\n  //  `ownerDocument` will be `null`, hence the optional chaining on it.\n  let nodeRoot = node && getRootNode(node);\n  let nodeRootHost = nodeRoot?.host;\n\n  // in some cases, a detached node will return itself as the root instead of a document or\n  //  shadow root object, in which case, we shouldn't try to look further up the host chain\n  let attached = false;\n  if (nodeRoot && nodeRoot !== node) {\n    attached = !!(\n      nodeRootHost?.ownerDocument?.contains(nodeRootHost) ||\n      node?.ownerDocument?.contains(node)\n    );\n\n    while (!attached && nodeRootHost) {\n      // since it's not attached and we have a root host, the node MUST be in a nested shadow DOM,\n      //  which means we need to get the host's host and check if that parent host is contained\n      //  in (i.e. attached to) the document\n      nodeRoot = getRootNode(nodeRootHost);\n      nodeRootHost = nodeRoot?.host;\n      attached = !!nodeRootHost?.ownerDocument?.contains(nodeRootHost);\n    }\n  }\n\n  return attached;\n};\n\nconst isZeroArea = function (node) {\n  const { width, height } = node.getBoundingClientRect();\n  return width === 0 && height === 0;\n};\nconst isHidden = function (node, { displayCheck, getShadowRoot }) {\n  // NOTE: visibility will be `undefined` if node is detached from the document\n  //  (see notes about this further down), which means we will consider it visible\n  //  (this is legacy behavior from a very long way back)\n  // NOTE: we check this regardless of `displayCheck=\"none\"` because this is a\n  //  _visibility_ check, not a _display_ check\n  if (getComputedStyle(node).visibility === 'hidden') {\n    return true;\n  }\n\n  const isDirectSummary = matches.call(node, 'details>summary:first-of-type');\n  const nodeUnderDetails = isDirectSummary ? node.parentElement : node;\n  if (matches.call(nodeUnderDetails, 'details:not([open]) *')) {\n    return true;\n  }\n\n  if (\n    !displayCheck ||\n    displayCheck === 'full' ||\n    displayCheck === 'legacy-full'\n  ) {\n    if (typeof getShadowRoot === 'function') {\n      // figure out if we should consider the node to be in an undisclosed shadow and use the\n      //  'non-zero-area' fallback\n      const originalNode = node;\n      while (node) {\n        const parentElement = node.parentElement;\n        const rootNode = getRootNode(node);\n        if (\n          parentElement &&\n          !parentElement.shadowRoot &&\n          getShadowRoot(parentElement) === true // check if there's an undisclosed shadow\n        ) {\n          // node has an undisclosed shadow which means we can only treat it as a black box, so we\n          //  fall back to a non-zero-area test\n          return isZeroArea(node);\n        } else if (node.assignedSlot) {\n          // iterate up slot\n          node = node.assignedSlot;\n        } else if (!parentElement && rootNode !== node.ownerDocument) {\n          // cross shadow boundary\n          node = rootNode.host;\n        } else {\n          // iterate up normal dom\n          node = parentElement;\n        }\n      }\n\n      node = originalNode;\n    }\n    // else, `getShadowRoot` might be true, but all that does is enable shadow DOM support\n    //  (i.e. it does not also presume that all nodes might have undisclosed shadows); or\n    //  it might be a falsy value, which means shadow DOM support is disabled\n\n    // Since we didn't find it sitting in an undisclosed shadow (or shadows are disabled)\n    //  now we can just test to see if it would normally be visible or not, provided it's\n    //  attached to the main document.\n    // NOTE: We must consider case where node is inside a shadow DOM and given directly to\n    //  `isTabbable()` or `isFocusable()` -- regardless of `getShadowRoot` option setting.\n\n    if (isNodeAttached(node)) {\n      // this works wherever the node is: if there's at least one client rect, it's\n      //  somehow displayed; it also covers the CSS 'display: contents' case where the\n      //  node itself is hidden in place of its contents; and there's no need to search\n      //  up the hierarchy either\n      return !node.getClientRects().length;\n    }\n\n    // Else, the node isn't attached to the document, which means the `getClientRects()`\n    //  API will __always__ return zero rects (this can happen, for example, if React\n    //  is used to render nodes onto a detached tree, as confirmed in this thread:\n    //  https://github.com/facebook/react/issues/9117#issuecomment-284228870)\n    //\n    // It also means that even window.getComputedStyle(node).display will return `undefined`\n    //  because styles are only computed for nodes that are in the document.\n    //\n    // NOTE: THIS HAS BEEN THE CASE FOR YEARS. It is not new, nor is it caused by tabbable\n    //  somehow. Though it was never stated officially, anyone who has ever used tabbable\n    //  APIs on nodes in detached containers has actually implicitly used tabbable in what\n    //  was later (as of v5.2.0 on Apr 9, 2021) called `displayCheck=\"none\"` mode -- essentially\n    //  considering __everything__ to be visible because of the innability to determine styles.\n    //\n    // v6.0.0: As of this major release, the default 'full' option __no longer treats detached\n    //  nodes as visible with the 'none' fallback.__\n    if (displayCheck !== 'legacy-full') {\n      return true; // hidden\n    }\n    // else, fallback to 'none' mode and consider the node visible\n  } else if (displayCheck === 'non-zero-area') {\n    // NOTE: Even though this tests that the node's client rect is non-zero to determine\n    //  whether it's displayed, and that a detached node will __always__ have a zero-area\n    //  client rect, we don't special-case for whether the node is attached or not. In\n    //  this mode, we do want to consider nodes that have a zero area to be hidden at all\n    //  times, and that includes attached or not.\n    return isZeroArea(node);\n  }\n\n  // visible, as far as we can tell, or per current `displayCheck=none` mode, we assume\n  //  it's visible\n  return false;\n};\n\n// form fields (nested) inside a disabled fieldset are not focusable/tabbable\n//  unless they are in the _first_ <legend> element of the top-most disabled\n//  fieldset\nconst isDisabledFromFieldset = function (node) {\n  if (/^(INPUT|BUTTON|SELECT|TEXTAREA)$/.test(node.tagName)) {\n    let parentNode = node.parentElement;\n    // check if `node` is contained in a disabled <fieldset>\n    while (parentNode) {\n      if (parentNode.tagName === 'FIELDSET' && parentNode.disabled) {\n        // look for the first <legend> among the children of the disabled <fieldset>\n        for (let i = 0; i < parentNode.children.length; i++) {\n          const child = parentNode.children.item(i);\n          // when the first <legend> (in document order) is found\n          if (child.tagName === 'LEGEND') {\n            // if its parent <fieldset> is not nested in another disabled <fieldset>,\n            // return whether `node` is a descendant of its first <legend>\n            return matches.call(parentNode, 'fieldset[disabled] *')\n              ? true\n              : !child.contains(node);\n          }\n        }\n        // the disabled <fieldset> containing `node` has no <legend>\n        return true;\n      }\n      parentNode = parentNode.parentElement;\n    }\n  }\n\n  // else, node's tabbable/focusable state should not be affected by a fieldset's\n  //  enabled/disabled state\n  return false;\n};\n\nconst isNodeMatchingSelectorFocusable = function (options, node) {\n  if (\n    node.disabled ||\n    // we must do an inert look up to filter out any elements inside an inert ancestor\n    //  because we're limited in the type of selectors we can use in JSDom (see related\n    //  note related to `candidateSelectors`)\n    isInert(node) ||\n    isHiddenInput(node) ||\n    isHidden(node, options) ||\n    // For a details element with a summary, the summary element gets the focus\n    isDetailsWithSummary(node) ||\n    isDisabledFromFieldset(node)\n  ) {\n    return false;\n  }\n  return true;\n};\n\nconst isNodeMatchingSelectorTabbable = function (options, node) {\n  if (\n    isNonTabbableRadio(node) ||\n    getTabIndex(node) < 0 ||\n    !isNodeMatchingSelectorFocusable(options, node)\n  ) {\n    return false;\n  }\n  return true;\n};\n\nconst isValidShadowRootTabbable = function (shadowHostNode) {\n  const tabIndex = parseInt(shadowHostNode.getAttribute('tabindex'), 10);\n  if (isNaN(tabIndex) || tabIndex >= 0) {\n    return true;\n  }\n  // If a custom element has an explicit negative tabindex,\n  // browsers will not allow tab targeting said element's children.\n  return false;\n};\n\n/**\n * @param {Array.<Element|CandidateScope>} candidates\n * @returns Element[]\n */\nconst sortByOrder = function (candidates) {\n  const regularTabbables = [];\n  const orderedTabbables = [];\n  candidates.forEach(function (item, i) {\n    const isScope = !!item.scopeParent;\n    const element = isScope ? item.scopeParent : item;\n    const candidateTabindex = getSortOrderTabIndex(element, isScope);\n    const elements = isScope ? sortByOrder(item.candidates) : element;\n    if (candidateTabindex === 0) {\n      isScope\n        ? regularTabbables.push(...elements)\n        : regularTabbables.push(element);\n    } else {\n      orderedTabbables.push({\n        documentOrder: i,\n        tabIndex: candidateTabindex,\n        item: item,\n        isScope: isScope,\n        content: elements,\n      });\n    }\n  });\n\n  return orderedTabbables\n    .sort(sortOrderedTabbables)\n    .reduce((acc, sortable) => {\n      sortable.isScope\n        ? acc.push(...sortable.content)\n        : acc.push(sortable.content);\n      return acc;\n    }, [])\n    .concat(regularTabbables);\n};\n\nconst tabbable = function (container, options) {\n  options = options || {};\n\n  let candidates;\n  if (options.getShadowRoot) {\n    candidates = getCandidatesIteratively(\n      [container],\n      options.includeContainer,\n      {\n        filter: isNodeMatchingSelectorTabbable.bind(null, options),\n        flatten: false,\n        getShadowRoot: options.getShadowRoot,\n        shadowRootFilter: isValidShadowRootTabbable,\n      }\n    );\n  } else {\n    candidates = getCandidates(\n      container,\n      options.includeContainer,\n      isNodeMatchingSelectorTabbable.bind(null, options)\n    );\n  }\n  return sortByOrder(candidates);\n};\n\nconst focusable = function (container, options) {\n  options = options || {};\n\n  let candidates;\n  if (options.getShadowRoot) {\n    candidates = getCandidatesIteratively(\n      [container],\n      options.includeContainer,\n      {\n        filter: isNodeMatchingSelectorFocusable.bind(null, options),\n        flatten: true,\n        getShadowRoot: options.getShadowRoot,\n      }\n    );\n  } else {\n    candidates = getCandidates(\n      container,\n      options.includeContainer,\n      isNodeMatchingSelectorFocusable.bind(null, options)\n    );\n  }\n\n  return candidates;\n};\n\nconst isTabbable = function (node, options) {\n  options = options || {};\n  if (!node) {\n    throw new Error('No node provided');\n  }\n  if (matches.call(node, candidateSelector) === false) {\n    return false;\n  }\n  return isNodeMatchingSelectorTabbable(options, node);\n};\n\nconst focusableCandidateSelector = /* #__PURE__ */ candidateSelectors\n  .concat('iframe')\n  .join(',');\n\nconst isFocusable = function (node, options) {\n  options = options || {};\n  if (!node) {\n    throw new Error('No node provided');\n  }\n  if (matches.call(node, focusableCandidateSelector) === false) {\n    return false;\n  }\n  return isNodeMatchingSelectorFocusable(options, node);\n};\n\nexport { tabbable, focusable, isTabbable, isFocusable, getTabIndex };\n", "import {\n  tabbable,\n  focusable,\n  isFocusable,\n  isTabbable,\n  getTabIndex,\n} from 'tabbable';\n\nconst activeFocusTraps = {\n  activateTrap(trapStack, trap) {\n    if (trapStack.length > 0) {\n      const activeTrap = trapStack[trapStack.length - 1];\n      if (activeTrap !== trap) {\n        activeTrap.pause();\n      }\n    }\n\n    const trapIndex = trapStack.indexOf(trap);\n    if (trapIndex === -1) {\n      trapStack.push(trap);\n    } else {\n      // move this existing trap to the front of the queue\n      trapStack.splice(trapIndex, 1);\n      trapStack.push(trap);\n    }\n  },\n\n  deactivateTrap(trapStack, trap) {\n    const trapIndex = trapStack.indexOf(trap);\n    if (trapIndex !== -1) {\n      trapStack.splice(trapIndex, 1);\n    }\n\n    if (trapStack.length > 0) {\n      trapStack[trapStack.length - 1].unpause();\n    }\n  },\n};\n\nconst isSelectableInput = function (node) {\n  return (\n    node.tagName &&\n    node.tagName.toLowerCase() === 'input' &&\n    typeof node.select === 'function'\n  );\n};\n\nconst isEscapeEvent = function (e) {\n  return e?.key === 'Escape' || e?.key === 'Esc' || e?.keyCode === 27;\n};\n\nconst isTabEvent = function (e) {\n  return e?.key === 'Tab' || e?.keyCode === 9;\n};\n\n// checks for TAB by default\nconst isKeyForward = function (e) {\n  return isTabEvent(e) && !e.shiftKey;\n};\n\n// checks for SHIFT+TAB by default\nconst isKeyBackward = function (e) {\n  return isTabEvent(e) && e.shiftKey;\n};\n\nconst delay = function (fn) {\n  return setTimeout(fn, 0);\n};\n\n// Array.find/findIndex() are not supported on IE; this replicates enough\n//  of Array.findIndex() for our needs\nconst findIndex = function (arr, fn) {\n  let idx = -1;\n\n  arr.every(function (value, i) {\n    if (fn(value)) {\n      idx = i;\n      return false; // break\n    }\n\n    return true; // next\n  });\n\n  return idx;\n};\n\n/**\n * Get an option's value when it could be a plain value, or a handler that provides\n *  the value.\n * @param {*} value Option's value to check.\n * @param {...*} [params] Any parameters to pass to the handler, if `value` is a function.\n * @returns {*} The `value`, or the handler's returned value.\n */\nconst valueOrHandler = function (value, ...params) {\n  return typeof value === 'function' ? value(...params) : value;\n};\n\nconst getActualTarget = function (event) {\n  // NOTE: If the trap is _inside_ a shadow DOM, event.target will always be the\n  //  shadow host. However, event.target.composedPath() will be an array of\n  //  nodes \"clicked\" from inner-most (the actual element inside the shadow) to\n  //  outer-most (the host HTML document). If we have access to composedPath(),\n  //  then use its first element; otherwise, fall back to event.target (and\n  //  this only works for an _open_ shadow DOM; otherwise,\n  //  composedPath()[0] === event.target always).\n  return event.target.shadowRoot && typeof event.composedPath === 'function'\n    ? event.composedPath()[0]\n    : event.target;\n};\n\n// NOTE: this must be _outside_ `createFocusTrap()` to make sure all traps in this\n//  current instance use the same stack if `userOptions.trapStack` isn't specified\nconst internalTrapStack = [];\n\nconst createFocusTrap = function (elements, userOptions) {\n  // SSR: a live trap shouldn't be created in this type of environment so this\n  //  should be safe code to execute if the `document` option isn't specified\n  const doc = userOptions?.document || document;\n\n  const trapStack = userOptions?.trapStack || internalTrapStack;\n\n  const config = {\n    returnFocusOnDeactivate: true,\n    escapeDeactivates: true,\n    delayInitialFocus: true,\n    isKeyForward,\n    isKeyBackward,\n    ...userOptions,\n  };\n\n  const state = {\n    // containers given to createFocusTrap()\n    // @type {Array<HTMLElement>}\n    containers: [],\n\n    // list of objects identifying tabbable nodes in `containers` in the trap\n    // NOTE: it's possible that a group has no tabbable nodes if nodes get removed while the trap\n    //  is active, but the trap should never get to a state where there isn't at least one group\n    //  with at least one tabbable node in it (that would lead to an error condition that would\n    //  result in an error being thrown)\n    // @type {Array<{\n    //   container: HTMLElement,\n    //   tabbableNodes: Array<HTMLElement>, // empty if none\n    //   focusableNodes: Array<HTMLElement>, // empty if none\n    //   posTabIndexesFound: boolean,\n    //   firstTabbableNode: HTMLElement|undefined,\n    //   lastTabbableNode: HTMLElement|undefined,\n    //   firstDomTabbableNode: HTMLElement|undefined,\n    //   lastDomTabbableNode: HTMLElement|undefined,\n    //   nextTabbableNode: (node: HTMLElement, forward: boolean) => HTMLElement|undefined\n    // }>}\n    containerGroups: [], // same order/length as `containers` list\n\n    // references to objects in `containerGroups`, but only those that actually have\n    //  tabbable nodes in them\n    // NOTE: same order as `containers` and `containerGroups`, but __not necessarily__\n    //  the same length\n    tabbableGroups: [],\n\n    nodeFocusedBeforeActivation: null,\n    mostRecentlyFocusedNode: null,\n    active: false,\n    paused: false,\n\n    // timer ID for when delayInitialFocus is true and initial focus in this trap\n    //  has been delayed during activation\n    delayInitialFocusTimer: undefined,\n\n    // the most recent KeyboardEvent for the configured nav key (typically [SHIFT+]TAB), if any\n    recentNavEvent: undefined,\n  };\n\n  let trap; // eslint-disable-line prefer-const -- some private functions reference it, and its methods reference private functions, so we must declare here and define later\n\n  /**\n   * Gets a configuration option value.\n   * @param {Object|undefined} configOverrideOptions If true, and option is defined in this set,\n   *  value will be taken from this object. Otherwise, value will be taken from base configuration.\n   * @param {string} optionName Name of the option whose value is sought.\n   * @param {string|undefined} [configOptionName] Name of option to use __instead of__ `optionName`\n   *  IIF `configOverrideOptions` is not defined. Otherwise, `optionName` is used.\n   */\n  const getOption = (configOverrideOptions, optionName, configOptionName) => {\n    return configOverrideOptions &&\n      configOverrideOptions[optionName] !== undefined\n      ? configOverrideOptions[optionName]\n      : config[configOptionName || optionName];\n  };\n\n  /**\n   * Finds the index of the container that contains the element.\n   * @param {HTMLElement} element\n   * @param {Event} [event] If available, and `element` isn't directly found in any container,\n   *  the event's composed path is used to see if includes any known trap containers in the\n   *  case where the element is inside a Shadow DOM.\n   * @returns {number} Index of the container in either `state.containers` or\n   *  `state.containerGroups` (the order/length of these lists are the same); -1\n   *  if the element isn't found.\n   */\n  const findContainerIndex = function (element, event) {\n    const composedPath =\n      typeof event?.composedPath === 'function'\n        ? event.composedPath()\n        : undefined;\n    // NOTE: search `containerGroups` because it's possible a group contains no tabbable\n    //  nodes, but still contains focusable nodes (e.g. if they all have `tabindex=-1`)\n    //  and we still need to find the element in there\n    return state.containerGroups.findIndex(\n      ({ container, tabbableNodes }) =>\n        container.contains(element) ||\n        // fall back to explicit tabbable search which will take into consideration any\n        //  web components if the `tabbableOptions.getShadowRoot` option was used for\n        //  the trap, enabling shadow DOM support in tabbable (`Node.contains()` doesn't\n        //  look inside web components even if open)\n        composedPath?.includes(container) ||\n        tabbableNodes.find((node) => node === element)\n    );\n  };\n\n  /**\n   * Gets the node for the given option, which is expected to be an option that\n   *  can be either a DOM node, a string that is a selector to get a node, `false`\n   *  (if a node is explicitly NOT given), or a function that returns any of these\n   *  values.\n   * @param {string} optionName\n   * @returns {undefined | false | HTMLElement | SVGElement} Returns\n   *  `undefined` if the option is not specified; `false` if the option\n   *  resolved to `false` (node explicitly not given); otherwise, the resolved\n   *  DOM node.\n   * @throws {Error} If the option is set, not `false`, and is not, or does not\n   *  resolve to a node.\n   */\n  const getNodeForOption = function (optionName, ...params) {\n    let optionValue = config[optionName];\n\n    if (typeof optionValue === 'function') {\n      optionValue = optionValue(...params);\n    }\n\n    if (optionValue === true) {\n      optionValue = undefined; // use default value\n    }\n\n    if (!optionValue) {\n      if (optionValue === undefined || optionValue === false) {\n        return optionValue;\n      }\n      // else, empty string (invalid), null (invalid), 0 (invalid)\n\n      throw new Error(\n        `\\`${optionName}\\` was specified but was not a node, or did not return a node`\n      );\n    }\n\n    let node = optionValue; // could be HTMLElement, SVGElement, or non-empty string at this point\n\n    if (typeof optionValue === 'string') {\n      node = doc.querySelector(optionValue); // resolve to node, or null if fails\n      if (!node) {\n        throw new Error(\n          `\\`${optionName}\\` as selector refers to no known node`\n        );\n      }\n    }\n\n    return node;\n  };\n\n  const getInitialFocusNode = function () {\n    let node = getNodeForOption('initialFocus');\n\n    // false explicitly indicates we want no initialFocus at all\n    if (node === false) {\n      return false;\n    }\n\n    if (node === undefined || !isFocusable(node, config.tabbableOptions)) {\n      // option not specified nor focusable: use fallback options\n      if (findContainerIndex(doc.activeElement) >= 0) {\n        node = doc.activeElement;\n      } else {\n        const firstTabbableGroup = state.tabbableGroups[0];\n        const firstTabbableNode =\n          firstTabbableGroup && firstTabbableGroup.firstTabbableNode;\n\n        // NOTE: `fallbackFocus` option function cannot return `false` (not supported)\n        node = firstTabbableNode || getNodeForOption('fallbackFocus');\n      }\n    }\n\n    if (!node) {\n      throw new Error(\n        'Your focus-trap needs to have at least one focusable element'\n      );\n    }\n\n    return node;\n  };\n\n  const updateTabbableNodes = function () {\n    state.containerGroups = state.containers.map((container) => {\n      const tabbableNodes = tabbable(container, config.tabbableOptions);\n\n      // NOTE: if we have tabbable nodes, we must have focusable nodes; focusable nodes\n      //  are a superset of tabbable nodes since nodes with negative `tabindex` attributes\n      //  are focusable but not tabbable\n      const focusableNodes = focusable(container, config.tabbableOptions);\n\n      const firstTabbableNode =\n        tabbableNodes.length > 0 ? tabbableNodes[0] : undefined;\n      const lastTabbableNode =\n        tabbableNodes.length > 0\n          ? tabbableNodes[tabbableNodes.length - 1]\n          : undefined;\n\n      const firstDomTabbableNode = focusableNodes.find((node) =>\n        isTabbable(node)\n      );\n      const lastDomTabbableNode = focusableNodes\n        .slice()\n        .reverse()\n        .find((node) => isTabbable(node));\n\n      const posTabIndexesFound = !!tabbableNodes.find(\n        (node) => getTabIndex(node) > 0\n      );\n\n      return {\n        container,\n        tabbableNodes,\n        focusableNodes,\n\n        /** True if at least one node with positive `tabindex` was found in this container. */\n        posTabIndexesFound,\n\n        /** First tabbable node in container, __tabindex__ order; `undefined` if none. */\n        firstTabbableNode,\n        /** Last tabbable node in container, __tabindex__ order; `undefined` if none. */\n        lastTabbableNode,\n\n        // NOTE: DOM order is NOT NECESSARILY \"document position\" order, but figuring that out\n        //  would require more than just https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n        //  because that API doesn't work with Shadow DOM as well as it should (@see\n        //  https://github.com/whatwg/dom/issues/320) and since this first/last is only needed, so far,\n        //  to address an edge case related to positive tabindex support, this seems like a much easier,\n        //  \"close enough most of the time\" alternative for positive tabindexes which should generally\n        //  be avoided anyway...\n        /** First tabbable node in container, __DOM__ order; `undefined` if none. */\n        firstDomTabbableNode,\n        /** Last tabbable node in container, __DOM__ order; `undefined` if none. */\n        lastDomTabbableNode,\n\n        /**\n         * Finds the __tabbable__ node that follows the given node in the specified direction,\n         *  in this container, if any.\n         * @param {HTMLElement} node\n         * @param {boolean} [forward] True if going in forward tab order; false if going\n         *  in reverse.\n         * @returns {HTMLElement|undefined} The next tabbable node, if any.\n         */\n        nextTabbableNode(node, forward = true) {\n          const nodeIdx = tabbableNodes.indexOf(node);\n          if (nodeIdx < 0) {\n            // either not tabbable nor focusable, or was focused but not tabbable (negative tabindex):\n            //  since `node` should at least have been focusable, we assume that's the case and mimic\n            //  what browsers do, which is set focus to the next node in __document position order__,\n            //  regardless of positive tabindexes, if any -- and for reasons explained in the NOTE\n            //  above related to `firstDomTabbable` and `lastDomTabbable` properties, we fall back to\n            //  basic DOM order\n            if (forward) {\n              return focusableNodes\n                .slice(focusableNodes.indexOf(node) + 1)\n                .find((el) => isTabbable(el));\n            }\n\n            return focusableNodes\n              .slice(0, focusableNodes.indexOf(node))\n              .reverse()\n              .find((el) => isTabbable(el));\n          }\n\n          return tabbableNodes[nodeIdx + (forward ? 1 : -1)];\n        },\n      };\n    });\n\n    state.tabbableGroups = state.containerGroups.filter(\n      (group) => group.tabbableNodes.length > 0\n    );\n\n    // throw if no groups have tabbable nodes and we don't have a fallback focus node either\n    if (\n      state.tabbableGroups.length <= 0 &&\n      !getNodeForOption('fallbackFocus') // returning false not supported for this option\n    ) {\n      throw new Error(\n        'Your focus-trap must have at least one container with at least one tabbable node in it at all times'\n      );\n    }\n\n    // NOTE: Positive tabindexes are only properly supported in single-container traps because\n    //  doing it across multiple containers where tabindexes could be all over the place\n    //  would require Tabbable to support multiple containers, would require additional\n    //  specialized Shadow DOM support, and would require Tabbable's multi-container support\n    //  to look at those containers in document position order rather than user-provided\n    //  order (as they are treated in Focus-trap, for legacy reasons). See discussion on\n    //  https://github.com/focus-trap/focus-trap/issues/375 for more details.\n    if (\n      state.containerGroups.find((g) => g.posTabIndexesFound) &&\n      state.containerGroups.length > 1\n    ) {\n      throw new Error(\n        \"At least one node with a positive tabindex was found in one of your focus-trap's multiple containers. Positive tabindexes are only supported in single-container focus-traps.\"\n      );\n    }\n  };\n\n  const tryFocus = function (node) {\n    if (node === false) {\n      return;\n    }\n\n    if (node === doc.activeElement) {\n      return;\n    }\n\n    if (!node || !node.focus) {\n      tryFocus(getInitialFocusNode());\n      return;\n    }\n\n    node.focus({ preventScroll: !!config.preventScroll });\n    // NOTE: focus() API does not trigger focusIn event so set MRU node manually\n    state.mostRecentlyFocusedNode = node;\n\n    if (isSelectableInput(node)) {\n      node.select();\n    }\n  };\n\n  const getReturnFocusNode = function (previousActiveElement) {\n    const node = getNodeForOption('setReturnFocus', previousActiveElement);\n    return node ? node : node === false ? false : previousActiveElement;\n  };\n\n  /**\n   * Finds the next node (in either direction) where focus should move according to a\n   *  keyboard focus-in event.\n   * @param {Object} params\n   * @param {Node} [params.target] Known target __from which__ to navigate, if any.\n   * @param {KeyboardEvent|FocusEvent} [params.event] Event to use if `target` isn't known (event\n   *  will be used to determine the `target`). Ignored if `target` is specified.\n   * @param {boolean} [params.isBackward] True if focus should move backward.\n   * @returns {Node|undefined} The next node, or `undefined` if a next node couldn't be\n   *  determined given the current state of the trap.\n   */\n  const findNextNavNode = function ({ target, event, isBackward = false }) {\n    target = target || getActualTarget(event);\n    updateTabbableNodes();\n\n    let destinationNode = null;\n\n    if (state.tabbableGroups.length > 0) {\n      // make sure the target is actually contained in a group\n      // NOTE: the target may also be the container itself if it's focusable\n      //  with tabIndex='-1' and was given initial focus\n      const containerIndex = findContainerIndex(target, event);\n      const containerGroup =\n        containerIndex >= 0 ? state.containerGroups[containerIndex] : undefined;\n\n      if (containerIndex < 0) {\n        // target not found in any group: quite possible focus has escaped the trap,\n        //  so bring it back into...\n        if (isBackward) {\n          // ...the last node in the last group\n          destinationNode =\n            state.tabbableGroups[state.tabbableGroups.length - 1]\n              .lastTabbableNode;\n        } else {\n          // ...the first node in the first group\n          destinationNode = state.tabbableGroups[0].firstTabbableNode;\n        }\n      } else if (isBackward) {\n        // REVERSE\n\n        // is the target the first tabbable node in a group?\n        let startOfGroupIndex = findIndex(\n          state.tabbableGroups,\n          ({ firstTabbableNode }) => target === firstTabbableNode\n        );\n\n        if (\n          startOfGroupIndex < 0 &&\n          (containerGroup.container === target ||\n            (isFocusable(target, config.tabbableOptions) &&\n              !isTabbable(target, config.tabbableOptions) &&\n              !containerGroup.nextTabbableNode(target, false)))\n        ) {\n          // an exception case where the target is either the container itself, or\n          //  a non-tabbable node that was given focus (i.e. tabindex is negative\n          //  and user clicked on it or node was programmatically given focus)\n          //  and is not followed by any other tabbable node, in which\n          //  case, we should handle shift+tab as if focus were on the container's\n          //  first tabbable node, and go to the last tabbable node of the LAST group\n          startOfGroupIndex = containerIndex;\n        }\n\n        if (startOfGroupIndex >= 0) {\n          // YES: then shift+tab should go to the last tabbable node in the\n          //  previous group (and wrap around to the last tabbable node of\n          //  the LAST group if it's the first tabbable node of the FIRST group)\n          const destinationGroupIndex =\n            startOfGroupIndex === 0\n              ? state.tabbableGroups.length - 1\n              : startOfGroupIndex - 1;\n\n          const destinationGroup = state.tabbableGroups[destinationGroupIndex];\n\n          destinationNode =\n            getTabIndex(target) >= 0\n              ? destinationGroup.lastTabbableNode\n              : destinationGroup.lastDomTabbableNode;\n        } else if (!isTabEvent(event)) {\n          // user must have customized the nav keys so we have to move focus manually _within_\n          //  the active group: do this based on the order determined by tabbable()\n          destinationNode = containerGroup.nextTabbableNode(target, false);\n        }\n      } else {\n        // FORWARD\n\n        // is the target the last tabbable node in a group?\n        let lastOfGroupIndex = findIndex(\n          state.tabbableGroups,\n          ({ lastTabbableNode }) => target === lastTabbableNode\n        );\n\n        if (\n          lastOfGroupIndex < 0 &&\n          (containerGroup.container === target ||\n            (isFocusable(target, config.tabbableOptions) &&\n              !isTabbable(target, config.tabbableOptions) &&\n              !containerGroup.nextTabbableNode(target)))\n        ) {\n          // an exception case where the target is the container itself, or\n          //  a non-tabbable node that was given focus (i.e. tabindex is negative\n          //  and user clicked on it or node was programmatically given focus)\n          //  and is not followed by any other tabbable node, in which\n          //  case, we should handle tab as if focus were on the container's\n          //  last tabbable node, and go to the first tabbable node of the FIRST group\n          lastOfGroupIndex = containerIndex;\n        }\n\n        if (lastOfGroupIndex >= 0) {\n          // YES: then tab should go to the first tabbable node in the next\n          //  group (and wrap around to the first tabbable node of the FIRST\n          //  group if it's the last tabbable node of the LAST group)\n          const destinationGroupIndex =\n            lastOfGroupIndex === state.tabbableGroups.length - 1\n              ? 0\n              : lastOfGroupIndex + 1;\n\n          const destinationGroup = state.tabbableGroups[destinationGroupIndex];\n\n          destinationNode =\n            getTabIndex(target) >= 0\n              ? destinationGroup.firstTabbableNode\n              : destinationGroup.firstDomTabbableNode;\n        } else if (!isTabEvent(event)) {\n          // user must have customized the nav keys so we have to move focus manually _within_\n          //  the active group: do this based on the order determined by tabbable()\n          destinationNode = containerGroup.nextTabbableNode(target);\n        }\n      }\n    } else {\n      // no groups available\n      // NOTE: the fallbackFocus option does not support returning false to opt-out\n      destinationNode = getNodeForOption('fallbackFocus');\n    }\n\n    return destinationNode;\n  };\n\n  // This needs to be done on mousedown and touchstart instead of click\n  // so that it precedes the focus event.\n  const checkPointerDown = function (e) {\n    const target = getActualTarget(e);\n\n    if (findContainerIndex(target, e) >= 0) {\n      // allow the click since it ocurred inside the trap\n      return;\n    }\n\n    if (valueOrHandler(config.clickOutsideDeactivates, e)) {\n      // immediately deactivate the trap\n      trap.deactivate({\n        // NOTE: by setting `returnFocus: false`, deactivate() will do nothing,\n        //  which will result in the outside click setting focus to the node\n        //  that was clicked (and if not focusable, to \"nothing\"); by setting\n        //  `returnFocus: true`, we'll attempt to re-focus the node originally-focused\n        //  on activation (or the configured `setReturnFocus` node), whether the\n        //  outside click was on a focusable node or not\n        returnFocus: config.returnFocusOnDeactivate,\n      });\n      return;\n    }\n\n    // This is needed for mobile devices.\n    // (If we'll only let `click` events through,\n    // then on mobile they will be blocked anyways if `touchstart` is blocked.)\n    if (valueOrHandler(config.allowOutsideClick, e)) {\n      // allow the click outside the trap to take place\n      return;\n    }\n\n    // otherwise, prevent the click\n    e.preventDefault();\n  };\n\n  // In case focus escapes the trap for some strange reason, pull it back in.\n  // NOTE: the focusIn event is NOT cancelable, so if focus escapes, it may cause unexpected\n  //  scrolling if the node that got focused was out of view; there's nothing we can do to\n  //  prevent that from happening by the time we discover that focus escaped\n  const checkFocusIn = function (event) {\n    const target = getActualTarget(event);\n    const targetContained = findContainerIndex(target, event) >= 0;\n\n    // In Firefox when you Tab out of an iframe the Document is briefly focused.\n    if (targetContained || target instanceof Document) {\n      if (targetContained) {\n        state.mostRecentlyFocusedNode = target;\n      }\n    } else {\n      // escaped! pull it back in to where it just left\n      event.stopImmediatePropagation();\n\n      // focus will escape if the MRU node had a positive tab index and user tried to nav forward;\n      //  it will also escape if the MRU node had a 0 tab index and user tried to nav backward\n      //  toward a node with a positive tab index\n      let nextNode; // next node to focus, if we find one\n      let navAcrossContainers = true;\n      if (state.mostRecentlyFocusedNode) {\n        if (getTabIndex(state.mostRecentlyFocusedNode) > 0) {\n          // MRU container index must be >=0 otherwise we wouldn't have it as an MRU node...\n          const mruContainerIdx = findContainerIndex(\n            state.mostRecentlyFocusedNode\n          );\n          // there MAY not be any tabbable nodes in the container if there are at least 2 containers\n          //  and the MRU node is focusable but not tabbable (focus-trap requires at least 1 container\n          //  with at least one tabbable node in order to function, so this could be the other container\n          //  with nothing tabbable in it)\n          const { tabbableNodes } = state.containerGroups[mruContainerIdx];\n          if (tabbableNodes.length > 0) {\n            // MRU tab index MAY not be found if the MRU node is focusable but not tabbable\n            const mruTabIdx = tabbableNodes.findIndex(\n              (node) => node === state.mostRecentlyFocusedNode\n            );\n            if (mruTabIdx >= 0) {\n              if (config.isKeyForward(state.recentNavEvent)) {\n                if (mruTabIdx + 1 < tabbableNodes.length) {\n                  nextNode = tabbableNodes[mruTabIdx + 1];\n                  navAcrossContainers = false;\n                }\n                // else, don't wrap within the container as focus should move to next/previous\n                //  container\n              } else {\n                if (mruTabIdx - 1 >= 0) {\n                  nextNode = tabbableNodes[mruTabIdx - 1];\n                  navAcrossContainers = false;\n                }\n                // else, don't wrap within the container as focus should move to next/previous\n                //  container\n              }\n              // else, don't find in container order without considering direction too\n            }\n          }\n          // else, no tabbable nodes in that container (which means we must have at least one other\n          //  container with at least one tabbable node in it, otherwise focus-trap would've thrown\n          //  an error the last time updateTabbableNodes() was run): find next node among all known\n          //  containers\n        } else {\n          // check to see if there's at least one tabbable node with a positive tab index inside\n          //  the trap because focus seems to escape when navigating backward from a tabbable node\n          //  with tabindex=0 when this is the case (instead of wrapping to the tabbable node with\n          //  the greatest positive tab index like it should)\n          if (\n            !state.containerGroups.some((g) =>\n              g.tabbableNodes.some((n) => getTabIndex(n) > 0)\n            )\n          ) {\n            // no containers with tabbable nodes with positive tab indexes which means the focus\n            //  escaped for some other reason and we should just execute the fallback to the\n            //  MRU node or initial focus node, if any\n            navAcrossContainers = false;\n          }\n        }\n      } else {\n        // no MRU node means we're likely in some initial condition when the trap has just\n        //  been activated and initial focus hasn't been given yet, in which case we should\n        //  fall through to trying to focus the initial focus node, which is what should\n        //  happen below at this point in the logic\n        navAcrossContainers = false;\n      }\n\n      if (navAcrossContainers) {\n        nextNode = findNextNavNode({\n          // move FROM the MRU node, not event-related node (which will be the node that is\n          //  outside the trap causing the focus escape we're trying to fix)\n          target: state.mostRecentlyFocusedNode,\n          isBackward: config.isKeyBackward(state.recentNavEvent),\n        });\n      }\n\n      if (nextNode) {\n        tryFocus(nextNode);\n      } else {\n        tryFocus(state.mostRecentlyFocusedNode || getInitialFocusNode());\n      }\n    }\n\n    state.recentNavEvent = undefined; // clear\n  };\n\n  // Hijack key nav events on the first and last focusable nodes of the trap,\n  // in order to prevent focus from escaping. If it escapes for even a\n  // moment it can end up scrolling the page and causing confusion so we\n  // kind of need to capture the action at the keydown phase.\n  const checkKeyNav = function (event, isBackward = false) {\n    state.recentNavEvent = event;\n\n    const destinationNode = findNextNavNode({ event, isBackward });\n    if (destinationNode) {\n      if (isTabEvent(event)) {\n        // since tab natively moves focus, we wouldn't have a destination node unless we\n        //  were on the edge of a container and had to move to the next/previous edge, in\n        //  which case we want to prevent default to keep the browser from moving focus\n        //  to where it normally would\n        event.preventDefault();\n      }\n      tryFocus(destinationNode);\n    }\n    // else, let the browser take care of [shift+]tab and move the focus\n  };\n\n  const checkKey = function (event) {\n    if (\n      isEscapeEvent(event) &&\n      valueOrHandler(config.escapeDeactivates, event) !== false\n    ) {\n      event.preventDefault();\n      trap.deactivate();\n      return;\n    }\n\n    if (config.isKeyForward(event) || config.isKeyBackward(event)) {\n      checkKeyNav(event, config.isKeyBackward(event));\n    }\n  };\n\n  const checkClick = function (e) {\n    const target = getActualTarget(e);\n\n    if (findContainerIndex(target, e) >= 0) {\n      return;\n    }\n\n    if (valueOrHandler(config.clickOutsideDeactivates, e)) {\n      return;\n    }\n\n    if (valueOrHandler(config.allowOutsideClick, e)) {\n      return;\n    }\n\n    e.preventDefault();\n    e.stopImmediatePropagation();\n  };\n\n  //\n  // EVENT LISTENERS\n  //\n\n  const addListeners = function () {\n    if (!state.active) {\n      return;\n    }\n\n    // There can be only one listening focus trap at a time\n    activeFocusTraps.activateTrap(trapStack, trap);\n\n    // Delay ensures that the focused element doesn't capture the event\n    // that caused the focus trap activation.\n    state.delayInitialFocusTimer = config.delayInitialFocus\n      ? delay(function () {\n          tryFocus(getInitialFocusNode());\n        })\n      : tryFocus(getInitialFocusNode());\n\n    doc.addEventListener('focusin', checkFocusIn, true);\n    doc.addEventListener('mousedown', checkPointerDown, {\n      capture: true,\n      passive: false,\n    });\n    doc.addEventListener('touchstart', checkPointerDown, {\n      capture: true,\n      passive: false,\n    });\n    doc.addEventListener('click', checkClick, {\n      capture: true,\n      passive: false,\n    });\n    doc.addEventListener('keydown', checkKey, {\n      capture: true,\n      passive: false,\n    });\n\n    return trap;\n  };\n\n  const removeListeners = function () {\n    if (!state.active) {\n      return;\n    }\n\n    doc.removeEventListener('focusin', checkFocusIn, true);\n    doc.removeEventListener('mousedown', checkPointerDown, true);\n    doc.removeEventListener('touchstart', checkPointerDown, true);\n    doc.removeEventListener('click', checkClick, true);\n    doc.removeEventListener('keydown', checkKey, true);\n\n    return trap;\n  };\n\n  //\n  // MUTATION OBSERVER\n  //\n\n  const checkDomRemoval = function (mutations) {\n    const isFocusedNodeRemoved = mutations.some(function (mutation) {\n      const removedNodes = Array.from(mutation.removedNodes);\n      return removedNodes.some(function (node) {\n        return node === state.mostRecentlyFocusedNode;\n      });\n    });\n\n    // If the currently focused is removed then browsers will move focus to the\n    // <body> element. If this happens, try to move focus back into the trap.\n    if (isFocusedNodeRemoved) {\n      tryFocus(getInitialFocusNode());\n    }\n  };\n\n  // Use MutationObserver - if supported - to detect if focused node is removed\n  // from the DOM.\n  const mutationObserver =\n    typeof window !== 'undefined' && 'MutationObserver' in window\n      ? new MutationObserver(checkDomRemoval)\n      : undefined;\n\n  const updateObservedNodes = function () {\n    if (!mutationObserver) {\n      return;\n    }\n\n    mutationObserver.disconnect();\n    if (state.active && !state.paused) {\n      state.containers.map(function (container) {\n        mutationObserver.observe(container, {\n          subtree: true,\n          childList: true,\n        });\n      });\n    }\n  };\n\n  //\n  // TRAP DEFINITION\n  //\n\n  trap = {\n    get active() {\n      return state.active;\n    },\n\n    get paused() {\n      return state.paused;\n    },\n\n    activate(activateOptions) {\n      if (state.active) {\n        return this;\n      }\n\n      const onActivate = getOption(activateOptions, 'onActivate');\n      const onPostActivate = getOption(activateOptions, 'onPostActivate');\n      const checkCanFocusTrap = getOption(activateOptions, 'checkCanFocusTrap');\n\n      if (!checkCanFocusTrap) {\n        updateTabbableNodes();\n      }\n\n      state.active = true;\n      state.paused = false;\n      state.nodeFocusedBeforeActivation = doc.activeElement;\n\n      onActivate?.();\n\n      const finishActivation = () => {\n        if (checkCanFocusTrap) {\n          updateTabbableNodes();\n        }\n        addListeners();\n        updateObservedNodes();\n        onPostActivate?.();\n      };\n\n      if (checkCanFocusTrap) {\n        checkCanFocusTrap(state.containers.concat()).then(\n          finishActivation,\n          finishActivation\n        );\n        return this;\n      }\n\n      finishActivation();\n      return this;\n    },\n\n    deactivate(deactivateOptions) {\n      if (!state.active) {\n        return this;\n      }\n\n      const options = {\n        onDeactivate: config.onDeactivate,\n        onPostDeactivate: config.onPostDeactivate,\n        checkCanReturnFocus: config.checkCanReturnFocus,\n        ...deactivateOptions,\n      };\n\n      clearTimeout(state.delayInitialFocusTimer); // noop if undefined\n      state.delayInitialFocusTimer = undefined;\n\n      removeListeners();\n      state.active = false;\n      state.paused = false;\n      updateObservedNodes();\n\n      activeFocusTraps.deactivateTrap(trapStack, trap);\n\n      const onDeactivate = getOption(options, 'onDeactivate');\n      const onPostDeactivate = getOption(options, 'onPostDeactivate');\n      const checkCanReturnFocus = getOption(options, 'checkCanReturnFocus');\n      const returnFocus = getOption(\n        options,\n        'returnFocus',\n        'returnFocusOnDeactivate'\n      );\n\n      onDeactivate?.();\n\n      const finishDeactivation = () => {\n        delay(() => {\n          if (returnFocus) {\n            tryFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation));\n          }\n          onPostDeactivate?.();\n        });\n      };\n\n      if (returnFocus && checkCanReturnFocus) {\n        checkCanReturnFocus(\n          getReturnFocusNode(state.nodeFocusedBeforeActivation)\n        ).then(finishDeactivation, finishDeactivation);\n        return this;\n      }\n\n      finishDeactivation();\n      return this;\n    },\n\n    pause(pauseOptions) {\n      if (state.paused || !state.active) {\n        return this;\n      }\n\n      const onPause = getOption(pauseOptions, 'onPause');\n      const onPostPause = getOption(pauseOptions, 'onPostPause');\n\n      state.paused = true;\n      onPause?.();\n\n      removeListeners();\n      updateObservedNodes();\n\n      onPostPause?.();\n      return this;\n    },\n\n    unpause(unpauseOptions) {\n      if (!state.paused || !state.active) {\n        return this;\n      }\n\n      const onUnpause = getOption(unpauseOptions, 'onUnpause');\n      const onPostUnpause = getOption(unpauseOptions, 'onPostUnpause');\n\n      state.paused = false;\n      onUnpause?.();\n\n      updateTabbableNodes();\n      addListeners();\n      updateObservedNodes();\n\n      onPostUnpause?.();\n      return this;\n    },\n\n    updateContainerElements(containerElements) {\n      const elementsAsArray = [].concat(containerElements).filter(Boolean);\n\n      state.containers = elementsAsArray.map((element) =>\n        typeof element === 'string' ? doc.querySelector(element) : element\n      );\n\n      if (state.active) {\n        updateTabbableNodes();\n      }\n\n      updateObservedNodes();\n\n      return this;\n    },\n  };\n\n  // initialize container elements\n  trap.updateContainerElements(elements);\n\n  return trap;\n};\n\nexport { createFocusTrap };\n", "\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nvar React = require('react');\nvar PropTypes = require('prop-types');\nvar _require = require('focus-trap'),\n  createFocusTrap = _require.createFocusTrap;\nvar _require2 = require('tabbable'),\n  isFocusable = _require2.isFocusable;\nvar FocusTrap = /*#__PURE__*/function (_React$Component) {\n  _inherits(FocusTrap, _React$Component);\n  var _super = _createSuper(FocusTrap);\n  function FocusTrap(props) {\n    var _this;\n    _classCallCheck(this, FocusTrap);\n    _this = _super.call(this, props);\n    /**\n     * Gets the node for the given option, which is expected to be an option that\n     *  can be either a DOM node, a string that is a selector to get a node, `false`\n     *  (if a node is explicitly NOT given), or a function that returns any of these\n     *  values.\n     * @param {string} optionName\n     * @returns {undefined | false | HTMLElement | SVGElement} Returns\n     *  `undefined` if the option is not specified; `false` if the option\n     *  resolved to `false` (node explicitly not given); otherwise, the resolved\n     *  DOM node.\n     * @throws {Error} If the option is set, not `false`, and is not, or does not\n     *  resolve to a node.\n     */\n    _defineProperty(_assertThisInitialized(_this), \"getNodeForOption\", function (optionName) {\n      var _this$internalOptions;\n      // use internal options first, falling back to original options\n      var optionValue = (_this$internalOptions = this.internalOptions[optionName]) !== null && _this$internalOptions !== void 0 ? _this$internalOptions : this.originalOptions[optionName];\n      if (typeof optionValue === 'function') {\n        for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          params[_key - 1] = arguments[_key];\n        }\n        optionValue = optionValue.apply(void 0, params);\n      }\n      if (optionValue === true) {\n        optionValue = undefined; // use default value\n      }\n\n      if (!optionValue) {\n        if (optionValue === undefined || optionValue === false) {\n          return optionValue;\n        }\n        // else, empty string (invalid), null (invalid), 0 (invalid)\n\n        throw new Error(\"`\".concat(optionName, \"` was specified but was not a node, or did not return a node\"));\n      }\n      var node = optionValue; // could be HTMLElement, SVGElement, or non-empty string at this point\n\n      if (typeof optionValue === 'string') {\n        var _this$getDocument;\n        node = (_this$getDocument = this.getDocument()) === null || _this$getDocument === void 0 ? void 0 : _this$getDocument.querySelector(optionValue); // resolve to node, or null if fails\n        if (!node) {\n          throw new Error(\"`\".concat(optionName, \"` as selector refers to no known node\"));\n        }\n      }\n      return node;\n    });\n    _this.handleDeactivate = _this.handleDeactivate.bind(_assertThisInitialized(_this));\n    _this.handlePostDeactivate = _this.handlePostDeactivate.bind(_assertThisInitialized(_this));\n    _this.handleClickOutsideDeactivates = _this.handleClickOutsideDeactivates.bind(_assertThisInitialized(_this));\n\n    // focus-trap options used internally when creating the trap\n    _this.internalOptions = {\n      // We need to hijack the returnFocusOnDeactivate option,\n      // because React can move focus into the element before we arrived at\n      // this lifecycle hook (e.g. with autoFocus inputs). So the component\n      // captures the previouslyFocusedElement in componentWillMount,\n      // then (optionally) returns focus to it in componentWillUnmount.\n      returnFocusOnDeactivate: false,\n      // the rest of these are also related to deactivation of the trap, and we\n      //  need to use them and control them as well\n      checkCanReturnFocus: null,\n      onDeactivate: _this.handleDeactivate,\n      onPostDeactivate: _this.handlePostDeactivate,\n      // we need to special-case this setting as well so that we can know if we should\n      //  NOT return focus if the trap gets auto-deactivated as the result of an\n      //  outside click (otherwise, we'll always think we should return focus because\n      //  of how we manage that flag internally here)\n      clickOutsideDeactivates: _this.handleClickOutsideDeactivates\n    };\n\n    // original options provided by the consumer\n    _this.originalOptions = {\n      // because of the above `internalOptions`, we maintain our own flag for\n      //  this option, and default it to `true` because that's focus-trap's default\n      returnFocusOnDeactivate: true,\n      // because of the above `internalOptions`, we keep these separate since\n      //  they're part of the deactivation process which we configure (internally) to\n      //  be shared between focus-trap and focus-trap-react\n      onDeactivate: null,\n      onPostDeactivate: null,\n      checkCanReturnFocus: null,\n      // the user's setting, defaulted to false since focus-trap defaults this to false\n      clickOutsideDeactivates: false\n    };\n    var focusTrapOptions = props.focusTrapOptions;\n    for (var optionName in focusTrapOptions) {\n      if (!Object.prototype.hasOwnProperty.call(focusTrapOptions, optionName)) {\n        continue;\n      }\n      if (optionName === 'returnFocusOnDeactivate' || optionName === 'onDeactivate' || optionName === 'onPostDeactivate' || optionName === 'checkCanReturnFocus' || optionName === 'clickOutsideDeactivates') {\n        _this.originalOptions[optionName] = focusTrapOptions[optionName];\n        continue; // exclude from internalOptions\n      }\n\n      _this.internalOptions[optionName] = focusTrapOptions[optionName];\n    }\n\n    // if set, `{ target: Node, allowDeactivation: boolean }` where `target` is the outside\n    //  node that was clicked, and `allowDeactivation` is the result of the consumer's\n    //  option (stored in `this.originalOptions.clickOutsideDeactivates`, which may be a\n    //  function) whether to allow or deny auto-deactivation on click on this outside node\n    _this.outsideClick = null;\n\n    // elements from which to create the focus trap on mount; if a child is used\n    //  instead of the `containerElements` prop, we'll get the child's related\n    //  element when the trap renders and then is declared 'mounted'\n    _this.focusTrapElements = props.containerElements || [];\n\n    // now we remember what the currently focused element is, not relying on focus-trap\n    _this.updatePreviousElement();\n    return _this;\n  }\n\n  /**\n   * Gets the configured document.\n   * @returns {Document|undefined} Configured document, falling back to the main\n   *  document, if it exists. During SSR, `undefined` is returned since the\n   *  document doesn't exist.\n   */\n  _createClass(FocusTrap, [{\n    key: \"getDocument\",\n    value: function getDocument() {\n      // SSR: careful to check if `document` exists before accessing it as a variable\n      return this.props.focusTrapOptions.document || (typeof document !== 'undefined' ? document : undefined);\n    }\n  }, {\n    key: \"getReturnFocusNode\",\n    value: function getReturnFocusNode() {\n      var node = this.getNodeForOption('setReturnFocus', this.previouslyFocusedElement);\n      return node ? node : node === false ? false : this.previouslyFocusedElement;\n    }\n\n    /** Update the previously focused element with the currently focused element. */\n  }, {\n    key: \"updatePreviousElement\",\n    value: function updatePreviousElement() {\n      var currentDocument = this.getDocument();\n      if (currentDocument) {\n        this.previouslyFocusedElement = currentDocument.activeElement;\n      }\n    }\n  }, {\n    key: \"deactivateTrap\",\n    value: function deactivateTrap() {\n      // NOTE: it's possible the focus trap has already been deactivated without our knowing it,\n      //  especially if the user set the `clickOutsideDeactivates: true` option on the trap,\n      //  and the mouse was clicked on some element outside the trap; at that point, focus-trap\n      //  will initiate its auto-deactivation process, which will call our own\n      //  handleDeactivate(), which will call into this method\n      if (!this.focusTrap || !this.focusTrap.active) {\n        return;\n      }\n      this.focusTrap.deactivate({\n        // NOTE: we never let the trap return the focus since we do that ourselves\n        returnFocus: false,\n        // we'll call this in our own post deactivate handler so make sure the trap doesn't\n        //  do it prematurely\n        checkCanReturnFocus: null,\n        // let it call the user's original deactivate handler, if any, instead of\n        //  our own which calls back into this function\n        onDeactivate: this.originalOptions.onDeactivate\n        // NOTE: for post deactivate, don't specify anything so that it calls the\n        //  onPostDeactivate handler specified on `this.internalOptions`\n        //  which will always be our own `handlePostDeactivate()` handler, which\n        //  will finish things off by calling the user's provided onPostDeactivate\n        //  handler, if any, at the right time\n        // onPostDeactivate: NOTHING\n      });\n    }\n  }, {\n    key: \"handleClickOutsideDeactivates\",\n    value: function handleClickOutsideDeactivates(event) {\n      // use consumer's option (or call their handler) as the permission or denial\n      var allowDeactivation = typeof this.originalOptions.clickOutsideDeactivates === 'function' ? this.originalOptions.clickOutsideDeactivates.call(null, event) // call out of context\n      : this.originalOptions.clickOutsideDeactivates; // boolean\n\n      if (allowDeactivation) {\n        // capture the outside target that was clicked so we can use it in the deactivation\n        //  process since the consumer allowed it to cause auto-deactivation\n        this.outsideClick = {\n          target: event.target,\n          allowDeactivation: allowDeactivation\n        };\n      }\n      return allowDeactivation;\n    }\n  }, {\n    key: \"handleDeactivate\",\n    value: function handleDeactivate() {\n      if (this.originalOptions.onDeactivate) {\n        this.originalOptions.onDeactivate.call(null); // call user's handler out of context\n      }\n\n      this.deactivateTrap();\n    }\n  }, {\n    key: \"handlePostDeactivate\",\n    value: function handlePostDeactivate() {\n      var _this2 = this;\n      var finishDeactivation = function finishDeactivation() {\n        var returnFocusNode = _this2.getReturnFocusNode();\n        var canReturnFocus = !!(\n        // did the consumer allow it?\n\n        _this2.originalOptions.returnFocusOnDeactivate && // can we actually focus the node?\n        returnFocusNode !== null && returnFocusNode !== void 0 && returnFocusNode.focus && (\n        // was there an outside click that allowed deactivation?\n        !_this2.outsideClick ||\n        // did the consumer allow deactivation when the outside node was clicked?\n        _this2.outsideClick.allowDeactivation &&\n        // is the outside node NOT focusable (implying that it did NOT receive focus\n        //  as a result of the click-through) -- in which case do NOT restore focus\n        //  to `returnFocusNode` because focus should remain on the outside node\n        !isFocusable(_this2.outsideClick.target, _this2.internalOptions.tabbableOptions))\n\n        // if no, the restore focus to `returnFocusNode` at this point\n        );\n\n        var _this2$internalOption = _this2.internalOptions.preventScroll,\n          preventScroll = _this2$internalOption === void 0 ? false : _this2$internalOption;\n        if (canReturnFocus) {\n          // return focus to the element that had focus when the trap was activated\n          returnFocusNode.focus({\n            preventScroll: preventScroll\n          });\n        }\n        if (_this2.originalOptions.onPostDeactivate) {\n          _this2.originalOptions.onPostDeactivate.call(null); // don't call it in context of \"this\"\n        }\n\n        _this2.outsideClick = null; // reset: no longer needed\n      };\n\n      if (this.originalOptions.checkCanReturnFocus) {\n        this.originalOptions.checkCanReturnFocus.call(null, this.getReturnFocusNode()) // call out of context\n        .then(finishDeactivation, finishDeactivation);\n      } else {\n        finishDeactivation();\n      }\n    }\n  }, {\n    key: \"setupFocusTrap\",\n    value: function setupFocusTrap() {\n      if (this.focusTrap) {\n        // trap already exists: it's possible we're in StrictMode and we're being remounted,\n        //  in which case, we will have deactivated the trap when we got unmounted (remember,\n        //  StrictMode, in development, purposely unmounts and remounts components after\n        //  mounting them the first time to make sure they have reusable state,\n        //  @see https://reactjs.org/docs/strict-mode.html#ensuring-reusable-state) so now\n        //  we need to restore the state of the trap according to our component state\n        // NOTE: Strict mode __violates__ assumptions about the `componentWillUnmount()` API\n        //  which clearly states -- even for React 18 -- that, \"Once a component instance is\n        //  unmounted, __it will never be mounted again.__\" (emphasis ours). So when we get\n        //  unmounted, we assume we're gone forever and we deactivate the trap. But then\n        //  we get remounted and we're supposed to restore state. But if you had paused,\n        //  we've now deactivated (we don't know we're amount to get remounted again)\n        //  which means we need to reactivate and then pause. Otherwise, do nothing.\n        if (this.props.active && !this.focusTrap.active) {\n          this.focusTrap.activate();\n          if (this.props.paused) {\n            this.focusTrap.pause();\n          }\n        }\n      } else {\n        var nodesExist = this.focusTrapElements.some(Boolean);\n        if (nodesExist) {\n          // eslint-disable-next-line react/prop-types -- _createFocusTrap is an internal prop\n          this.focusTrap = this.props._createFocusTrap(this.focusTrapElements, this.internalOptions);\n          if (this.props.active) {\n            this.focusTrap.activate();\n          }\n          if (this.props.paused) {\n            this.focusTrap.pause();\n          }\n        }\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.active) {\n        this.setupFocusTrap();\n      }\n      // else, wait for later activation in case the `focusTrapOptions` will be updated\n      //  again before the trap is activated (e.g. if waiting to know what the document\n      //  object will be, so the Trap must be rendered, but the consumer is waiting to\n      //  activate until they have obtained the document from a ref)\n      //  @see https://github.com/focus-trap/focus-trap-react/issues/539\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.focusTrap) {\n        if (prevProps.containerElements !== this.props.containerElements) {\n          this.focusTrap.updateContainerElements(this.props.containerElements);\n        }\n        var hasActivated = !prevProps.active && this.props.active;\n        var hasDeactivated = prevProps.active && !this.props.active;\n        var hasPaused = !prevProps.paused && this.props.paused;\n        var hasUnpaused = prevProps.paused && !this.props.paused;\n        if (hasActivated) {\n          this.updatePreviousElement();\n          this.focusTrap.activate();\n        }\n        if (hasDeactivated) {\n          this.deactivateTrap();\n          return; // un/pause does nothing on an inactive trap\n        }\n\n        if (hasPaused) {\n          this.focusTrap.pause();\n        }\n        if (hasUnpaused) {\n          this.focusTrap.unpause();\n        }\n      } else {\n        // NOTE: if we're in `componentDidUpdate` and we don't have a trap yet,\n        //  it either means it shouldn't be active, or it should be but none of\n        //  of given `containerElements` were present in the DOM the last time\n        //  we tried to create the trap\n\n        if (prevProps.containerElements !== this.props.containerElements) {\n          this.focusTrapElements = this.props.containerElements;\n        }\n\n        // don't create the trap unless it should be active in case the consumer\n        //  is still updating `focusTrapOptions`\n        //  @see https://github.com/focus-trap/focus-trap-react/issues/539\n        if (this.props.active) {\n          this.updatePreviousElement();\n          this.setupFocusTrap();\n        }\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.deactivateTrap();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n      var child = this.props.children ? React.Children.only(this.props.children) : undefined;\n      if (child) {\n        if (child.type && child.type === React.Fragment) {\n          throw new Error('A focus-trap cannot use a Fragment as its child container. Try replacing it with a <div> element.');\n        }\n        var callbackRef = function callbackRef(element) {\n          var containerElements = _this3.props.containerElements;\n          if (child) {\n            if (typeof child.ref === 'function') {\n              child.ref(element);\n            } else if (child.ref) {\n              child.ref.current = element;\n            }\n          }\n          _this3.focusTrapElements = containerElements ? containerElements : [element];\n        };\n        var childWithRef = React.cloneElement(child, {\n          ref: callbackRef\n        });\n        return childWithRef;\n      }\n      return null;\n    }\n  }]);\n  return FocusTrap;\n}(React.Component); // support server-side rendering where `Element` will not be defined\nvar ElementType = typeof Element === 'undefined' ? Function : Element;\nFocusTrap.propTypes = {\n  active: PropTypes.bool,\n  paused: PropTypes.bool,\n  focusTrapOptions: PropTypes.shape({\n    document: PropTypes.object,\n    onActivate: PropTypes.func,\n    onPostActivate: PropTypes.func,\n    checkCanFocusTrap: PropTypes.func,\n    onPause: PropTypes.func,\n    onPostPause: PropTypes.func,\n    onUnpause: PropTypes.func,\n    onPostUnpause: PropTypes.func,\n    onDeactivate: PropTypes.func,\n    onPostDeactivate: PropTypes.func,\n    checkCanReturnFocus: PropTypes.func,\n    initialFocus: PropTypes.oneOfType([PropTypes.instanceOf(ElementType), PropTypes.string, PropTypes.bool, PropTypes.func]),\n    fallbackFocus: PropTypes.oneOfType([PropTypes.instanceOf(ElementType), PropTypes.string,\n    // NOTE: does not support `false` as value (or return value from function)\n    PropTypes.func]),\n    escapeDeactivates: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),\n    clickOutsideDeactivates: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),\n    returnFocusOnDeactivate: PropTypes.bool,\n    setReturnFocus: PropTypes.oneOfType([PropTypes.instanceOf(ElementType), PropTypes.string, PropTypes.bool, PropTypes.func]),\n    allowOutsideClick: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),\n    preventScroll: PropTypes.bool,\n    tabbableOptions: PropTypes.shape({\n      displayCheck: PropTypes.oneOf(['full', 'legacy-full', 'non-zero-area', 'none']),\n      getShadowRoot: PropTypes.oneOfType([PropTypes.bool, PropTypes.func])\n    }),\n    trapStack: PropTypes.array,\n    isKeyForward: PropTypes.func,\n    isKeyBackward: PropTypes.func\n  }),\n  containerElements: PropTypes.arrayOf(PropTypes.instanceOf(ElementType)),\n  // DOM element ONLY\n  children: PropTypes.oneOfType([PropTypes.element,\n  // React element\n  PropTypes.instanceOf(ElementType) // DOM element\n  ])\n\n  // NOTE: _createFocusTrap is internal, for testing purposes only, so we don't\n  //  specify it here. It's expected to be set to the function returned from\n  //  require('focus-trap'), or one with a compatible interface.\n};\n\nFocusTrap.defaultProps = {\n  active: true,\n  paused: false,\n  focusTrapOptions: {},\n  _createFocusTrap: createFocusTrap\n};\nmodule.exports = FocusTrap;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;IAKMA,oBAaAC,mBAEAC,WAEAC,SAMAC,aAaAC,SAsBAC,mBAcAC,eAmDAC,0BA0FAC,aAUAC,aAiCAC,sBAUAC,sBAMAC,SAIAC,eAIAC,sBASAC,iBAQAC,iBAmCAC,SAIAC,oBAKAC,gBAiDAC,YAIAC,UAyGAC,wBA8BAC,iCAkBAC,gCAWAC,2BAcAC,aAkCAC,UAyBAC,WAyBAC,YAWAC,4BAIAC;;;AA/pBN,IAAMhC,qBAAqB,CACzB,sBACA,uBACA,yBACA,wBACA,uBACA,qCACA,gCACA,gCACA,iEACA,8CACA,sBAAsB;AAExB,IAAMC,oBAAoCD,mBAAmBiC,KAAK,GAAG;AAErE,IAAM/B,YAAY,OAAOgC,YAAY;AAErC,IAAM/B,UAAUD,YACZ,WAAY;IAAA,IACZgC,QAAQC,UAAUhC,WAClB+B,QAAQC,UAAUC,qBAClBF,QAAQC,UAAUE;AAEtB,IAAMjC,cACJ,CAACF,aAAagC,QAAQC,UAAU/B,cAC5B,SAACkC,SAAO;AAAA,UAAAC;AAAA,aAAKD,YAAAA,QAAAA,YAAOC,SAAAA,UAAAA,uBAAPD,QAASlC,iBAAW,QAAAmC,yBAApBA,SAAAA,SAAAA,qBAAAC,KAAAF,OAAuB;IAAC,IACrC,SAACA,SAAO;AAAA,aAAKA,YAAAA,QAAAA,YAAAA,SAAAA,SAAAA,QAASG;IAAa;AAUzC,IAAMpC,UAAU,SAAVA,SAAoBqC,MAAMC,QAAe;AAAA,UAAAC;AAAA,UAAfD,WAAM,QAAA;AAANA,iBAAS;MAAI;AAI3C,UAAME,WAAWH,SAAI,QAAJA,SAAIE,SAAAA,UAAAA,qBAAJF,KAAMI,kBAAYF,QAAAA,uBAAA,SAAA,SAAlBA,mBAAAJ,KAAAE,MAAqB,OAAO;AAC7C,UAAMK,QAAQF,aAAa,MAAMA,aAAa;AAO9C,UAAMG,SAASD,SAAUJ,UAAUD,QAAQrC,SAAQqC,KAAKO,UAAU;AAElE,aAAOD;IACT;AAOA,IAAM1C,oBAAoB,SAApBA,mBAA8BoC,MAAM;AAAA,UAAAQ;AAIxC,UAAMC,WAAWT,SAAI,QAAJA,SAAIQ,SAAAA,UAAAA,sBAAJR,KAAMI,kBAAYI,QAAAA,wBAAA,SAAA,SAAlBA,oBAAAV,KAAAE,MAAqB,iBAAiB;AACvD,aAAOS,aAAa,MAAMA,aAAa;IACzC;AAQA,IAAM5C,gBAAgB,SAAhBA,eAA0B6C,IAAIC,kBAAkBC,QAAQ;AAG5D,UAAIjD,QAAQ+C,EAAE,GAAG;AACf,eAAO,CAAA;MACT;AAEA,UAAIG,aAAaC,MAAMrB,UAAUsB,MAAMC,MACrCN,GAAGO,iBAAiB1D,iBAAiB,CACvC;AACA,UAAIoD,oBAAoBlD,QAAQqC,KAAKY,IAAInD,iBAAiB,GAAG;AAC3DsD,mBAAWK,QAAQR,EAAE;MACvB;AACAG,mBAAaA,WAAWD,OAAOA,MAAM;AACrC,aAAOC;IACT;AAoCA,IAAM/C,2BAA2B,SAA3BA,0BACJqD,UACAR,kBACAS,SACA;AACA,UAAMP,aAAa,CAAA;AACnB,UAAMQ,kBAAkBP,MAAMQ,KAAKH,QAAQ;AAC3C,aAAOE,gBAAgBE,QAAQ;AAC7B,YAAM3B,UAAUyB,gBAAgBG,MAAK;AACrC,YAAI7D,QAAQiC,SAAS,KAAK,GAAG;AAG3B;QACF;AAEA,YAAIA,QAAQ6B,YAAY,QAAQ;AAE9B,cAAMC,WAAW9B,QAAQ+B,iBAAgB;AACzC,cAAMC,UAAUF,SAASH,SAASG,WAAW9B,QAAQiC;AACrD,cAAMC,mBAAmBhE,0BAAyB8D,SAAS,MAAMR,OAAO;AACxE,cAAIA,QAAQW,SAAS;AACnBlB,uBAAWmB,KAAIhB,MAAfH,YAAmBiB,gBAAgB;UACrC,OAAO;AACLjB,uBAAWmB,KAAK;cACdC,aAAarC;cACbiB,YAAYiB;YACd,CAAC;UACH;QACF,OAAO;AAEL,cAAMI,iBAAiBzE,QAAQqC,KAAKF,SAASrC,iBAAiB;AAC9D,cACE2E,kBACAd,QAAQR,OAAOhB,OAAO,MACrBe,oBAAoB,CAACQ,SAASgB,SAASvC,OAAO,IAC/C;AACAiB,uBAAWmB,KAAKpC,OAAO;UACzB;AAGA,cAAMwC,aACJxC,QAAQwC;UAEP,OAAOhB,QAAQiB,kBAAkB,cAChCjB,QAAQiB,cAAczC,OAAO;AAKjC,cAAM0C,kBACJ,CAAC3E,QAAQyE,YAAY,KAAK,MACzB,CAAChB,QAAQmB,oBAAoBnB,QAAQmB,iBAAiB3C,OAAO;AAEhE,cAAIwC,cAAcE,iBAAiB;AAOjC,gBAAMR,oBAAmBhE,0BACvBsE,eAAe,OAAOxC,QAAQiC,WAAWO,WAAWP,UACpD,MACAT,OACF;AAEA,gBAAIA,QAAQW,SAAS;AACnBlB,yBAAWmB,KAAIhB,MAAfH,YAAmBiB,iBAAgB;YACrC,OAAO;AACLjB,yBAAWmB,KAAK;gBACdC,aAAarC;gBACbiB,YAAYiB;cACd,CAAC;YACH;UACF,OAAO;AAGLT,4BAAgBH,QAAOF,MAAvBK,iBAA2BzB,QAAQiC,QAAQ;UAC7C;QACF;MACF;AACA,aAAOhB;IACT;AAQA,IAAM9C,cAAc,SAAdA,aAAwBiC,MAAM;AAClC,aAAO,CAACwC,MAAMC,SAASzC,KAAKI,aAAa,UAAU,GAAG,EAAE,CAAC;IAC3D;AAQA,IAAMpC,cAAc,SAAdA,aAAwBgC,MAAM;AAClC,UAAI,CAACA,MAAM;AACT,cAAM,IAAI0C,MAAM,kBAAkB;MACpC;AAEA,UAAI1C,KAAK2C,WAAW,GAAG;AAQrB,aACG,0BAA0BC,KAAK5C,KAAKyB,OAAO,KAC1C7D,kBAAkBoC,IAAI,MACxB,CAACjC,YAAYiC,IAAI,GACjB;AACA,iBAAO;QACT;MACF;AAEA,aAAOA,KAAK2C;IACd;AAUA,IAAM1E,uBAAuB,SAAvBA,sBAAiC+B,MAAM6C,SAAS;AACpD,UAAMF,WAAW3E,YAAYgC,IAAI;AAEjC,UAAI2C,WAAW,KAAKE,WAAW,CAAC9E,YAAYiC,IAAI,GAAG;AACjD,eAAO;MACT;AAEA,aAAO2C;IACT;AAEA,IAAMzE,uBAAuB,SAAvBA,sBAAiC4E,GAAGC,GAAG;AAC3C,aAAOD,EAAEH,aAAaI,EAAEJ,WACpBG,EAAEE,gBAAgBD,EAAEC,gBACpBF,EAAEH,WAAWI,EAAEJ;IACrB;AAEA,IAAMxE,UAAU,SAAVA,SAAoB6B,MAAM;AAC9B,aAAOA,KAAKyB,YAAY;IAC1B;AAEA,IAAMrD,gBAAgB,SAAhBA,eAA0B4B,MAAM;AACpC,aAAO7B,QAAQ6B,IAAI,KAAKA,KAAKiD,SAAS;IACxC;AAEA,IAAM5E,uBAAuB,SAAvBA,sBAAiC2B,MAAM;AAC3C,UAAMkD,IACJlD,KAAKyB,YAAY,aACjBX,MAAMrB,UAAUsB,MACbC,MAAMhB,KAAK6B,QAAQ,EACnBsB,KAAK,SAACC,OAAK;AAAA,eAAKA,MAAM3B,YAAY;OAAU;AACjD,aAAOyB;IACT;AAEA,IAAM5E,kBAAkB,SAAlBA,iBAA4B+E,OAAOC,MAAM;AAC7C,eAASC,IAAI,GAAGA,IAAIF,MAAM9B,QAAQgC,KAAK;AACrC,YAAIF,MAAME,CAAC,EAAEC,WAAWH,MAAME,CAAC,EAAED,SAASA,MAAM;AAC9C,iBAAOD,MAAME,CAAC;QAChB;MACF;IACF;AAEA,IAAMhF,kBAAkB,SAAlBA,iBAA4ByB,MAAM;AACtC,UAAI,CAACA,KAAKyD,MAAM;AACd,eAAO;MACT;AACA,UAAMC,aAAa1D,KAAKsD,QAAQ5F,YAAYsC,IAAI;AAChD,UAAM2D,cAAc,SAAdA,aAAwBF,MAAM;AAClC,eAAOC,WAAWzC,iBAChB,+BAA+BwC,OAAO,IACxC;;AAGF,UAAIG;AACJ,UACE,OAAOC,WAAW,eAClB,OAAOA,OAAOC,QAAQ,eACtB,OAAOD,OAAOC,IAAIC,WAAW,YAC7B;AACAH,mBAAWD,YAAYE,OAAOC,IAAIC,OAAO/D,KAAKyD,IAAI,CAAC;MACrD,OAAO;AACL,YAAI;AACFG,qBAAWD,YAAY3D,KAAKyD,IAAI;iBACzBO,KAAK;AAEZC,kBAAQC,MACN,4IACAF,IAAIG,OACN;AACA,iBAAO;QACT;MACF;AAEA,UAAMX,UAAUlF,gBAAgBsF,UAAU5D,KAAKsD,IAAI;AACnD,aAAO,CAACE,WAAWA,YAAYxD;IACjC;AAEA,IAAMxB,UAAU,SAAVA,SAAoBwB,MAAM;AAC9B,aAAO7B,QAAQ6B,IAAI,KAAKA,KAAKiD,SAAS;IACxC;AAEA,IAAMxE,qBAAqB,SAArBA,oBAA+BuB,MAAM;AACzC,aAAOxB,QAAQwB,IAAI,KAAK,CAACzB,gBAAgByB,IAAI;IAC/C;AAGA,IAAMtB,iBAAiB,SAAjBA,gBAA2BsB,MAAM;AAAA,UAAAoE;AAwBrC,UAAIC,WAAWrE,QAAQtC,YAAYsC,IAAI;AACvC,UAAIsE,gBAAYF,YAAGC,cAAQ,QAAAD,cAAA,SAAA,SAARA,UAAUG;AAI7B,UAAIC,WAAW;AACf,UAAIH,YAAYA,aAAarE,MAAM;AAAA,YAAAyE,eAAAC,uBAAAC;AACjCH,mBAAW,CAAC,GACVC,gBAAAH,kBAAYG,QAAAA,kBAAA,WAAAC,wBAAZD,cAAc1E,mBAAa,QAAA2E,0BAAA,UAA3BA,sBAA6BE,SAASN,YAAY,KAClDtE,SAAI,QAAJA,SAAI2E,WAAAA,sBAAJ3E,KAAMD,mBAAa4E,QAAAA,wBAAA,UAAnBA,oBAAqBC,SAAS5E,IAAI;AAGpC,eAAO,CAACwE,YAAYF,cAAc;AAAA,cAAAO,YAAAC,gBAAAC;AAIhCV,qBAAW3G,YAAY4G,YAAY;AACnCA,0BAAYO,aAAGR,cAAQ,QAAAQ,eAAA,SAAA,SAARA,WAAUN;AACzBC,qBAAW,CAAC,GAAAM,iBAACR,kBAAY,QAAAQ,mBAAA,WAAAC,wBAAZD,eAAc/E,mBAAa,QAAAgF,0BAAA,UAA3BA,sBAA6BH,SAASN,YAAY;QACjE;MACF;AAEA,aAAOE;IACT;AAEA,IAAM7F,aAAa,SAAbA,YAAuBqB,MAAM;AACjC,UAAAgF,wBAA0BhF,KAAKiF,sBAAqB,GAA5CC,QAAKF,sBAALE,OAAOC,SAAMH,sBAANG;AACf,aAAOD,UAAU,KAAKC,WAAW;IACnC;AACA,IAAMvG,WAAW,SAAXA,UAAqBoB,MAAIoF,MAAmC;AAAA,UAA/BC,eAAYD,KAAZC,cAAchD,gBAAa+C,KAAb/C;AAM/C,UAAIiD,iBAAiBtF,IAAI,EAAEuF,eAAe,UAAU;AAClD,eAAO;MACT;AAEA,UAAMC,kBAAkB/H,QAAQqC,KAAKE,MAAM,+BAA+B;AAC1E,UAAMyF,mBAAmBD,kBAAkBxF,KAAK0F,gBAAgB1F;AAChE,UAAIvC,QAAQqC,KAAK2F,kBAAkB,uBAAuB,GAAG;AAC3D,eAAO;MACT;AAEA,UACE,CAACJ,gBACDA,iBAAiB,UACjBA,iBAAiB,eACjB;AACA,YAAI,OAAOhD,kBAAkB,YAAY;AAGvC,cAAMsD,eAAe3F;AACrB,iBAAOA,MAAM;AACX,gBAAM0F,gBAAgB1F,KAAK0F;AAC3B,gBAAME,WAAWlI,YAAYsC,IAAI;AACjC,gBACE0F,iBACA,CAACA,cAActD,cACfC,cAAcqD,aAAa,MAAM,MACjC;AAGA,qBAAO/G,WAAWqB,IAAI;YACxB,WAAWA,KAAK6F,cAAc;AAE5B7F,qBAAOA,KAAK6F;uBACH,CAACH,iBAAiBE,aAAa5F,KAAKD,eAAe;AAE5DC,qBAAO4F,SAASrB;YAClB,OAAO;AAELvE,qBAAO0F;YACT;UACF;AAEA1F,iBAAO2F;QACT;AAWA,YAAIjH,eAAesB,IAAI,GAAG;AAKxB,iBAAO,CAACA,KAAK8F,eAAc,EAAGvE;QAChC;AAkBA,YAAI8D,iBAAiB,eAAe;AAClC,iBAAO;QACT;MAEF,WAAWA,iBAAiB,iBAAiB;AAM3C,eAAO1G,WAAWqB,IAAI;MACxB;AAIA,aAAO;IACT;AAKA,IAAMnB,yBAAyB,SAAzBA,wBAAmCmB,MAAM;AAC7C,UAAI,mCAAmC4C,KAAK5C,KAAKyB,OAAO,GAAG;AACzD,YAAIlB,aAAaP,KAAK0F;AAEtB,eAAOnF,YAAY;AACjB,cAAIA,WAAWkB,YAAY,cAAclB,WAAWwF,UAAU;AAE5D,qBAASxC,IAAI,GAAGA,IAAIhD,WAAWsB,SAASN,QAAQgC,KAAK;AACnD,kBAAMH,QAAQ7C,WAAWsB,SAASmE,KAAKzC,CAAC;AAExC,kBAAIH,MAAM3B,YAAY,UAAU;AAG9B,uBAAOhE,QAAQqC,KAAKS,YAAY,sBAAsB,IAClD,OACA,CAAC6C,MAAMwB,SAAS5E,IAAI;cAC1B;YACF;AAEA,mBAAO;UACT;AACAO,uBAAaA,WAAWmF;QAC1B;MACF;AAIA,aAAO;IACT;AAEA,IAAM5G,kCAAkC,SAAlCA,iCAA4CsC,SAASpB,MAAM;AAC/D,UACEA,KAAK+F;;;MAILpI,QAAQqC,IAAI,KACZ5B,cAAc4B,IAAI,KAClBpB,SAASoB,MAAMoB,OAAO;MAEtB/C,qBAAqB2B,IAAI,KACzBnB,uBAAuBmB,IAAI,GAC3B;AACA,eAAO;MACT;AACA,aAAO;IACT;AAEA,IAAMjB,iCAAiC,SAAjCA,gCAA2CqC,SAASpB,MAAM;AAC9D,UACEvB,mBAAmBuB,IAAI,KACvBhC,YAAYgC,IAAI,IAAI,KACpB,CAAClB,gCAAgCsC,SAASpB,IAAI,GAC9C;AACA,eAAO;MACT;AACA,aAAO;IACT;AAEA,IAAMhB,4BAA4B,SAA5BA,2BAAsCiH,gBAAgB;AAC1D,UAAMtD,WAAWF,SAASwD,eAAe7F,aAAa,UAAU,GAAG,EAAE;AACrE,UAAIoC,MAAMG,QAAQ,KAAKA,YAAY,GAAG;AACpC,eAAO;MACT;AAGA,aAAO;IACT;AAMA,IAAM1D,cAAc,SAAdA,aAAwB4B,YAAY;AACxC,UAAMqF,mBAAmB,CAAA;AACzB,UAAMC,mBAAmB,CAAA;AACzBtF,iBAAWuF,QAAQ,SAAUJ,MAAMzC,GAAG;AACpC,YAAMV,UAAU,CAAC,CAACmD,KAAK/D;AACvB,YAAMrC,UAAUiD,UAAUmD,KAAK/D,cAAc+D;AAC7C,YAAMK,oBAAoBpI,qBAAqB2B,SAASiD,OAAO;AAC/D,YAAM1B,WAAW0B,UAAU5D,aAAY+G,KAAKnF,UAAU,IAAIjB;AAC1D,YAAIyG,sBAAsB,GAAG;AAC3BxD,oBACIqD,iBAAiBlE,KAAIhB,MAArBkF,kBAAyB/E,QAAQ,IACjC+E,iBAAiBlE,KAAKpC,OAAO;QACnC,OAAO;AACLuG,2BAAiBnE,KAAK;YACpBgB,eAAeO;YACfZ,UAAU0D;YACVL;YACAnD;YACAjB,SAAST;UACX,CAAC;QACH;MACF,CAAC;AAED,aAAOgF,iBACJG,KAAKpI,oBAAoB,EACzBqI,OAAO,SAACC,KAAKC,UAAa;AACzBA,iBAAS5D,UACL2D,IAAIxE,KAAIhB,MAARwF,KAAYC,SAAS7E,OAAO,IAC5B4E,IAAIxE,KAAKyE,SAAS7E,OAAO;AAC7B,eAAO4E;MACT,GAAG,CAAA,CAAE,EACJE,OAAOR,gBAAgB;IAC5B;AAEMhH,IAAAA,WAAW,SAAXA,UAAqByH,WAAWvF,SAAS;AAC7CA,gBAAUA,WAAW,CAAA;AAErB,UAAIP;AACJ,UAAIO,QAAQiB,eAAe;AACzBxB,qBAAa/C,yBACX,CAAC6I,SAAS,GACVvF,QAAQT,kBACR;UACEC,QAAQ7B,+BAA+B6H,KAAK,MAAMxF,OAAO;UACzDW,SAAS;UACTM,eAAejB,QAAQiB;UACvBE,kBAAkBvD;QACpB,CACF;MACF,OAAO;AACL6B,qBAAahD,cACX8I,WACAvF,QAAQT,kBACR5B,+BAA+B6H,KAAK,MAAMxF,OAAO,CACnD;MACF;AACA,aAAOnC,YAAY4B,UAAU;IAC/B;AAEM1B,IAAAA,YAAY,SAAZA,WAAsBwH,WAAWvF,SAAS;AAC9CA,gBAAUA,WAAW,CAAA;AAErB,UAAIP;AACJ,UAAIO,QAAQiB,eAAe;AACzBxB,qBAAa/C,yBACX,CAAC6I,SAAS,GACVvF,QAAQT,kBACR;UACEC,QAAQ9B,gCAAgC8H,KAAK,MAAMxF,OAAO;UAC1DW,SAAS;UACTM,eAAejB,QAAQiB;QACzB,CACF;MACF,OAAO;AACLxB,qBAAahD,cACX8I,WACAvF,QAAQT,kBACR7B,gCAAgC8H,KAAK,MAAMxF,OAAO,CACpD;MACF;AAEA,aAAOP;IACT;AAEMzB,IAAAA,aAAa,SAAbA,YAAuBY,MAAMoB,SAAS;AAC1CA,gBAAUA,WAAW,CAAA;AACrB,UAAI,CAACpB,MAAM;AACT,cAAM,IAAI0C,MAAM,kBAAkB;MACpC;AACA,UAAIjF,QAAQqC,KAAKE,MAAMzC,iBAAiB,MAAM,OAAO;AACnD,eAAO;MACT;AACA,aAAOwB,+BAA+BqC,SAASpB,IAAI;IACrD;AAEA,IAAMX,6BAA6C/B,mBAChDoJ,OAAO,QAAQ,EACfnH,KAAK,GAAG;AAELD,IAAAA,cAAc,SAAdA,aAAwBU,MAAMoB,SAAS;AAC3CA,gBAAUA,WAAW,CAAA;AACrB,UAAI,CAACpB,MAAM;AACT,cAAM,IAAI0C,MAAM,kBAAkB;MACpC;AACA,UAAIjF,QAAQqC,KAAKE,MAAMX,0BAA0B,MAAM,OAAO;AAC5D,eAAO;MACT;AACA,aAAOP,gCAAgCsC,SAASpB,IAAI;IACtD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ICrqBM6G,kBA+BAC,mBAQAC,eAIAC,YAKAC,cAKAC,eAIAC,OAMAC,WAsBAC,gBAIAC,iBAeAC,mBAEAC;;;;AA1GN,IAAMX,mBAAmB;MACvBY,cAAYA,SAAAA,aAACC,WAAWC,MAAM;AAC5B,YAAID,UAAUE,SAAS,GAAG;AACxB,cAAMC,aAAaH,UAAUA,UAAUE,SAAS,CAAC;AACjD,cAAIC,eAAeF,MAAM;AACvBE,uBAAWC,MAAK;UAClB;QACF;AAEA,YAAMC,YAAYL,UAAUM,QAAQL,IAAI;AACxC,YAAII,cAAc,IAAI;AACpBL,oBAAUO,KAAKN,IAAI;QACrB,OAAO;AAELD,oBAAUQ,OAAOH,WAAW,CAAC;AAC7BL,oBAAUO,KAAKN,IAAI;QACrB;;MAGFQ,gBAAcA,SAAAA,eAACT,WAAWC,MAAM;AAC9B,YAAMI,YAAYL,UAAUM,QAAQL,IAAI;AACxC,YAAII,cAAc,IAAI;AACpBL,oBAAUQ,OAAOH,WAAW,CAAC;QAC/B;AAEA,YAAIL,UAAUE,SAAS,GAAG;AACxBF,oBAAUA,UAAUE,SAAS,CAAC,EAAEQ,QAAO;QACzC;MACF;IACF;AAEA,IAAMtB,oBAAoB,SAApBA,mBAA8BuB,MAAM;AACxC,aACEA,KAAKC,WACLD,KAAKC,QAAQC,YAAW,MAAO,WAC/B,OAAOF,KAAKG,WAAW;IAE3B;AAEA,IAAMzB,gBAAgB,SAAhBA,eAA0B0B,GAAG;AACjC,cAAOA,MAAAA,QAAAA,MAAAA,SAAAA,SAAAA,EAAGC,SAAQ,aAAYD,MAAAA,QAAAA,MAAAA,SAAAA,SAAAA,EAAGC,SAAQ,UAASD,MAAAA,QAAAA,MAAAA,SAAAA,SAAAA,EAAGE,aAAY;IACnE;AAEA,IAAM3B,aAAa,SAAbA,YAAuByB,GAAG;AAC9B,cAAOA,MAAAA,QAAAA,MAAC,SAAA,SAADA,EAAGC,SAAQ,UAASD,MAAC,QAADA,MAAC,SAAA,SAADA,EAAGE,aAAY;IAC5C;AAGA,IAAM1B,eAAe,SAAfA,cAAyBwB,GAAG;AAChC,aAAOzB,WAAWyB,CAAC,KAAK,CAACA,EAAEG;IAC7B;AAGA,IAAM1B,gBAAgB,SAAhBA,eAA0BuB,GAAG;AACjC,aAAOzB,WAAWyB,CAAC,KAAKA,EAAEG;IAC5B;AAEA,IAAMzB,QAAQ,SAARA,OAAkB0B,IAAI;AAC1B,aAAOC,WAAWD,IAAI,CAAC;IACzB;AAIA,IAAMzB,YAAY,SAAZA,WAAsB2B,KAAKF,IAAI;AACnC,UAAIG,MAAM;AAEVD,UAAIE,MAAM,SAAUC,OAAOC,GAAG;AAC5B,YAAIN,GAAGK,KAAK,GAAG;AACbF,gBAAMG;AACN,iBAAO;QACT;AAEA,eAAO;MACT,CAAC;AAED,aAAOH;IACT;AASA,IAAM3B,iBAAiB,SAAjBA,gBAA2B6B,OAAkB;AAAA,eAAAE,OAAAC,UAAAzB,QAAR0B,SAAM,IAAAC,MAAAH,OAAAA,IAAAA,OAAA,IAAA,CAAA,GAAAI,OAAA,GAAAA,OAAAJ,MAAAI,QAAA;AAANF,eAAME,OAAAH,CAAAA,IAAAA,UAAAG,IAAA;MAAA;AAC/C,aAAO,OAAON,UAAU,aAAaA,MAAKO,MAAIH,QAAAA,MAAM,IAAIJ;IAC1D;AAEA,IAAM5B,kBAAkB,SAAlBA,iBAA4BoC,OAAO;AAQvC,aAAOA,MAAMC,OAAOC,cAAc,OAAOF,MAAMG,iBAAiB,aAC5DH,MAAMG,aAAY,EAAG,CAAC,IACtBH,MAAMC;IACZ;AAIA,IAAMpC,oBAAoB,CAAA;AAEpBC,IAAAA,kBAAkB,SAAlBA,iBAA4BsC,UAAUC,aAAa;AAGvD,UAAMC,OAAMD,gBAAW,QAAXA,gBAAW,SAAA,SAAXA,YAAaE,aAAYA;AAErC,UAAMvC,aAAYqC,gBAAW,QAAXA,gBAAW,SAAA,SAAXA,YAAarC,cAAaH;AAE5C,UAAM2C,SAAMC,eAAA;QACVC,yBAAyB;QACzBC,mBAAmB;QACnBC,mBAAmB;QACnBrD;QACAC;MAAa,GACV6C,WAAW;AAGhB,UAAMQ,QAAQ;;;QAGZC,YAAY,CAAA;;;;;;;;;;;;;;;;;QAkBZC,iBAAiB,CAAA;;;;;;QAMjBC,gBAAgB,CAAA;QAEhBC,6BAA6B;QAC7BC,yBAAyB;QACzBC,QAAQ;QACRC,QAAQ;;;QAIRC,wBAAwBC;;QAGxBC,gBAAgBD;;AAGlB,UAAIrD;AAUJ,UAAMuD,YAAY,SAAZA,WAAaC,uBAAuBC,YAAYC,kBAAqB;AACzE,eAAOF,yBACLA,sBAAsBC,UAAU,MAAMJ,SACpCG,sBAAsBC,UAAU,IAChClB,OAAOmB,oBAAoBD,UAAU;;AAa3C,UAAME,qBAAqB,SAArBA,oBAA+BC,SAAS7B,OAAO;AACnD,YAAMG,eACJ,QAAOH,UAAAA,QAAAA,UAAK,SAAA,SAALA,MAAOG,kBAAiB,aAC3BH,MAAMG,aAAY,IAClBmB;AAIN,eAAOT,MAAME,gBAAgBrD,UAC3B,SAAAoE,MAAA;AAAA,cAAGC,YAASD,KAATC,WAAWC,gBAAaF,KAAbE;AAAa,iBACzBD,UAAUE,SAASJ,OAAO;;;;WAK1B1B,iBAAAA,QAAAA,iBAAAA,SAAAA,SAAAA,aAAc+B,SAASH,SAAS,MAChCC,cAAcG,KAAK,SAACxD,MAAI;AAAA,mBAAKA,SAASkD;WAAQ;QAAA,CAClD;;AAgBF,UAAMO,mBAAmB,SAAnBA,kBAA6BV,YAAuB;AACxD,YAAIW,cAAc7B,OAAOkB,UAAU;AAEnC,YAAI,OAAOW,gBAAgB,YAAY;AAAA,mBAAAC,QAAA3C,UAAAzB,QAHS0B,SAAM,IAAAC,MAAAyC,QAAAA,IAAAA,QAAA,IAAA,CAAA,GAAAC,QAAA,GAAAA,QAAAD,OAAAC,SAAA;AAAN3C,mBAAM2C,QAAA5C,CAAAA,IAAAA,UAAA4C,KAAA;UAAA;AAIpDF,wBAAcA,YAAWtC,MAAA,QAAIH,MAAM;QACrC;AAEA,YAAIyC,gBAAgB,MAAM;AACxBA,wBAAcf;QAChB;AAEA,YAAI,CAACe,aAAa;AAChB,cAAIA,gBAAgBf,UAAae,gBAAgB,OAAO;AACtD,mBAAOA;UACT;AAGA,gBAAM,IAAIG,MAAK,IAAAC,OACRf,YAAU,8DAAA,CACjB;QACF;AAEA,YAAI/C,OAAO0D;AAEX,YAAI,OAAOA,gBAAgB,UAAU;AACnC1D,iBAAO2B,IAAIoC,cAAcL,WAAW;AACpC,cAAI,CAAC1D,MAAM;AACT,kBAAM,IAAI6D,MAAK,IAAAC,OACRf,YAAU,uCAAA,CACjB;UACF;QACF;AAEA,eAAO/C;;AAGT,UAAMgE,sBAAsB,SAAtBA,uBAAkC;AACtC,YAAIhE,OAAOyD,iBAAiB,cAAc;AAG1C,YAAIzD,SAAS,OAAO;AAClB,iBAAO;QACT;AAEA,YAAIA,SAAS2C,UAAa,CAACsB,YAAYjE,MAAM6B,OAAOqC,eAAe,GAAG;AAEpE,cAAIjB,mBAAmBtB,IAAIwC,aAAa,KAAK,GAAG;AAC9CnE,mBAAO2B,IAAIwC;UACb,OAAO;AACL,gBAAMC,qBAAqBlC,MAAMG,eAAe,CAAC;AACjD,gBAAMgC,oBACJD,sBAAsBA,mBAAmBC;AAG3CrE,mBAAOqE,qBAAqBZ,iBAAiB,eAAe;UAC9D;QACF;AAEA,YAAI,CAACzD,MAAM;AACT,gBAAM,IAAI6D,MACR,8DACF;QACF;AAEA,eAAO7D;;AAGT,UAAMsE,sBAAsB,SAAtBA,uBAAkC;AACtCpC,cAAME,kBAAkBF,MAAMC,WAAWoC,IAAI,SAACnB,WAAc;AAC1D,cAAMC,gBAAgBmB,SAASpB,WAAWvB,OAAOqC,eAAe;AAKhE,cAAMO,iBAAiBC,UAAUtB,WAAWvB,OAAOqC,eAAe;AAElE,cAAMG,oBACJhB,cAAc9D,SAAS,IAAI8D,cAAc,CAAC,IAAIV;AAChD,cAAMgC,mBACJtB,cAAc9D,SAAS,IACnB8D,cAAcA,cAAc9D,SAAS,CAAC,IACtCoD;AAEN,cAAMiC,uBAAuBH,eAAejB,KAAK,SAACxD,MAAI;AAAA,mBACpD6E,WAAW7E,IAAI;UAAC,CAClB;AACA,cAAM8E,sBAAsBL,eACzBM,MAAK,EACLC,QAAO,EACPxB,KAAK,SAACxD,MAAI;AAAA,mBAAK6E,WAAW7E,IAAI;WAAE;AAEnC,cAAMiF,qBAAqB,CAAC,CAAC5B,cAAcG,KACzC,SAACxD,MAAI;AAAA,mBAAKkF,YAAYlF,IAAI,IAAI;UAAC,CACjC;AAEA,iBAAO;YACLoD;YACAC;YACAoB;;YAGAQ;;YAGAZ;;YAEAM;;;;;;;;;YAUAC;;YAEAE;;;;;;;;;YAUAK,kBAAgB,SAAAA,iBAACnF,MAAsB;AAAA,kBAAhBoF,UAAOpE,UAAAzB,SAAA,KAAAyB,UAAA,CAAA,MAAA2B,SAAA3B,UAAA,CAAA,IAAG;AAC/B,kBAAMqE,UAAUhC,cAAc1D,QAAQK,IAAI;AAC1C,kBAAIqF,UAAU,GAAG;AAOf,oBAAID,SAAS;AACX,yBAAOX,eACJM,MAAMN,eAAe9E,QAAQK,IAAI,IAAI,CAAC,EACtCwD,KAAK,SAAC8B,IAAE;AAAA,2BAAKT,WAAWS,EAAE;mBAAE;gBACjC;AAEA,uBAAOb,eACJM,MAAM,GAAGN,eAAe9E,QAAQK,IAAI,CAAC,EACrCgF,QAAO,EACPxB,KAAK,SAAC8B,IAAE;AAAA,yBAAKT,WAAWS,EAAE;iBAAE;cACjC;AAEA,qBAAOjC,cAAcgC,WAAWD,UAAU,IAAI,GAAG;YACnD;;QAEJ,CAAC;AAEDlD,cAAMG,iBAAiBH,MAAME,gBAAgBmD,OAC3C,SAACC,OAAK;AAAA,iBAAKA,MAAMnC,cAAc9D,SAAS;QAAC,CAC3C;AAGA,YACE2C,MAAMG,eAAe9C,UAAU,KAC/B,CAACkE,iBAAiB,eAAe,GACjC;AACA,gBAAM,IAAII,MACR,qGACF;QACF;AASA,YACE3B,MAAME,gBAAgBoB,KAAK,SAACiC,GAAC;AAAA,iBAAKA,EAAER;SAAmB,KACvD/C,MAAME,gBAAgB7C,SAAS,GAC/B;AACA,gBAAM,IAAIsE,MACR,+KACF;QACF;;AAGF,UAAM6B,WAAW,SAAXA,UAAqB1F,MAAM;AAC/B,YAAIA,SAAS,OAAO;AAClB;QACF;AAEA,YAAIA,SAAS2B,IAAIwC,eAAe;AAC9B;QACF;AAEA,YAAI,CAACnE,QAAQ,CAACA,KAAK2F,OAAO;AACxBD,UAAAA,UAAS1B,oBAAmB,CAAE;AAC9B;QACF;AAEAhE,aAAK2F,MAAM;UAAEC,eAAe,CAAC,CAAC/D,OAAO+D;QAAc,CAAC;AAEpD1D,cAAMK,0BAA0BvC;AAEhC,YAAIvB,kBAAkBuB,IAAI,GAAG;AAC3BA,eAAKG,OAAM;QACb;;AAGF,UAAM0F,qBAAqB,SAArBA,oBAA+BC,uBAAuB;AAC1D,YAAM9F,OAAOyD,iBAAiB,kBAAkBqC,qBAAqB;AACrE,eAAO9F,OAAOA,OAAOA,SAAS,QAAQ,QAAQ8F;;AAchD,UAAMC,kBAAkB,SAAlBA,iBAAeC,OAAoD;AAAA,YAArC1E,SAAM0E,MAAN1E,QAAQD,QAAK2E,MAAL3E,OAAK4E,mBAAAD,MAAEE,YAAAA,aAAUD,qBAAG,SAAA,QAAKA;AACnE3E,iBAASA,UAAUrC,gBAAgBoC,KAAK;AACxCiD,4BAAmB;AAEnB,YAAI6B,kBAAkB;AAEtB,YAAIjE,MAAMG,eAAe9C,SAAS,GAAG;AAInC,cAAM6G,iBAAiBnD,mBAAmB3B,QAAQD,KAAK;AACvD,cAAMgF,iBACJD,kBAAkB,IAAIlE,MAAME,gBAAgBgE,cAAc,IAAIzD;AAEhE,cAAIyD,iBAAiB,GAAG;AAGtB,gBAAIF,YAAY;AAEdC,gCACEjE,MAAMG,eAAeH,MAAMG,eAAe9C,SAAS,CAAC,EACjDoF;YACP,OAAO;AAELwB,gCAAkBjE,MAAMG,eAAe,CAAC,EAAEgC;YAC5C;qBACS6B,YAAY;AAIrB,gBAAII,oBAAoBvH,UACtBmD,MAAMG,gBACN,SAAAkE,OAAA;AAAA,kBAAGlC,oBAAiBkC,MAAjBlC;AAAiB,qBAAO/C,WAAW+C;YAAiB,CACzD;AAEA,gBACEiC,oBAAoB,MACnBD,eAAejD,cAAc9B,UAC3B2C,YAAY3C,QAAQO,OAAOqC,eAAe,KACzC,CAACW,WAAWvD,QAAQO,OAAOqC,eAAe,KAC1C,CAACmC,eAAelB,iBAAiB7D,QAAQ,KAAK,IAClD;AAOAgF,kCAAoBF;YACtB;AAEA,gBAAIE,qBAAqB,GAAG;AAI1B,kBAAME,wBACJF,sBAAsB,IAClBpE,MAAMG,eAAe9C,SAAS,IAC9B+G,oBAAoB;AAE1B,kBAAMG,mBAAmBvE,MAAMG,eAAemE,qBAAqB;AAEnEL,gCACEjB,YAAY5D,MAAM,KAAK,IACnBmF,iBAAiB9B,mBACjB8B,iBAAiB3B;YACzB,WAAW,CAACnG,WAAW0C,KAAK,GAAG;AAG7B8E,gCAAkBE,eAAelB,iBAAiB7D,QAAQ,KAAK;YACjE;UACF,OAAO;AAIL,gBAAIoF,mBAAmB3H,UACrBmD,MAAMG,gBACN,SAAAsE,OAAA;AAAA,kBAAGhC,mBAAgBgC,MAAhBhC;AAAgB,qBAAOrD,WAAWqD;YAAgB,CACvD;AAEA,gBACE+B,mBAAmB,MAClBL,eAAejD,cAAc9B,UAC3B2C,YAAY3C,QAAQO,OAAOqC,eAAe,KACzC,CAACW,WAAWvD,QAAQO,OAAOqC,eAAe,KAC1C,CAACmC,eAAelB,iBAAiB7D,MAAM,IAC3C;AAOAoF,iCAAmBN;YACrB;AAEA,gBAAIM,oBAAoB,GAAG;AAIzB,kBAAMF,yBACJE,qBAAqBxE,MAAMG,eAAe9C,SAAS,IAC/C,IACAmH,mBAAmB;AAEzB,kBAAMD,oBAAmBvE,MAAMG,eAAemE,sBAAqB;AAEnEL,gCACEjB,YAAY5D,MAAM,KAAK,IACnBmF,kBAAiBpC,oBACjBoC,kBAAiB7B;YACzB,WAAW,CAACjG,WAAW0C,KAAK,GAAG;AAG7B8E,gCAAkBE,eAAelB,iBAAiB7D,MAAM;YAC1D;UACF;QACF,OAAO;AAGL6E,4BAAkB1C,iBAAiB,eAAe;QACpD;AAEA,eAAO0C;;AAKT,UAAMS,mBAAmB,SAAnBA,kBAA6BxG,GAAG;AACpC,YAAMkB,SAASrC,gBAAgBmB,CAAC;AAEhC,YAAI6C,mBAAmB3B,QAAQlB,CAAC,KAAK,GAAG;AAEtC;QACF;AAEA,YAAIpB,eAAe6C,OAAOgF,yBAAyBzG,CAAC,GAAG;AAErDd,eAAKwH,WAAW;;;;;;;YAOdC,aAAalF,OAAOE;UACtB,CAAC;AACD;QACF;AAKA,YAAI/C,eAAe6C,OAAOmF,mBAAmB5G,CAAC,GAAG;AAE/C;QACF;AAGAA,UAAE6G,eAAc;;AAOlB,UAAMC,eAAe,SAAfA,cAAyB7F,OAAO;AACpC,YAAMC,SAASrC,gBAAgBoC,KAAK;AACpC,YAAM8F,kBAAkBlE,mBAAmB3B,QAAQD,KAAK,KAAK;AAG7D,YAAI8F,mBAAmB7F,kBAAkB8F,UAAU;AACjD,cAAID,iBAAiB;AACnBjF,kBAAMK,0BAA0BjB;UAClC;QACF,OAAO;AAELD,gBAAMgG,yBAAwB;AAK9B,cAAIC;AACJ,cAAIC,sBAAsB;AAC1B,cAAIrF,MAAMK,yBAAyB;AACjC,gBAAI2C,YAAYhD,MAAMK,uBAAuB,IAAI,GAAG;AAElD,kBAAMiF,kBAAkBvE,mBACtBf,MAAMK,uBACR;AAKA,kBAAQc,gBAAkBnB,MAAME,gBAAgBoF,eAAe,EAAvDnE;AACR,kBAAIA,cAAc9D,SAAS,GAAG;AAE5B,oBAAMkI,YAAYpE,cAActE,UAC9B,SAACiB,MAAI;AAAA,yBAAKA,SAASkC,MAAMK;gBAAuB,CAClD;AACA,oBAAIkF,aAAa,GAAG;AAClB,sBAAI5F,OAAOjD,aAAasD,MAAMU,cAAc,GAAG;AAC7C,wBAAI6E,YAAY,IAAIpE,cAAc9D,QAAQ;AACxC+H,iCAAWjE,cAAcoE,YAAY,CAAC;AACtCF,4CAAsB;oBACxB;kBAGF,OAAO;AACL,wBAAIE,YAAY,KAAK,GAAG;AACtBH,iCAAWjE,cAAcoE,YAAY,CAAC;AACtCF,4CAAsB;oBACxB;kBAGF;gBAEF;cACF;YAKF,OAAO;AAKL,kBACE,CAACrF,MAAME,gBAAgBsF,KAAK,SAACjC,GAAC;AAAA,uBAC5BA,EAAEpC,cAAcqE,KAAK,SAACC,GAAC;AAAA,yBAAKzC,YAAYyC,CAAC,IAAI;iBAAE;cAAA,CACjD,GACA;AAIAJ,sCAAsB;cACxB;YACF;UACF,OAAO;AAKLA,kCAAsB;UACxB;AAEA,cAAIA,qBAAqB;AACvBD,uBAAWvB,gBAAgB;;;cAGzBzE,QAAQY,MAAMK;cACd2D,YAAYrE,OAAOhD,cAAcqD,MAAMU,cAAc;YACvD,CAAC;UACH;AAEA,cAAI0E,UAAU;AACZ5B,qBAAS4B,QAAQ;UACnB,OAAO;AACL5B,qBAASxD,MAAMK,2BAA2ByB,oBAAmB,CAAE;UACjE;QACF;AAEA9B,cAAMU,iBAAiBD;;AAOzB,UAAMiF,cAAc,SAAdA,aAAwBvG,OAA2B;AAAA,YAApB6E,aAAUlF,UAAAzB,SAAA,KAAAyB,UAAA,CAAA,MAAA2B,SAAA3B,UAAA,CAAA,IAAG;AAChDkB,cAAMU,iBAAiBvB;AAEvB,YAAM8E,kBAAkBJ,gBAAgB;UAAE1E;UAAO6E;QAAW,CAAC;AAC7D,YAAIC,iBAAiB;AACnB,cAAIxH,WAAW0C,KAAK,GAAG;AAKrBA,kBAAM4F,eAAc;UACtB;AACAvB,mBAASS,eAAe;QAC1B;;AAIF,UAAM0B,WAAW,SAAXA,UAAqBxG,OAAO;AAChC,YACE3C,cAAc2C,KAAK,KACnBrC,eAAe6C,OAAOG,mBAAmBX,KAAK,MAAM,OACpD;AACAA,gBAAM4F,eAAc;AACpB3H,eAAKwH,WAAU;AACf;QACF;AAEA,YAAIjF,OAAOjD,aAAayC,KAAK,KAAKQ,OAAOhD,cAAcwC,KAAK,GAAG;AAC7DuG,sBAAYvG,OAAOQ,OAAOhD,cAAcwC,KAAK,CAAC;QAChD;;AAGF,UAAMyG,aAAa,SAAbA,YAAuB1H,GAAG;AAC9B,YAAMkB,SAASrC,gBAAgBmB,CAAC;AAEhC,YAAI6C,mBAAmB3B,QAAQlB,CAAC,KAAK,GAAG;AACtC;QACF;AAEA,YAAIpB,eAAe6C,OAAOgF,yBAAyBzG,CAAC,GAAG;AACrD;QACF;AAEA,YAAIpB,eAAe6C,OAAOmF,mBAAmB5G,CAAC,GAAG;AAC/C;QACF;AAEAA,UAAE6G,eAAc;AAChB7G,UAAEiH,yBAAwB;;AAO5B,UAAMU,eAAe,SAAfA,gBAA2B;AAC/B,YAAI,CAAC7F,MAAMM,QAAQ;AACjB;QACF;AAGAhE,yBAAiBY,aAAaC,WAAWC,IAAI;AAI7C4C,cAAMQ,yBAAyBb,OAAOI,oBAClCnD,MAAM,WAAY;AAChB4G,mBAAS1B,oBAAmB,CAAE;QAChC,CAAC,IACD0B,SAAS1B,oBAAmB,CAAE;AAElCrC,YAAIqG,iBAAiB,WAAWd,cAAc,IAAI;AAClDvF,YAAIqG,iBAAiB,aAAapB,kBAAkB;UAClDqB,SAAS;UACTC,SAAS;QACX,CAAC;AACDvG,YAAIqG,iBAAiB,cAAcpB,kBAAkB;UACnDqB,SAAS;UACTC,SAAS;QACX,CAAC;AACDvG,YAAIqG,iBAAiB,SAASF,YAAY;UACxCG,SAAS;UACTC,SAAS;QACX,CAAC;AACDvG,YAAIqG,iBAAiB,WAAWH,UAAU;UACxCI,SAAS;UACTC,SAAS;QACX,CAAC;AAED,eAAO5I;;AAGT,UAAM6I,kBAAkB,SAAlBA,mBAA8B;AAClC,YAAI,CAACjG,MAAMM,QAAQ;AACjB;QACF;AAEAb,YAAIyG,oBAAoB,WAAWlB,cAAc,IAAI;AACrDvF,YAAIyG,oBAAoB,aAAaxB,kBAAkB,IAAI;AAC3DjF,YAAIyG,oBAAoB,cAAcxB,kBAAkB,IAAI;AAC5DjF,YAAIyG,oBAAoB,SAASN,YAAY,IAAI;AACjDnG,YAAIyG,oBAAoB,WAAWP,UAAU,IAAI;AAEjD,eAAOvI;;AAOT,UAAM+I,kBAAkB,SAAlBA,iBAA4BC,WAAW;AAC3C,YAAMC,uBAAuBD,UAAUZ,KAAK,SAAUc,UAAU;AAC9D,cAAMC,eAAevH,MAAMwH,KAAKF,SAASC,YAAY;AACrD,iBAAOA,aAAaf,KAAK,SAAU1H,MAAM;AACvC,mBAAOA,SAASkC,MAAMK;UACxB,CAAC;QACH,CAAC;AAID,YAAIgG,sBAAsB;AACxB7C,mBAAS1B,oBAAmB,CAAE;QAChC;;AAKF,UAAM2E,mBACJ,OAAOC,WAAW,eAAe,sBAAsBA,SACnD,IAAIC,iBAAiBR,eAAe,IACpC1F;AAEN,UAAMmG,sBAAsB,SAAtBA,uBAAkC;AACtC,YAAI,CAACH,kBAAkB;AACrB;QACF;AAEAA,yBAAiBI,WAAU;AAC3B,YAAI7G,MAAMM,UAAU,CAACN,MAAMO,QAAQ;AACjCP,gBAAMC,WAAWoC,IAAI,SAAUnB,WAAW;AACxCuF,6BAAiBK,QAAQ5F,WAAW;cAClC6F,SAAS;cACTC,WAAW;YACb,CAAC;UACH,CAAC;QACH;;AAOF5J,aAAO;QACL,IAAIkD,SAAS;AACX,iBAAON,MAAMM;;QAGf,IAAIC,SAAS;AACX,iBAAOP,MAAMO;;QAGf0G,UAAQ,SAAAA,SAACC,iBAAiB;AACxB,cAAIlH,MAAMM,QAAQ;AAChB,mBAAO;UACT;AAEA,cAAM6G,aAAaxG,UAAUuG,iBAAiB,YAAY;AAC1D,cAAME,iBAAiBzG,UAAUuG,iBAAiB,gBAAgB;AAClE,cAAMG,oBAAoB1G,UAAUuG,iBAAiB,mBAAmB;AAExE,cAAI,CAACG,mBAAmB;AACtBjF,gCAAmB;UACrB;AAEApC,gBAAMM,SAAS;AACfN,gBAAMO,SAAS;AACfP,gBAAMI,8BAA8BX,IAAIwC;AAExCkF,yBAAAA,QAAAA,eAAAA,SAAAA,SAAAA,WAAU;AAEV,cAAMG,mBAAmB,SAAnBA,oBAAyB;AAC7B,gBAAID,mBAAmB;AACrBjF,kCAAmB;YACrB;AACAyD,yBAAY;AACZe,gCAAmB;AACnBQ,+BAAAA,QAAAA,mBAAAA,SAAAA,SAAAA,eAAc;;AAGhB,cAAIC,mBAAmB;AACrBA,8BAAkBrH,MAAMC,WAAW2B,OAAM,CAAE,EAAE2F,KAC3CD,kBACAA,gBACF;AACA,mBAAO;UACT;AAEAA,2BAAgB;AAChB,iBAAO;;QAGT1C,YAAU,SAAAA,WAAC4C,mBAAmB;AAC5B,cAAI,CAACxH,MAAMM,QAAQ;AACjB,mBAAO;UACT;AAEA,cAAMmH,UAAO7H,eAAA;YACX8H,cAAc/H,OAAO+H;YACrBC,kBAAkBhI,OAAOgI;YACzBC,qBAAqBjI,OAAOiI;UAAmB,GAC5CJ,iBAAiB;AAGtBK,uBAAa7H,MAAMQ,sBAAsB;AACzCR,gBAAMQ,yBAAyBC;AAE/BwF,0BAAe;AACfjG,gBAAMM,SAAS;AACfN,gBAAMO,SAAS;AACfqG,8BAAmB;AAEnBtK,2BAAiBsB,eAAeT,WAAWC,IAAI;AAE/C,cAAMsK,eAAe/G,UAAU8G,SAAS,cAAc;AACtD,cAAME,mBAAmBhH,UAAU8G,SAAS,kBAAkB;AAC9D,cAAMG,sBAAsBjH,UAAU8G,SAAS,qBAAqB;AACpE,cAAM5C,cAAclE,UAClB8G,SACA,eACA,yBACF;AAEAC,2BAAAA,QAAAA,iBAAAA,SAAAA,SAAAA,aAAY;AAEZ,cAAMI,qBAAqB,SAArBA,sBAA2B;AAC/BlL,kBAAM,WAAM;AACV,kBAAIiI,aAAa;AACfrB,yBAASG,mBAAmB3D,MAAMI,2BAA2B,CAAC;cAChE;AACAuH,mCAAAA,QAAAA,qBAAAA,SAAAA,SAAAA,iBAAgB;YAClB,CAAC;;AAGH,cAAI9C,eAAe+C,qBAAqB;AACtCA,gCACEjE,mBAAmB3D,MAAMI,2BAA2B,CACtD,EAAEmH,KAAKO,oBAAoBA,kBAAkB;AAC7C,mBAAO;UACT;AAEAA,6BAAkB;AAClB,iBAAO;;QAGTvK,OAAK,SAAAA,MAACwK,cAAc;AAClB,cAAI/H,MAAMO,UAAU,CAACP,MAAMM,QAAQ;AACjC,mBAAO;UACT;AAEA,cAAM0H,UAAUrH,UAAUoH,cAAc,SAAS;AACjD,cAAME,cAActH,UAAUoH,cAAc,aAAa;AAEzD/H,gBAAMO,SAAS;AACfyH,sBAAAA,QAAAA,YAAAA,SAAAA,SAAAA,QAAO;AAEP/B,0BAAe;AACfW,8BAAmB;AAEnBqB,0BAAAA,QAAAA,gBAAAA,SAAAA,SAAAA,YAAW;AACX,iBAAO;;QAGTpK,SAAO,SAAAA,QAACqK,gBAAgB;AACtB,cAAI,CAAClI,MAAMO,UAAU,CAACP,MAAMM,QAAQ;AAClC,mBAAO;UACT;AAEA,cAAM6H,YAAYxH,UAAUuH,gBAAgB,WAAW;AACvD,cAAME,gBAAgBzH,UAAUuH,gBAAgB,eAAe;AAE/DlI,gBAAMO,SAAS;AACf4H,wBAAAA,QAAAA,cAAAA,SAAAA,SAAAA,UAAS;AAET/F,8BAAmB;AACnByD,uBAAY;AACZe,8BAAmB;AAEnBwB,4BAAAA,QAAAA,kBAAAA,SAAAA,SAAAA,cAAa;AACb,iBAAO;;QAGTC,yBAAuB,SAAAA,wBAACC,mBAAmB;AACzC,cAAMC,kBAAkB,CAAA,EAAG3G,OAAO0G,iBAAiB,EAAEjF,OAAOmF,OAAO;AAEnExI,gBAAMC,aAAasI,gBAAgBlG,IAAI,SAACrB,SAAO;AAAA,mBAC7C,OAAOA,YAAY,WAAWvB,IAAIoC,cAAcb,OAAO,IAAIA;UAAO,CACpE;AAEA,cAAIhB,MAAMM,QAAQ;AAChB8B,gCAAmB;UACrB;AAEAwE,8BAAmB;AAEnB,iBAAO;QACT;;AAIFxJ,WAAKiL,wBAAwB9I,QAAQ;AAErC,aAAOnC;IACT;;;;;AC9gCA;AAAA;AAEA,aAAS,QAAQ,KAAK;AAAE;AAA2B,aAAO,UAAU,cAAc,OAAO,UAAU,YAAY,OAAO,OAAO,WAAW,SAAUqL,MAAK;AAAE,eAAO,OAAOA;AAAA,MAAK,IAAI,SAAUA,MAAK;AAAE,eAAOA,QAAO,cAAc,OAAO,UAAUA,KAAI,gBAAgB,UAAUA,SAAQ,OAAO,YAAY,WAAW,OAAOA;AAAA,MAAK,GAAG,QAAQ,GAAG;AAAA,IAAG;AAC/U,aAAS,gBAAgB,UAAU,aAAa;AAAE,UAAI,EAAE,oBAAoB,cAAc;AAAE,cAAM,IAAI,UAAU,mCAAmC;AAAA,MAAG;AAAA,IAAE;AACxJ,aAAS,kBAAkB,QAAQ,OAAO;AAAE,eAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AAAE,YAAI,aAAa,MAAM,CAAC;AAAG,mBAAW,aAAa,WAAW,cAAc;AAAO,mBAAW,eAAe;AAAM,YAAI,WAAW;AAAY,qBAAW,WAAW;AAAM,eAAO,eAAe,QAAQC,gBAAe,WAAW,GAAG,GAAG,UAAU;AAAA,MAAG;AAAA,IAAE;AAC5U,aAAS,aAAa,aAAa,YAAY,aAAa;AAAE,UAAI;AAAY,0BAAkB,YAAY,WAAW,UAAU;AAAG,UAAI;AAAa,0BAAkB,aAAa,WAAW;AAAG,aAAO,eAAe,aAAa,aAAa,EAAE,UAAU,MAAM,CAAC;AAAG,aAAO;AAAA,IAAa;AAC5R,aAAS,UAAU,UAAU,YAAY;AAAE,UAAI,OAAO,eAAe,cAAc,eAAe,MAAM;AAAE,cAAM,IAAI,UAAU,oDAAoD;AAAA,MAAG;AAAE,eAAS,YAAY,OAAO,OAAO,cAAc,WAAW,WAAW,EAAE,aAAa,EAAE,OAAO,UAAU,UAAU,MAAM,cAAc,KAAK,EAAE,CAAC;AAAG,aAAO,eAAe,UAAU,aAAa,EAAE,UAAU,MAAM,CAAC;AAAG,UAAI;AAAY,wBAAgB,UAAU,UAAU;AAAA,IAAG;AACnc,aAAS,gBAAgB,GAAG,GAAG;AAAE,wBAAkB,OAAO,iBAAiB,OAAO,eAAe,KAAK,IAAI,SAASC,iBAAgBC,IAAGC,IAAG;AAAE,QAAAD,GAAE,YAAYC;AAAG,eAAOD;AAAA,MAAG;AAAG,aAAO,gBAAgB,GAAG,CAAC;AAAA,IAAG;AACvM,aAAS,aAAa,SAAS;AAAE,UAAI,4BAA4B,0BAA0B;AAAG,aAAO,SAAS,uBAAuB;AAAE,YAAI,QAAQ,gBAAgB,OAAO,GAAG;AAAQ,YAAI,2BAA2B;AAAE,cAAI,YAAY,gBAAgB,IAAI,EAAE;AAAa,mBAAS,QAAQ,UAAU,OAAO,WAAW,SAAS;AAAA,QAAG,OAAO;AAAE,mBAAS,MAAM,MAAM,MAAM,SAAS;AAAA,QAAG;AAAE,eAAO,2BAA2B,MAAM,MAAM;AAAA,MAAG;AAAA,IAAG;AACxa,aAAS,2BAA2B,MAAM,MAAM;AAAE,UAAI,SAAS,QAAQ,IAAI,MAAM,YAAY,OAAO,SAAS,aAAa;AAAE,eAAO;AAAA,MAAM,WAAW,SAAS,QAAQ;AAAE,cAAM,IAAI,UAAU,0DAA0D;AAAA,MAAG;AAAE,aAAO,uBAAuB,IAAI;AAAA,IAAG;AAC/R,aAAS,uBAAuB,MAAM;AAAE,UAAI,SAAS,QAAQ;AAAE,cAAM,IAAI,eAAe,2DAA2D;AAAA,MAAG;AAAE,aAAO;AAAA,IAAM;AACrK,aAAS,4BAA4B;AAAE,UAAI,OAAO,YAAY,eAAe,CAAC,QAAQ;AAAW,eAAO;AAAO,UAAI,QAAQ,UAAU;AAAM,eAAO;AAAO,UAAI,OAAO,UAAU;AAAY,eAAO;AAAM,UAAI;AAAE,gBAAQ,UAAU,QAAQ,KAAK,QAAQ,UAAU,SAAS,CAAC,GAAG,WAAY;AAAA,QAAC,CAAC,CAAC;AAAG,eAAO;AAAA,MAAM,SAAS,GAAG;AAAE,eAAO;AAAA,MAAO;AAAA,IAAE;AACxU,aAAS,gBAAgB,GAAG;AAAE,wBAAkB,OAAO,iBAAiB,OAAO,eAAe,KAAK,IAAI,SAASE,iBAAgBF,IAAG;AAAE,eAAOA,GAAE,aAAa,OAAO,eAAeA,EAAC;AAAA,MAAG;AAAG,aAAO,gBAAgB,CAAC;AAAA,IAAG;AACnN,aAASG,iBAAgB,KAAK,KAAK,OAAO;AAAE,YAAML,gBAAe,GAAG;AAAG,UAAI,OAAO,KAAK;AAAE,eAAO,eAAe,KAAK,KAAK,EAAE,OAAc,YAAY,MAAM,cAAc,MAAM,UAAU,KAAK,CAAC;AAAA,MAAG,OAAO;AAAE,YAAI,GAAG,IAAI;AAAA,MAAO;AAAE,aAAO;AAAA,IAAK;AAC3O,aAASA,gBAAe,KAAK;AAAE,UAAI,MAAMM,cAAa,KAAK,QAAQ;AAAG,aAAO,QAAQ,GAAG,MAAM,WAAW,MAAM,OAAO,GAAG;AAAA,IAAG;AAC5H,aAASA,cAAa,OAAO,MAAM;AAAE,UAAI,QAAQ,KAAK,MAAM,YAAY,UAAU;AAAM,eAAO;AAAO,UAAI,OAAO,MAAM,OAAO,WAAW;AAAG,UAAI,SAAS,QAAW;AAAE,YAAI,MAAM,KAAK,KAAK,OAAO,QAAQ,SAAS;AAAG,YAAI,QAAQ,GAAG,MAAM;AAAU,iBAAO;AAAK,cAAM,IAAI,UAAU,8CAA8C;AAAA,MAAG;AAAE,cAAQ,SAAS,WAAW,SAAS,QAAQ,KAAK;AAAA,IAAG;AAC5X,QAAI,QAAQ;AACZ,QAAI,YAAY;AAChB,QAAI,WAAW;AAAf,QACEC,mBAAkB,SAAS;AAC7B,QAAI,YAAY;AAAhB,QACEC,eAAc,UAAU;AAC1B,QAAI,YAAyB,SAAU,kBAAkB;AACvD,gBAAUC,YAAW,gBAAgB;AACrC,UAAI,SAAS,aAAaA,UAAS;AACnC,eAASA,WAAU,OAAO;AACxB,YAAI;AACJ,wBAAgB,MAAMA,UAAS;AAC/B,gBAAQ,OAAO,KAAK,MAAM,KAAK;AAc/B,QAAAJ,iBAAgB,uBAAuB,KAAK,GAAG,oBAAoB,SAAUK,aAAY;AACvF,cAAI;AAEJ,cAAI,eAAe,wBAAwB,KAAK,gBAAgBA,WAAU,OAAO,QAAQ,0BAA0B,SAAS,wBAAwB,KAAK,gBAAgBA,WAAU;AACnL,cAAI,OAAO,gBAAgB,YAAY;AACrC,qBAAS,OAAO,UAAU,QAAQ,SAAS,IAAI,MAAM,OAAO,IAAI,OAAO,IAAI,CAAC,GAAG,OAAO,GAAG,OAAO,MAAM,QAAQ;AAC5G,qBAAO,OAAO,CAAC,IAAI,UAAU,IAAI;AAAA,YACnC;AACA,0BAAc,YAAY,MAAM,QAAQ,MAAM;AAAA,UAChD;AACA,cAAI,gBAAgB,MAAM;AACxB,0BAAc;AAAA,UAChB;AAEA,cAAI,CAAC,aAAa;AAChB,gBAAI,gBAAgB,UAAa,gBAAgB,OAAO;AACtD,qBAAO;AAAA,YACT;AAGA,kBAAM,IAAI,MAAM,IAAI,OAAOA,aAAY,8DAA8D,CAAC;AAAA,UACxG;AACA,cAAI,OAAO;AAEX,cAAI,OAAO,gBAAgB,UAAU;AACnC,gBAAI;AACJ,oBAAQ,oBAAoB,KAAK,YAAY,OAAO,QAAQ,sBAAsB,SAAS,SAAS,kBAAkB,cAAc,WAAW;AAC/I,gBAAI,CAAC,MAAM;AACT,oBAAM,IAAI,MAAM,IAAI,OAAOA,aAAY,uCAAuC,CAAC;AAAA,YACjF;AAAA,UACF;AACA,iBAAO;AAAA,QACT,CAAC;AACD,cAAM,mBAAmB,MAAM,iBAAiB,KAAK,uBAAuB,KAAK,CAAC;AAClF,cAAM,uBAAuB,MAAM,qBAAqB,KAAK,uBAAuB,KAAK,CAAC;AAC1F,cAAM,gCAAgC,MAAM,8BAA8B,KAAK,uBAAuB,KAAK,CAAC;AAG5G,cAAM,kBAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAMtB,yBAAyB;AAAA;AAAA;AAAA,UAGzB,qBAAqB;AAAA,UACrB,cAAc,MAAM;AAAA,UACpB,kBAAkB,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA,UAKxB,yBAAyB,MAAM;AAAA,QACjC;AAGA,cAAM,kBAAkB;AAAA;AAAA;AAAA,UAGtB,yBAAyB;AAAA;AAAA;AAAA;AAAA,UAIzB,cAAc;AAAA,UACd,kBAAkB;AAAA,UAClB,qBAAqB;AAAA;AAAA,UAErB,yBAAyB;AAAA,QAC3B;AACA,YAAI,mBAAmB,MAAM;AAC7B,iBAAS,cAAc,kBAAkB;AACvC,cAAI,CAAC,OAAO,UAAU,eAAe,KAAK,kBAAkB,UAAU,GAAG;AACvE;AAAA,UACF;AACA,cAAI,eAAe,6BAA6B,eAAe,kBAAkB,eAAe,sBAAsB,eAAe,yBAAyB,eAAe,2BAA2B;AACtM,kBAAM,gBAAgB,UAAU,IAAI,iBAAiB,UAAU;AAC/D;AAAA,UACF;AAEA,gBAAM,gBAAgB,UAAU,IAAI,iBAAiB,UAAU;AAAA,QACjE;AAMA,cAAM,eAAe;AAKrB,cAAM,oBAAoB,MAAM,qBAAqB,CAAC;AAGtD,cAAM,sBAAsB;AAC5B,eAAO;AAAA,MACT;AAQA,mBAAaD,YAAW,CAAC;AAAA,QACvB,KAAK;AAAA,QACL,OAAO,SAAS,cAAc;AAE5B,iBAAO,KAAK,MAAM,iBAAiB,aAAa,OAAO,aAAa,cAAc,WAAW;AAAA,QAC/F;AAAA,MACF,GAAG;AAAA,QACD,KAAK;AAAA,QACL,OAAO,SAAS,qBAAqB;AACnC,cAAI,OAAO,KAAK,iBAAiB,kBAAkB,KAAK,wBAAwB;AAChF,iBAAO,OAAO,OAAO,SAAS,QAAQ,QAAQ,KAAK;AAAA,QACrD;AAAA;AAAA,MAGF,GAAG;AAAA,QACD,KAAK;AAAA,QACL,OAAO,SAAS,wBAAwB;AACtC,cAAI,kBAAkB,KAAK,YAAY;AACvC,cAAI,iBAAiB;AACnB,iBAAK,2BAA2B,gBAAgB;AAAA,UAClD;AAAA,QACF;AAAA,MACF,GAAG;AAAA,QACD,KAAK;AAAA,QACL,OAAO,SAASE,kBAAiB;AAM/B,cAAI,CAAC,KAAK,aAAa,CAAC,KAAK,UAAU,QAAQ;AAC7C;AAAA,UACF;AACA,eAAK,UAAU,WAAW;AAAA;AAAA,YAExB,aAAa;AAAA;AAAA;AAAA,YAGb,qBAAqB;AAAA;AAAA;AAAA,YAGrB,cAAc,KAAK,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAOrC,CAAC;AAAA,QACH;AAAA,MACF,GAAG;AAAA,QACD,KAAK;AAAA,QACL,OAAO,SAAS,8BAA8B,OAAO;AAEnD,cAAI,oBAAoB,OAAO,KAAK,gBAAgB,4BAA4B,aAAa,KAAK,gBAAgB,wBAAwB,KAAK,MAAM,KAAK,IACxJ,KAAK,gBAAgB;AAEvB,cAAI,mBAAmB;AAGrB,iBAAK,eAAe;AAAA,cAClB,QAAQ,MAAM;AAAA,cACd;AAAA,YACF;AAAA,UACF;AACA,iBAAO;AAAA,QACT;AAAA,MACF,GAAG;AAAA,QACD,KAAK;AAAA,QACL,OAAO,SAAS,mBAAmB;AACjC,cAAI,KAAK,gBAAgB,cAAc;AACrC,iBAAK,gBAAgB,aAAa,KAAK,IAAI;AAAA,UAC7C;AAEA,eAAK,eAAe;AAAA,QACtB;AAAA,MACF,GAAG;AAAA,QACD,KAAK;AAAA,QACL,OAAO,SAAS,uBAAuB;AACrC,cAAI,SAAS;AACb,cAAI,qBAAqB,SAASC,sBAAqB;AACrD,gBAAI,kBAAkB,OAAO,mBAAmB;AAChD,gBAAI,iBAAiB,CAAC;AAAA,aAGtB,OAAO,gBAAgB;AAAA,YACvB,oBAAoB,QAAQ,oBAAoB,UAAU,gBAAgB;AAAA,aAE1E,CAAC,OAAO;AAAA,YAER,OAAO,aAAa;AAAA;AAAA;AAAA,YAIpB,CAACJ,aAAY,OAAO,aAAa,QAAQ,OAAO,gBAAgB,eAAe;AAK/E,gBAAI,wBAAwB,OAAO,gBAAgB,eACjD,gBAAgB,0BAA0B,SAAS,QAAQ;AAC7D,gBAAI,gBAAgB;AAElB,8BAAgB,MAAM;AAAA,gBACpB;AAAA,cACF,CAAC;AAAA,YACH;AACA,gBAAI,OAAO,gBAAgB,kBAAkB;AAC3C,qBAAO,gBAAgB,iBAAiB,KAAK,IAAI;AAAA,YACnD;AAEA,mBAAO,eAAe;AAAA,UACxB;AAEA,cAAI,KAAK,gBAAgB,qBAAqB;AAC5C,iBAAK,gBAAgB,oBAAoB,KAAK,MAAM,KAAK,mBAAmB,CAAC,EAC5E,KAAK,oBAAoB,kBAAkB;AAAA,UAC9C,OAAO;AACL,+BAAmB;AAAA,UACrB;AAAA,QACF;AAAA,MACF,GAAG;AAAA,QACD,KAAK;AAAA,QACL,OAAO,SAAS,iBAAiB;AAC/B,cAAI,KAAK,WAAW;AAclB,gBAAI,KAAK,MAAM,UAAU,CAAC,KAAK,UAAU,QAAQ;AAC/C,mBAAK,UAAU,SAAS;AACxB,kBAAI,KAAK,MAAM,QAAQ;AACrB,qBAAK,UAAU,MAAM;AAAA,cACvB;AAAA,YACF;AAAA,UACF,OAAO;AACL,gBAAI,aAAa,KAAK,kBAAkB,KAAK,OAAO;AACpD,gBAAI,YAAY;AAEd,mBAAK,YAAY,KAAK,MAAM,iBAAiB,KAAK,mBAAmB,KAAK,eAAe;AACzF,kBAAI,KAAK,MAAM,QAAQ;AACrB,qBAAK,UAAU,SAAS;AAAA,cAC1B;AACA,kBAAI,KAAK,MAAM,QAAQ;AACrB,qBAAK,UAAU,MAAM;AAAA,cACvB;AAAA,YACF;AAAA,UACF;AAAA,QACF;AAAA,MACF,GAAG;AAAA,QACD,KAAK;AAAA,QACL,OAAO,SAAS,oBAAoB;AAClC,cAAI,KAAK,MAAM,QAAQ;AACrB,iBAAK,eAAe;AAAA,UACtB;AAAA,QAMF;AAAA,MACF,GAAG;AAAA,QACD,KAAK;AAAA,QACL,OAAO,SAAS,mBAAmB,WAAW;AAC5C,cAAI,KAAK,WAAW;AAClB,gBAAI,UAAU,sBAAsB,KAAK,MAAM,mBAAmB;AAChE,mBAAK,UAAU,wBAAwB,KAAK,MAAM,iBAAiB;AAAA,YACrE;AACA,gBAAI,eAAe,CAAC,UAAU,UAAU,KAAK,MAAM;AACnD,gBAAI,iBAAiB,UAAU,UAAU,CAAC,KAAK,MAAM;AACrD,gBAAI,YAAY,CAAC,UAAU,UAAU,KAAK,MAAM;AAChD,gBAAI,cAAc,UAAU,UAAU,CAAC,KAAK,MAAM;AAClD,gBAAI,cAAc;AAChB,mBAAK,sBAAsB;AAC3B,mBAAK,UAAU,SAAS;AAAA,YAC1B;AACA,gBAAI,gBAAgB;AAClB,mBAAK,eAAe;AACpB;AAAA,YACF;AAEA,gBAAI,WAAW;AACb,mBAAK,UAAU,MAAM;AAAA,YACvB;AACA,gBAAI,aAAa;AACf,mBAAK,UAAU,QAAQ;AAAA,YACzB;AAAA,UACF,OAAO;AAML,gBAAI,UAAU,sBAAsB,KAAK,MAAM,mBAAmB;AAChE,mBAAK,oBAAoB,KAAK,MAAM;AAAA,YACtC;AAKA,gBAAI,KAAK,MAAM,QAAQ;AACrB,mBAAK,sBAAsB;AAC3B,mBAAK,eAAe;AAAA,YACtB;AAAA,UACF;AAAA,QACF;AAAA,MACF,GAAG;AAAA,QACD,KAAK;AAAA,QACL,OAAO,SAAS,uBAAuB;AACrC,eAAK,eAAe;AAAA,QACtB;AAAA,MACF,GAAG;AAAA,QACD,KAAK;AAAA,QACL,OAAO,SAAS,SAAS;AACvB,cAAI,SAAS;AACb,cAAI,QAAQ,KAAK,MAAM,WAAW,MAAM,SAAS,KAAK,KAAK,MAAM,QAAQ,IAAI;AAC7E,cAAI,OAAO;AACT,gBAAI,MAAM,QAAQ,MAAM,SAAS,MAAM,UAAU;AAC/C,oBAAM,IAAI,MAAM,mGAAmG;AAAA,YACrH;AACA,gBAAI,cAAc,SAASK,aAAY,SAAS;AAC9C,kBAAI,oBAAoB,OAAO,MAAM;AACrC,kBAAI,OAAO;AACT,oBAAI,OAAO,MAAM,QAAQ,YAAY;AACnC,wBAAM,IAAI,OAAO;AAAA,gBACnB,WAAW,MAAM,KAAK;AACpB,wBAAM,IAAI,UAAU;AAAA,gBACtB;AAAA,cACF;AACA,qBAAO,oBAAoB,oBAAoB,oBAAoB,CAAC,OAAO;AAAA,YAC7E;AACA,gBAAI,eAAe,MAAM,aAAa,OAAO;AAAA,cAC3C,KAAK;AAAA,YACP,CAAC;AACD,mBAAO;AAAA,UACT;AACA,iBAAO;AAAA,QACT;AAAA,MACF,CAAC,CAAC;AACF,aAAOJ;AAAA,IACT,EAAE,MAAM,SAAS;AACjB,QAAI,cAAc,OAAO,YAAY,cAAc,WAAW;AAC9D,cAAU,YAAY;AAAA,MACpB,QAAQ,UAAU;AAAA,MAClB,QAAQ,UAAU;AAAA,MAClB,kBAAkB,UAAU,MAAM;AAAA,QAChC,UAAU,UAAU;AAAA,QACpB,YAAY,UAAU;AAAA,QACtB,gBAAgB,UAAU;AAAA,QAC1B,mBAAmB,UAAU;AAAA,QAC7B,SAAS,UAAU;AAAA,QACnB,aAAa,UAAU;AAAA,QACvB,WAAW,UAAU;AAAA,QACrB,eAAe,UAAU;AAAA,QACzB,cAAc,UAAU;AAAA,QACxB,kBAAkB,UAAU;AAAA,QAC5B,qBAAqB,UAAU;AAAA,QAC/B,cAAc,UAAU,UAAU,CAAC,UAAU,WAAW,WAAW,GAAG,UAAU,QAAQ,UAAU,MAAM,UAAU,IAAI,CAAC;AAAA,QACvH,eAAe,UAAU,UAAU;AAAA,UAAC,UAAU,WAAW,WAAW;AAAA,UAAG,UAAU;AAAA;AAAA,UAEjF,UAAU;AAAA,QAAI,CAAC;AAAA,QACf,mBAAmB,UAAU,UAAU,CAAC,UAAU,MAAM,UAAU,IAAI,CAAC;AAAA,QACvE,yBAAyB,UAAU,UAAU,CAAC,UAAU,MAAM,UAAU,IAAI,CAAC;AAAA,QAC7E,yBAAyB,UAAU;AAAA,QACnC,gBAAgB,UAAU,UAAU,CAAC,UAAU,WAAW,WAAW,GAAG,UAAU,QAAQ,UAAU,MAAM,UAAU,IAAI,CAAC;AAAA,QACzH,mBAAmB,UAAU,UAAU,CAAC,UAAU,MAAM,UAAU,IAAI,CAAC;AAAA,QACvE,eAAe,UAAU;AAAA,QACzB,iBAAiB,UAAU,MAAM;AAAA,UAC/B,cAAc,UAAU,MAAM,CAAC,QAAQ,eAAe,iBAAiB,MAAM,CAAC;AAAA,UAC9E,eAAe,UAAU,UAAU,CAAC,UAAU,MAAM,UAAU,IAAI,CAAC;AAAA,QACrE,CAAC;AAAA,QACD,WAAW,UAAU;AAAA,QACrB,cAAc,UAAU;AAAA,QACxB,eAAe,UAAU;AAAA,MAC3B,CAAC;AAAA,MACD,mBAAmB,UAAU,QAAQ,UAAU,WAAW,WAAW,CAAC;AAAA;AAAA,MAEtE,UAAU,UAAU,UAAU;AAAA,QAAC,UAAU;AAAA;AAAA,QAEzC,UAAU,WAAW,WAAW;AAAA;AAAA,MAChC,CAAC;AAAA;AAAA;AAAA;AAAA,IAKH;AAEA,cAAU,eAAe;AAAA,MACvB,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,kBAAkB,CAAC;AAAA,MACnB,kBAAkBF;AAAA,IACpB;AACA,WAAO,UAAU;AAAA;AAAA;",
  "names": ["candidateSelectors", "candidateSelector", "NoElement", "matches", "getRootNode", "isInert", "isContentEditable", "getCandidates", "getCandidatesIteratively", "hasTabIndex", "getTabIndex", "getSortOrderTabIndex", "sortOrderedTabbables", "isInput", "isHiddenInput", "isDetailsWithSummary", "getCheckedRadio", "isTabbableRadio", "isRadio", "isNonTabbableRadio", "isNodeAttached", "isZeroArea", "isHidden", "isDisabledFromFieldset", "isNodeMatchingSelectorFocusable", "isNodeMatchingSelectorTabbable", "isValidShadowRootTabbable", "sortByOrder", "tabbable", "focusable", "isTabbable", "focusableCandidateSelector", "isFocusable", "join", "Element", "prototype", "msMatchesSelector", "webkitMatchesSelector", "element", "_element$getRootNode", "call", "ownerDocument", "node", "lookUp", "_node$getAttribute", "inertAtt", "getAttribute", "inert", "result", "parentNode", "_node$getAttribute2", "attValue", "el", "includeContainer", "filter", "candidates", "Array", "slice", "apply", "querySelectorAll", "unshift", "elements", "options", "elementsToCheck", "from", "length", "shift", "tagName", "assigned", "assignedElements", "content", "children", "nestedCandidates", "flatten", "push", "scopeParent", "validCandidate", "includes", "shadowRoot", "getShadowRoot", "validShadowRoot", "shadowRootFilter", "isNaN", "parseInt", "Error", "tabIndex", "test", "isScope", "a", "b", "documentOrder", "type", "r", "some", "child", "nodes", "form", "i", "checked", "name", "radioScope", "queryRadios", "radioSet", "window", "CSS", "escape", "err", "console", "error", "message", "_nodeRoot", "nodeRoot", "nodeRootHost", "host", "attached", "_nodeRootHost", "_nodeRootHost$ownerDo", "_node$ownerDocument", "contains", "_nodeRoot2", "_nodeRootHost2", "_nodeRootHost2$ownerD", "_node$getBoundingClie", "getBoundingClientRect", "width", "height", "_ref", "displayCheck", "getComputedStyle", "visibility", "isDirectSummary", "nodeUnderDetails", "parentElement", "originalNode", "rootNode", "assignedSlot", "getClientRects", "disabled", "item", "shadowHostNode", "regularTabbables", "orderedTabbables", "forEach", "candidateTabindex", "sort", "reduce", "acc", "sortable", "concat", "container", "bind", "activeFocusTraps", "isSelectableInput", "isEscapeEvent", "isTabEvent", "isKeyForward", "isKeyBackward", "delay", "findIndex", "valueOrHandler", "getActualTarget", "internalTrapStack", "createFocusTrap", "activateTrap", "trapStack", "trap", "length", "activeTrap", "pause", "trapIndex", "indexOf", "push", "splice", "deactivateTrap", "unpause", "node", "tagName", "toLowerCase", "select", "e", "key", "keyCode", "shiftKey", "fn", "setTimeout", "arr", "idx", "every", "value", "i", "_len", "arguments", "params", "Array", "_key", "apply", "event", "target", "shadowRoot", "composedPath", "elements", "userOptions", "doc", "document", "config", "_objectSpread", "returnFocusOnDeactivate", "escapeDeactivates", "delayInitialFocus", "state", "containers", "containerGroups", "tabbableGroups", "nodeFocusedBeforeActivation", "mostRecentlyFocusedNode", "active", "paused", "delayInitialFocusTimer", "undefined", "recentNavEvent", "getOption", "configOverrideOptions", "optionName", "configOptionName", "findContainerIndex", "element", "_ref", "container", "tabbableNodes", "contains", "includes", "find", "getNodeForOption", "optionValue", "_len2", "_key2", "Error", "concat", "querySelector", "getInitialFocusNode", "isFocusable", "tabbableOptions", "activeElement", "firstTabbableGroup", "firstTabbableNode", "updateTabbableNodes", "map", "tabbable", "focusableNodes", "focusable", "lastTabbableNode", "firstDomTabbableNode", "isTabbable", "lastDomTabbableNode", "slice", "reverse", "posTabIndexesFound", "getTabIndex", "nextTabbableNode", "forward", "nodeIdx", "el", "filter", "group", "g", "tryFocus", "focus", "preventScroll", "getReturnFocusNode", "previousActiveElement", "findNextNavNode", "_ref2", "_ref2$isBackward", "isBackward", "destinationNode", "containerIndex", "containerGroup", "startOfGroupIndex", "_ref3", "destinationGroupIndex", "destinationGroup", "lastOfGroupIndex", "_ref4", "checkPointerDown", "clickOutsideDeactivates", "deactivate", "returnFocus", "allowOutsideClick", "preventDefault", "checkFocusIn", "targetContained", "Document", "stopImmediatePropagation", "nextNode", "navAcrossContainers", "mruContainerIdx", "mruTabIdx", "some", "n", "checkKeyNav", "checkKey", "checkClick", "addListeners", "addEventListener", "capture", "passive", "removeListeners", "removeEventListener", "checkDomRemoval", "mutations", "isFocusedNodeRemoved", "mutation", "removedNodes", "from", "mutationObserver", "window", "MutationObserver", "updateObservedNodes", "disconnect", "observe", "subtree", "childList", "activate", "activateOptions", "onActivate", "onPostActivate", "checkCanFocusTrap", "finishActivation", "then", "deactivateOptions", "options", "onDeactivate", "onPostDeactivate", "checkCanReturnFocus", "clearTimeout", "finishDeactivation", "pauseOptions", "onPause", "onPostPause", "unpauseOptions", "onUnpause", "onPostUnpause", "updateContainerElements", "containerElements", "elementsAsArray", "Boolean", "obj", "_toPropertyKey", "_setPrototypeOf", "o", "p", "_getPrototypeOf", "_defineProperty", "_toPrimitive", "createFocusTrap", "isFocusable", "FocusTrap", "optionName", "deactivateTrap", "finishDeactivation", "callbackRef"]
}
