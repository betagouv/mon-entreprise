import { T } from 'Components'
import { Markdown } from 'Components/utils/markdown'
import { ScrollToTop } from 'Components/utils/Scroll'
import { SitePathsContext } from 'Components/utils/withSitePaths'
import Value from 'Components/Value'
import React, { useContext } from 'react'
import emoji from 'react-easy-emoji'
import { useTranslation } from 'react-i18next'
import { Redirect } from 'react-router-dom'
import Animate from 'Ui/animate'
import { selectSeuilRevenus } from './actions'
import { getTranslatedActivit√© } from './activit√©sData'
import { Activit√©Selection } from './Activit√©sSelection'
import ExceptionsExon√©ration from './ExceptionsExon√©ration'
import NextButton from './NextButton'
import { estExon√©r√©eSelector } from './selectors'
import { StoreContext } from './StoreContext'

export default function Activit√©({
	match: {
		params: { title }
	}
}) {
	const { language } = useTranslation().i18n
	const sitePaths = useContext(SitePathsContext)
	const { state, dispatch } = useContext(StoreContext)
	const activit√© = getTranslatedActivit√©(title, language)
	if (!(title in state)) {
		return <Redirect to={sitePaths.√©conomieCollaborative.index} />
	}

	if (activit√©.activit√©s) {
		return (
			<Animate.fromBottom>
				<ScrollToTop />
				<h1>{activit√©.titre}</h1>
				<p>{activit√©.explication}</p>
				<p>
					<T k="√©conomieCollaborative.activit√©.choix">
						Quelles sont plus pr√©cis√©ment les activit√©s exerc√©es ?
					</T>
				</p>
				<section className="ui__ full-width light-bg">
					<Activit√©Selection
						currentActivit√©={title}
						activit√©s={activit√©.activit√©s.map(({ titre }) => titre)}
					/>
				</section>
			</Animate.fromBottom>
		)
	}

	const seuilRevenus = state[title].seuilRevenus
	const estExon√©r√©e = estExon√©r√©eSelector(title)(state)
	return (
		<section key={title}>
			<ScrollToTop />
			<Animate.fromBottom>
				<h1>
					{emoji(activit√©.ic√¥nes)} {activit√©.titre}
				</h1>
				<Markdown source={activit√©.explication} />
				{activit√©.plateformes && (
					<p className="ui__ notice">
						{emoji('üì± ')}
						{activit√©.plateformes.join(', ')}
					</p>
				)}
				<ExceptionsExon√©ration
					activit√©={title}
					exceptionsExon√©ration={activit√©['exon√©r√©e sauf si']}
				/>

				{estExon√©r√©e ? null : activit√©['seuil pro'] === 0 ? (
					<T k="√©conomieCollaborative.activit√©.pro">
						<h2>Il s'agit d'une activit√© professionnelle</h2>
						<p>
							Les revenus de cette activit√© sont consid√©r√©s comme des{' '}
							<strong>revenus professionnels d√®s le 1er euro gagn√©</strong>.
						</p>
					</T>
				) : activit√©['seuil d√©claration'] === 0 && !activit√©['seuil pro'] ? (
					<T k="√©conomieCollaborative.activit√©.imp√¥t">
						<h2>Vous devez d√©clarez vos revenus aux imp√¥ts</h2>
						<p>Les revenus de cette activit√© sont imposables.</p>
					</T>
				) : (
					<>
						<T k="√©conomieCollaborative.activit√©.revenusAnnuels">
							<h2>Revenus annuels</h2>
							<p>Vos revenus annuels pour cette activit√© sont :</p>
						</T>
						<ul
							key={title}
							css="
								list-style: none;
								padding-left: 0;
							"
							onChange={(e: any) => {
								dispatch(selectSeuilRevenus(title, e.target.value))
							}}
						>
							{activit√©['seuil d√©claration'] &&
								activit√©['seuil d√©claration'] !== 0 && (
									<li>
										<label>
											<input
												type="radio"
												name={title + '.seuilRevenus'}
												value="AUCUN"
												defaultChecked={seuilRevenus === 'AUCUN'}
											/>{' '}
											<T>inf√©rieurs √†</T>{' '}
											<Value maximumFractionDigits={0} unit="‚Ç¨">
												{activit√©['seuil d√©claration']}
											</Value>
										</label>
									</li>
								)}
							<li>
								<label>
									<input
										type="radio"
										name={title + '.seuilRevenus'}
										value="IMPOSITION"
										defaultChecked={seuilRevenus === 'IMPOSITION'}
									/>{' '}
									<T>inf√©rieurs √†</T>{' '}
									<Value maximumFractionDigits={0} unit="‚Ç¨">
										{activit√©['seuil pro']}
									</Value>
								</label>
							</li>
							{activit√©['seuil r√©gime g√©n√©ral'] && (
								<li>
									<label>
										<input
											type="radio"
											name={title + '.seuilRevenus'}
											value="R√âGIME_G√âN√âRAL_DISPONIBLE"
											defaultChecked={
												seuilRevenus === 'R√âGIME_G√âN√âRAL_DISPONIBLE'
											}
										/>{' '}
										<T>sup√©rieurs √†</T>{' '}
										<Value maximumFractionDigits={0} unit="‚Ç¨">
											{activit√©['seuil pro']}
										</Value>
									</label>
								</li>
							)}

							<li>
								<label>
									<input
										type="radio"
										name={title + '.seuilRevenus'}
										value="R√âGIME_G√âN√âRAL_NON_DISPONIBLE"
										defaultChecked={
											seuilRevenus === 'R√âGIME_G√âN√âRAL_NON_DISPONIBLE'
										}
									/>{' '}
									<T>sup√©rieurs √†</T>{' '}
									<Value maximumFractionDigits={0} unit="‚Ç¨">
										{activit√©['seuil r√©gime g√©n√©ral'] || activit√©['seuil pro']}
									</Value>
								</label>
							</li>
						</ul>
					</>
				)}
				<NextButton disabled={!seuilRevenus} activit√©={title} />
			</Animate.fromBottom>
		</section>
	)
}
