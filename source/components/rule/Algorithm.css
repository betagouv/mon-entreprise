/*
	Règles CSS d'affichage des algorithmes
*/

.situationValue {
	display: none;
	border-bottom-left-radius: 3px;
	font-weight: 400;
	color: black;
	font-family: monospace;
}
#rule-rules .name > .situationValue {
	border-bottom: 2px solid white;
	padding-left: 0.4em;
}

#rule-rules.showValues .situationValue {
	display: inline-block;
}

.node.inlineExpression:not(.comparison):not(.negation) {
	padding-left: 0;
	display: flex;
	align-items: baseline;
	flex-direction: row;
	flex-wrap: wrap;
}
.nodeContent {
	margin-right: 0.3em;
}
#rule-rules
	.inlineExpression:not(.comparison):not(.negation)
	> .situationValue {
	font-size: 90%;
	margin-left: 0.3em;
	margin-bottom: 0.6em;
	margin-top: 0.3em;
	align-items: flex-end;
	flex: 1;
	text-align: right;
}

#rule-rules section {
	margin: 1em 0;
}

#rule-content {
	font-size: 90%;
}

#rule-rules #ruleValue {
	font-weight: 400;
	text-align: center;
	font-size: 200%;
	color: inherit;
	margin-bottom: 2em;
	margin-top: 0.4em;
}

#declenchement > ul {
	padding: 0;
	list-style-type: none;
}
#declenchement > ul > li {
	margin-bottom: 1em;
}

.mecanism > .nodeHead {
	border-color: inherit;
}
.mecanism > .nodeHead .name {
	position: absolute;
	top: 0;
	left: 0;
	padding: 0.2em 1em;
	display: block;
	background: #34495e;
	color: white;
	font-weight: 600;
	border-bottom-right-radius: 3px;
}
.mecanism > .nodeHead .name::first-letter {
	text-transform: capitalize;
}
.mecanism > .nodeHead > .situationValue {
	bottom: 0;
	right: 0;
	position: absolute;
	padding: 0.2em 1em;
	border: 1px solid;
	border-color: inherit;
	font-weight: 600;
	border-bottom: none;
	border-right: none;
	border-radius: 0;
	border-top-left-radius: 3px;
}
[data-term-definition] {
	cursor: pointer;
}
[data-term-definition]:hover {
	opacity: 0.8;
}
.ruleProp > .nodeHead .name {
	background: #9b59b6;
}
.mecanism.ruleProp {
	border-color: #9b59b6;
}

.mecanism .properties .key {
	font-weight: 600;
	display: inline-block;
	margin-bottom: 0.6em;
	margin-right: 0.8em;
}

.multiplication > .nodeHead .name {
	background: #2ecc71;
}
.mecanism.multiplication {
	border-color: #2ecc71;
}
.mecanism.multiplication .key {
	color: #2ecc71;
}

.multiplication li .key {
	margin-right: 0.6em;
}

.maximum .description,
.composanteName {
	font-weight: 600;
	margin-bottom: 0.4em;
	margin-left: 1em;
}

.mecanism.conditions > .nodeHead .name {
	background: #3498db;
}
.mecanism.conditions {
	border-color: #3498db;
}

.mecanism .conditions > ul > li {
	margin-bottom: 0.6em;
}

.leaf .situationValue {
	text-align: center;
}

#rule-rules .situationValue.✅ {
	color: #5ab738;
}
#rule-rules .situationValue.✘ {
	color: #f22c40;
}

.variable a {
	color: blue;
	border: 1px solid transparent;
	border-bottom: 1px solid blue;
	text-align: center;
	font-weight: 600;
	font-size: 90%;
	display: inline-block;
	white-space: nowrap;
}

.variable a:hover {
	color: rgb(0, 0, 150) !important;
	border-bottom-color: rgb(0, 0, 150);
}
.variable a:focus {
	border: 1px dotted;
	outline: none;
}

.percentage .name {
	font-size: 110%;
	font-weight: 600;
}

.inlineExpression .operator {
	margin: 0 0.6em;
	vertical-align: middle;
}

.json {
	font-size: 60%;
}

.barème > .nodeHead .name {
	background: #1abc9c;
}

.barème .key {
	color: #1abc9c;
}
.mecanism.barème {
	border-color: #1abc9c;
}

.barème table {
	margin-top: 1em;
	width: 80%;
	text-align: left;
	font-weight: 400;
}
.barème table td {
	padding: 0.1em 0.4em;
}
.barème table tr:first-child {
	font-weight: 600;
}
.barème table tr:nth-child(2n) {
	background: #f1f1f1;
}

.mecanism.inversion li {
	margin-top: 0.6em;
}
.mecanism.minimum > ul,
.mecanism.maximum > ul {
	list-style: disc;
	margin-left: 1em;
}

.composantes > .nodeHead .name {
	background: #3498db;
}
.mecanism.composantes {
	border-color: #3498db;
}
.composantes .composanteName::first-letter {
	text-transform: capitalize;
}

.mecanism ul {
	margin: 0;
	padding: 0;
	list-style-type: none;
}

.mecanism {
	border: 1px solid;
	border-radius: 3px;
	border-color: #34495e;
	padding: 1em;
	padding-top: 1em;
	padding-bottom: 2em;
	position: relative;
	margin-bottom: 2em;
}

.mecanism > :not(.mecanism) {
	padding-top: 1em;
}
.mecanism .mecanism {
	margin: 1em;
	margin-bottom: 1.5em;
}

.mecanism .key::first-letter {
	text-transform: capitalize;
}

.mecanism ul.properties > li {
	display: flex;
	align-items: baseline;
	flex-wrap: wrap;
}
.mecanism ul > li > .value {
	flex: 1;
}

.variable,
.nodeHead,
.operator {
	display: inline-block;
}

.nodeHead .name .situationValue:not(.✅):not(.✘)::before {
	content: '(';
}

.nodeHead .name .situationValue:not(.✅):not(.✘)::after {
	content: ')';
}

/* Remove style for conditions */

.situationValue.✘,
.situationValue.✅ {
	padding: 0 0.5em;
	margin-right: -1px !important;
}
.mecanism.cond *:not(.nodeContent) > .variable .name,
.mecanism.variations *:not(.nodeContent) > .variable .name,
.inlineExpression.comparison,
.inlineExpression.negation {
	display: flex;
	align-items: baseline;
}
.mecanism.cond *:not(.nodeContent) > .variable .name .situationValue,
.mecanism.variations
	> condition
	> *:first-child
	*:not(.nodeContent)
	> .variable
	.name
	.situationValue,
.inlineExpression.comparison > .situationValue,
.inlineExpression.negation > .situationValue {
	order: -1;
	font-size: 110% !important;
}

.mecanism.cond *:not(.nodeContent) > .variable .name > .situationValue,
.mecanism.variations
	> condition
	> *:first-child
	*:not(.nodeContent)
	> .variable
	.name
	> .situationValue {
	margin-bottom: -5px;
	background-color: white;
	font-size: 130% !important;
	margin-left: 0 !important;
}
