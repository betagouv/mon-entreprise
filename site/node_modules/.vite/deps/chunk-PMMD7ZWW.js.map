{
  "version": 3,
  "sources": ["../../../../node_modules/effect/src/Equivalence.ts", "../../../../node_modules/effect/src/GlobalValue.ts", "../../../../node_modules/effect/src/internal/version.ts", "../../../../node_modules/effect/src/Utils.ts", "../../../../node_modules/effect/src/Hash.ts", "../../../../node_modules/effect/src/Equal.ts", "../../../../node_modules/effect/src/Inspectable.ts", "../../../../node_modules/effect/src/Pipeable.ts", "../../../../node_modules/effect/src/internal/opCodes/effect.ts", "../../../../node_modules/effect/src/internal/effectable.ts", "../../../../node_modules/effect/src/internal/option.ts", "../../../../node_modules/effect/src/Order.ts"],
  "sourcesContent": ["/**\n * This module provides an implementation of the `Equivalence` type class, which defines a binary relation\n * that is reflexive, symmetric, and transitive. In other words, it defines a notion of equivalence between values of a certain type.\n * These properties are also known in mathematics as an \"equivalence relation\".\n *\n * @since 2.0.0\n */\nimport { dual } from \"./Function.js\"\nimport type { TypeLambda } from \"./HKT.js\"\n\n/**\n * @category type class\n * @since 2.0.0\n */\nexport interface Equivalence<in A> {\n  (self: A, that: A): boolean\n}\n\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexport interface EquivalenceTypeLambda extends TypeLambda {\n  readonly type: Equivalence<this[\"Target\"]>\n}\n\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport const make = <A>(isEquivalent: (self: A, that: A) => boolean): Equivalence<A> => (self: A, that: A): boolean =>\n  self === that || isEquivalent(self, that)\n\nconst isStrictEquivalent = (x: unknown, y: unknown) => x === y\n\n/**\n * Return an `Equivalence` that uses strict equality (===) to compare values.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const strict: <A>() => Equivalence<A> = () => isStrictEquivalent\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const string: Equivalence<string> = strict()\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const number: Equivalence<number> = strict()\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const boolean: Equivalence<boolean> = strict()\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const bigint: Equivalence<bigint> = strict()\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const symbol: Equivalence<symbol> = strict()\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const combine: {\n  <A>(that: Equivalence<A>): (self: Equivalence<A>) => Equivalence<A>\n  <A>(self: Equivalence<A>, that: Equivalence<A>): Equivalence<A>\n} = dual(2, <A>(self: Equivalence<A>, that: Equivalence<A>): Equivalence<A> => make((x, y) => self(x, y) && that(x, y)))\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const combineMany: {\n  <A>(collection: Iterable<Equivalence<A>>): (self: Equivalence<A>) => Equivalence<A>\n  <A>(self: Equivalence<A>, collection: Iterable<Equivalence<A>>): Equivalence<A>\n} = dual(2, <A>(self: Equivalence<A>, collection: Iterable<Equivalence<A>>): Equivalence<A> =>\n  make((x, y) => {\n    if (!self(x, y)) {\n      return false\n    }\n    for (const equivalence of collection) {\n      if (!equivalence(x, y)) {\n        return false\n      }\n    }\n    return true\n  }))\n\nconst isAlwaysEquivalent: Equivalence<unknown> = (_x, _y) => true\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const combineAll = <A>(collection: Iterable<Equivalence<A>>): Equivalence<A> =>\n  combineMany(isAlwaysEquivalent, collection)\n\n/**\n * @category mapping\n * @since 2.0.0\n */\nexport const mapInput: {\n  <B, A>(f: (b: B) => A): (self: Equivalence<A>) => Equivalence<B>\n  <A, B>(self: Equivalence<A>, f: (b: B) => A): Equivalence<B>\n} = dual(\n  2,\n  <A, B>(self: Equivalence<A>, f: (b: B) => A): Equivalence<B> => make((x, y) => self(f(x), f(y)))\n)\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const Date: Equivalence<Date> = mapInput(number, (date) => date.getTime())\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const product: {\n  <B>(that: Equivalence<B>): <A>(self: Equivalence<A>) => Equivalence<readonly [A, B]> // readonly because invariant\n  <A, B>(self: Equivalence<A>, that: Equivalence<B>): Equivalence<readonly [A, B]> // readonly because invariant\n} = dual(\n  2,\n  <A, B>(self: Equivalence<A>, that: Equivalence<B>): Equivalence<readonly [A, B]> =>\n    make(([xa, xb], [ya, yb]) => self(xa, ya) && that(xb, yb))\n)\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const all = <A>(collection: Iterable<Equivalence<A>>): Equivalence<ReadonlyArray<A>> => {\n  return make((x, y) => {\n    const len = Math.min(x.length, y.length)\n\n    let collectionLength = 0\n    for (const equivalence of collection) {\n      if (collectionLength >= len) {\n        break\n      }\n      if (!equivalence(x[collectionLength], y[collectionLength])) {\n        return false\n      }\n      collectionLength++\n    }\n    return true\n  })\n}\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const productMany = <A>(\n  self: Equivalence<A>,\n  collection: Iterable<Equivalence<A>>\n): Equivalence<readonly [A, ...Array<A>]> /* readonly because invariant */ => {\n  const equivalence = all(collection)\n  return make((x, y) => !self(x[0], y[0]) ? false : equivalence(x.slice(1), y.slice(1)))\n}\n\n/**\n * Similar to `Promise.all` but operates on `Equivalence`s.\n *\n * ```\n * [Equivalence<A>, Equivalence<B>, ...] -> Equivalence<[A, B, ...]>\n * ```\n *\n * Given a tuple of `Equivalence`s returns a new `Equivalence` that compares values of a tuple\n * by applying each `Equivalence` to the corresponding element of the tuple.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const tuple = <T extends ReadonlyArray<Equivalence<any>>>(\n  ...elements: T\n): Equivalence<Readonly<{ [I in keyof T]: [T[I]] extends [Equivalence<infer A>] ? A : never }>> => all(elements) as any\n\n/**\n * Creates a new `Equivalence` for an array of values based on a given `Equivalence` for the elements of the array.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const array = <A>(item: Equivalence<A>): Equivalence<ReadonlyArray<A>> =>\n  make((self, that) => {\n    if (self.length !== that.length) {\n      return false\n    }\n\n    for (let i = 0; i < self.length; i++) {\n      const isEq = item(self[i], that[i])\n      if (!isEq) {\n        return false\n      }\n    }\n\n    return true\n  })\n\n/**\n * Given a struct of `Equivalence`s returns a new `Equivalence` that compares values of a struct\n * by applying each `Equivalence` to the corresponding property of the struct.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const struct = <R extends Record<string, Equivalence<any>>>(\n  fields: R\n): Equivalence<{ readonly [K in keyof R]: [R[K]] extends [Equivalence<infer A>] ? A : never }> => {\n  const keys = Object.keys(fields)\n  return make((self, that) => {\n    for (const key of keys) {\n      if (!fields[key](self[key], that[key])) {\n        return false\n      }\n    }\n    return true\n  })\n}\n", "/**\n * @since 2.0.0\n */\nimport * as version from \"./internal/version.js\"\n\nconst globalStoreId = Symbol.for(`effect/GlobalValue/globalStoreId/${version.getCurrentVersion()}`)\n\nif (!(globalStoreId in globalThis)) {\n  ;(globalThis as any)[globalStoreId] = new Map()\n}\n\nconst globalStore = (globalThis as any)[globalStoreId] as Map<unknown, any>\n\n/**\n * @since 2.0.0\n */\nexport const globalValue = <A>(id: unknown, compute: () => A): A => {\n  if (!globalStore.has(id)) {\n    globalStore.set(id, compute())\n  }\n  return globalStore.get(id)!\n}\n", "let moduleVersion = \"3.0.1\"\n\nexport const getCurrentVersion = () => moduleVersion\n\nexport const setCurrentVersion = (version: string) => {\n  moduleVersion = version\n}\n", "/**\n * @since 2.0.0\n */\nimport { identity } from \"./Function.js\"\nimport type { Kind, TypeLambda } from \"./HKT.js\"\nimport { isNullable } from \"./Predicate.js\"\nimport type * as Types from \"./Types.js\"\n\n/*\n * Copyright 2014 Thom Chiovoloni, released under the MIT license.\n *\n * A random number generator based on the basic implementation of the PCG algorithm,\n * as described here: http://www.pcg-random.org/\n *\n * Adapted for TypeScript from Thom's original code at https://github.com/thomcc/pcg-random\n *\n * forked from https://github.com/frptools\n *\n * @since 2.0.0\n */\n\n/**\n * @category symbols\n * @since 2.0.0\n */\nexport const GenKindTypeId = Symbol.for(\"effect/Gen/GenKind\")\n\n/**\n * @category symbols\n * @since 2.0.0\n */\nexport type GenKindTypeId = typeof GenKindTypeId\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface GenKind<F extends TypeLambda, R, O, E, A> extends Variance<F, R, O, E> {\n  readonly value: Kind<F, R, O, E, A>\n\n  [Symbol.iterator](): Generator<GenKind<F, R, O, E, A>, A>\n}\n\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport class GenKindImpl<F extends TypeLambda, R, O, E, A> implements GenKind<F, R, O, E, A> {\n  constructor(\n    /**\n     * @since 2.0.0\n     */\n    readonly value: Kind<F, R, O, E, A>\n  ) {}\n\n  /**\n   * @since 2.0.0\n   */\n  get _F() {\n    return identity\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  get _R() {\n    return (_: R) => _\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  get _O() {\n    return (_: never): O => _\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  get _E() {\n    return (_: never): E => _\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  readonly [GenKindTypeId]: typeof GenKindTypeId = GenKindTypeId;\n\n  /**\n   * @since 2.0.0\n   */\n  [Symbol.iterator](): Generator<GenKind<F, R, O, E, A>, A> {\n    return new SingleShotGen<GenKind<F, R, O, E, A>, A>(this as any)\n  }\n}\n\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport class SingleShotGen<T, A> implements Generator<T, A> {\n  private called = false\n\n  constructor(readonly self: T) {}\n\n  /**\n   * @since 2.0.0\n   */\n  next(a: A): IteratorResult<T, A> {\n    return this.called ?\n      ({\n        value: a,\n        done: true\n      }) :\n      (this.called = true,\n        ({\n          value: this.self,\n          done: false\n        }))\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  return(a: A): IteratorResult<T, A> {\n    return ({\n      value: a,\n      done: true\n    })\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  throw(e: unknown): IteratorResult<T, A> {\n    throw e\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  [Symbol.iterator](): Generator<T, A> {\n    return new SingleShotGen<T, A>(this.self)\n  }\n}\n\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport const makeGenKind = <F extends TypeLambda, R, O, E, A>(\n  kind: Kind<F, R, O, E, A>\n): GenKind<F, R, O, E, A> => new GenKindImpl(kind)\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface Variance<in out F extends TypeLambda, in R, out O, out E> {\n  readonly [GenKindTypeId]: GenKindTypeId\n  readonly _F: Types.Invariant<F>\n  readonly _R: Types.Contravariant<R>\n  readonly _O: Types.Covariant<O>\n  readonly _E: Types.Covariant<E>\n}\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface Gen<F extends TypeLambda, Z> {\n  <K extends Variance<F, any, any, any>, A>(\n    body: (resume: Z) => Generator<K, A>\n  ): Kind<\n    F,\n    [K] extends [Variance<F, infer R, any, any>] ? R : never,\n    [K] extends [Variance<F, any, infer O, any>] ? O : never,\n    [K] extends [Variance<F, any, any, infer E>] ? E : never,\n    A\n  >\n}\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface Adapter<Z extends TypeLambda> {\n  <_R, _O, _E, _A>(\n    self: Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, _R, _O, _E, _A>(a: A, ab: (a: A) => Kind<Z, _R, _O, _E, _A>): GenKind<Z, _R, _O, _E, _A>\n  <A, B, _R, _O, _E, _A>(a: A, ab: (a: A) => B, bc: (b: B) => Kind<Z, _R, _O, _E, _A>): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: F) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, H, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (g: H) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, H, I, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, H, I, J, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, H, I, J, K, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, H, I, J, K, L, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, H, I, J, K, L, M, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => M,\n    mn: (m: M) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => M,\n    mn: (m: M) => N,\n    no: (n: N) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => M,\n    mn: (m: M) => N,\n    no: (n: N) => O,\n    op: (o: O) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => M,\n    mn: (m: M) => N,\n    no: (n: N) => O,\n    op: (o: O) => P,\n    pq: (p: P) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => M,\n    mn: (m: M) => N,\n    no: (n: N) => O,\n    op: (o: O) => P,\n    pq: (p: P) => Q,\n    qr: (q: Q) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => M,\n    mn: (m: M) => N,\n    no: (n: N) => O,\n    op: (o: O) => P,\n    pq: (p: P) => Q,\n    qr: (q: Q) => R,\n    rs: (r: R) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => M,\n    mn: (m: M) => N,\n    no: (n: N) => O,\n    op: (o: O) => P,\n    pq: (p: P) => Q,\n    qr: (q: Q) => R,\n    rs: (r: R) => S,\n    st: (s: S) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => M,\n    mn: (m: M) => N,\n    no: (n: N) => O,\n    op: (o: O) => P,\n    pq: (p: P) => Q,\n    qr: (q: Q) => R,\n    rs: (r: R) => S,\n    st: (s: S) => T,\n    tu: (s: T) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n}\n\n/**\n * @category adapters\n * @since 2.0.0\n */\nexport const adapter: <F extends TypeLambda>() => Adapter<F> = () => // @ts-expect-error\n(function() {\n  let x = arguments[0]\n  for (let i = 1; i < arguments.length; i++) {\n    x = arguments[i](x)\n  }\n  return new GenKindImpl(x)\n})\n\nconst defaultIncHi = 0x14057b7e\nconst defaultIncLo = 0xf767814f\nconst MUL_HI = 0x5851f42d >>> 0\nconst MUL_LO = 0x4c957f2d >>> 0\nconst BIT_53 = 9007199254740992.0\nconst BIT_27 = 134217728.0\n\n/**\n * @category model\n * @since 2.0.0\n */\nexport type PCGRandomState = [number, number, number, number]\n\n/**\n * @category model\n * @since 2.0.0\n */\nexport type OptionalNumber = number | null | undefined\n\n/**\n * PCG is a family of simple fast space-efficient statistically good algorithms\n * for random number generation. Unlike many general-purpose RNGs, they are also\n * hard to predict.\n *\n * @category model\n * @since 2.0.0\n */\nexport class PCGRandom {\n  private _state!: Int32Array\n\n  /**\n   * Creates an instance of PCGRandom.\n   *\n   * @param seed - The low 32 bits of the seed (0 is used for high 32 bits).\n   *\n   * @memberOf PCGRandom\n   */\n  constructor(seed?: OptionalNumber)\n  /**\n   * Creates an instance of PCGRandom.\n   *\n   * @param seedHi - The high 32 bits of the seed.\n   * @param seedLo - The low 32 bits of the seed.\n   * @param inc - The low 32 bits of the incrementer (0 is used for high 32 bits).\n   *\n   * @memberOf PCGRandom\n   */\n  constructor(seedHi: OptionalNumber, seedLo: OptionalNumber, inc?: OptionalNumber)\n  /**\n   * Creates an instance of PCGRandom.\n   *\n   * @param seedHi - The high 32 bits of the seed.\n   * @param seedLo - The low 32 bits of the seed.\n   * @param incHi - The high 32 bits of the incrementer.\n   * @param incLo - The low 32 bits of the incrementer.\n   *\n   * @memberOf PCGRandom\n   */\n  constructor(\n    seedHi: OptionalNumber,\n    seedLo: OptionalNumber,\n    incHi: OptionalNumber,\n    incLo: OptionalNumber\n  )\n  constructor(\n    seedHi?: OptionalNumber,\n    seedLo?: OptionalNumber,\n    incHi?: OptionalNumber,\n    incLo?: OptionalNumber\n  ) {\n    if (isNullable(seedLo) && isNullable(seedHi)) {\n      seedLo = (Math.random() * 0xffffffff) >>> 0\n      seedHi = 0\n    } else if (isNullable(seedLo)) {\n      seedLo = seedHi\n      seedHi = 0\n    }\n    if (isNullable(incLo) && isNullable(incHi)) {\n      incLo = this._state ? this._state[3] : defaultIncLo\n      incHi = this._state ? this._state[2] : defaultIncHi\n    } else if (isNullable(incLo)) {\n      incLo = <number> incHi\n      incHi = 0\n    }\n\n    this._state = new Int32Array([0, 0, (<number> incHi) >>> 0, ((incLo || 0) | 1) >>> 0])\n    this._next()\n    add64(\n      this._state,\n      this._state[0]!,\n      this._state[1]!,\n      (<number> seedHi) >>> 0,\n      (<number> seedLo) >>> 0\n    )\n    this._next()\n    return this\n  }\n\n  /**\n   * Returns a copy of the internal state of this random number generator as a\n   * JavaScript Array.\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  getState(): PCGRandomState {\n    return [this._state[0]!, this._state[1]!, this._state[2]!, this._state[3]!]\n  }\n\n  /**\n   * Restore state previously retrieved using `getState()`.\n   *\n   * @since 2.0.0\n   */\n  setState(state: PCGRandomState) {\n    this._state[0] = state[0]\n    this._state[1] = state[1]\n    this._state[2] = state[2]\n    this._state[3] = state[3] | 1\n  }\n\n  /**\n   * Get a uniformly distributed 32 bit integer between [0, max).\n   *\n   * @category getter\n   * @since 2.0.0\n   */\n  integer(max: number) {\n    if (!max) {\n      return this._next()\n    }\n    max = max >>> 0\n    if ((max & (max - 1)) === 0) {\n      return this._next() & (max - 1) // fast path for power of 2\n    }\n\n    let num = 0\n    const skew = (-max >>> 0) % max >>> 0\n    for (num = this._next(); num < skew; num = this._next()) {\n      // this loop will rarely execute more than twice,\n      // and is intentionally empty\n    }\n    return num % max\n  }\n\n  /**\n   * Get a uniformly distributed IEEE-754 double between 0.0 and 1.0, with\n   * 53 bits of precision (every bit of the mantissa is randomized).\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  number() {\n    const hi = (this._next() & 0x03ffffff) * 1.0\n    const lo = (this._next() & 0x07ffffff) * 1.0\n    return (hi * BIT_27 + lo) / BIT_53\n  }\n\n  /** @internal */\n  private _next() {\n    // save current state (what we'll use for this number)\n    const oldHi = this._state[0]! >>> 0\n    const oldLo = this._state[1]! >>> 0\n\n    // churn LCG.\n    mul64(this._state, oldHi, oldLo, MUL_HI, MUL_LO)\n    add64(this._state, this._state[0]!, this._state[1]!, this._state[2]!, this._state[3]!)\n\n    // get least sig. 32 bits of ((oldstate >> 18) ^ oldstate) >> 27\n    let xsHi = oldHi >>> 18\n    let xsLo = ((oldLo >>> 18) | (oldHi << 14)) >>> 0\n    xsHi = (xsHi ^ oldHi) >>> 0\n    xsLo = (xsLo ^ oldLo) >>> 0\n    const xorshifted = ((xsLo >>> 27) | (xsHi << 5)) >>> 0\n    // rotate xorshifted right a random amount, based on the most sig. 5 bits\n    // bits of the old state.\n    const rot = oldHi >>> 27\n    const rot2 = ((-rot >>> 0) & 31) >>> 0\n    return ((xorshifted >>> rot) | (xorshifted << rot2)) >>> 0\n  }\n}\n\nfunction mul64(\n  out: Int32Array,\n  aHi: number,\n  aLo: number,\n  bHi: number,\n  bLo: number\n): void {\n  let c1 = ((aLo >>> 16) * (bLo & 0xffff)) >>> 0\n  let c0 = ((aLo & 0xffff) * (bLo >>> 16)) >>> 0\n\n  let lo = ((aLo & 0xffff) * (bLo & 0xffff)) >>> 0\n  let hi = ((aLo >>> 16) * (bLo >>> 16) + ((c0 >>> 16) + (c1 >>> 16))) >>> 0\n\n  c0 = (c0 << 16) >>> 0\n  lo = (lo + c0) >>> 0\n  if ((lo >>> 0) < (c0 >>> 0)) {\n    hi = (hi + 1) >>> 0\n  }\n\n  c1 = (c1 << 16) >>> 0\n  lo = (lo + c1) >>> 0\n  if ((lo >>> 0) < (c1 >>> 0)) {\n    hi = (hi + 1) >>> 0\n  }\n\n  hi = (hi + Math.imul(aLo, bHi)) >>> 0\n  hi = (hi + Math.imul(aHi, bLo)) >>> 0\n\n  out[0] = hi\n  out[1] = lo\n}\n\n// add two 64 bit numbers (given in parts), and store the result in `out`.\nfunction add64(\n  out: Int32Array,\n  aHi: number,\n  aLo: number,\n  bHi: number,\n  bLo: number\n): void {\n  let hi = (aHi + bHi) >>> 0\n  const lo = (aLo + bLo) >>> 0\n  if ((lo >>> 0) < (aLo >>> 0)) {\n    hi = (hi + 1) | 0\n  }\n  out[0] = hi\n  out[1] = lo\n}\n", "/**\n * @since 2.0.0\n */\nimport { pipe } from \"./Function.js\"\nimport { globalValue } from \"./GlobalValue.js\"\nimport { hasProperty } from \"./Predicate.js\"\nimport { PCGRandom } from \"./Utils.js\"\n\n/** @internal */\nconst randomHashCache = globalValue(\n  Symbol.for(\"effect/Hash/randomHashCache\"),\n  () => new WeakMap<object, number>()\n)\n/** @internal */\nconst pcgr = globalValue(\n  Symbol.for(\"effect/Hash/pcgr\"),\n  () => new PCGRandom()\n)\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const symbol: unique symbol = Symbol.for(\"effect/Hash\")\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Hash {\n  [symbol](): number\n}\n\n/**\n * @since 2.0.0\n * @category hashing\n */\nexport const hash: <A>(self: A) => number = <A>(self: A) => {\n  switch (typeof self) {\n    case \"number\":\n      return number(self)\n    case \"bigint\":\n      return string(self.toString(10))\n    case \"boolean\":\n      return string(String(self))\n    case \"symbol\":\n      return string(String(self))\n    case \"string\":\n      return string(self)\n    case \"undefined\":\n      return string(\"undefined\")\n    case \"function\":\n    case \"object\": {\n      if (self === null) {\n        return string(\"null\")\n      }\n      if (isHash(self)) {\n        return self[symbol]()\n      } else {\n        return random(self)\n      }\n    }\n    default:\n      throw new Error(\n        `BUG: unhandled typeof ${typeof self} - please report an issue at https://github.com/Effect-TS/effect/issues`\n      )\n  }\n}\n\n/**\n * @since 2.0.0\n * @category hashing\n */\nexport const random: <A extends object>(self: A) => number = (self) => {\n  if (!randomHashCache.has(self)) {\n    randomHashCache.set(self, number(pcgr.integer(Number.MAX_SAFE_INTEGER)))\n  }\n  return randomHashCache.get(self)!\n}\n\n/**\n * @since 2.0.0\n * @category hashing\n */\nexport const combine: (b: number) => (self: number) => number = (b) => (self) => (self * 53) ^ b\n\n/**\n * @since 2.0.0\n * @category hashing\n */\nexport const optimize = (n: number): number => (n & 0xbfffffff) | ((n >>> 1) & 0x40000000)\n\n/**\n * @since 2.0.0\n * @category guards\n */\nexport const isHash = (u: unknown): u is Hash => hasProperty(u, symbol)\n\n/**\n * @since 2.0.0\n * @category hashing\n */\nexport const number = (n: number) => {\n  if (n !== n || n === Infinity) {\n    return 0\n  }\n  let h = n | 0\n  if (h !== n) {\n    h ^= n * 0xffffffff\n  }\n  while (n > 0xffffffff) {\n    h ^= n /= 0xffffffff\n  }\n  return optimize(n)\n}\n\n/**\n * @since 2.0.0\n * @category hashing\n */\nexport const string = (str: string) => {\n  let h = 5381, i = str.length\n  while (i) {\n    h = (h * 33) ^ str.charCodeAt(--i)\n  }\n  return optimize(h)\n}\n\n/**\n * @since 2.0.0\n * @category hashing\n */\nexport const structureKeys = <A extends object>(o: A, keys: ReadonlyArray<keyof A>) => {\n  let h = 12289\n  for (let i = 0; i < keys.length; i++) {\n    h ^= pipe(string(keys[i]! as string), combine(hash((o as any)[keys[i]!])))\n  }\n  return optimize(h)\n}\n\n/**\n * @since 2.0.0\n * @category hashing\n */\nexport const structure = <A extends object>(o: A) =>\n  structureKeys(o, Object.keys(o) as unknown as ReadonlyArray<keyof A>)\n\n/**\n * @since 2.0.0\n * @category hashing\n */\nexport const array = <A>(arr: ReadonlyArray<A>) => {\n  let h = 6151\n  for (let i = 0; i < arr.length; i++) {\n    h = pipe(h, combine(hash(arr[i])))\n  }\n  return optimize(h)\n}\n\n/**\n * @since 2.0.0\n * @category hashing\n */\nexport const cached: {\n  (self: object): (hash: number) => number\n  (self: object, hash: number): number\n} = function() {\n  if (arguments.length === 1) {\n    const self = arguments[0] as object\n    return function(hash: number) {\n      Object.defineProperty(self, symbol, {\n        value() {\n          return hash\n        },\n        enumerable: false\n      })\n      return hash\n    } as any\n  }\n  const self = arguments[0] as object\n  const hash = arguments[1] as number\n  Object.defineProperty(self, symbol, {\n    value() {\n      return hash\n    },\n    enumerable: false\n  })\n  return hash\n}\n", "/**\n * @since 2.0.0\n */\nimport type { Equivalence } from \"./Equivalence.js\"\nimport * as Hash from \"./Hash.js\"\nimport { hasProperty } from \"./Predicate.js\"\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const symbol: unique symbol = Symbol.for(\"effect/Equal\")\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Equal extends Hash.Hash {\n  [symbol](that: Equal): boolean\n}\n\n/**\n * @since 2.0.0\n * @category equality\n */\nexport function equals<B>(that: B): <A>(self: A) => boolean\nexport function equals<A, B>(self: A, that: B): boolean\nexport function equals(): any {\n  if (arguments.length === 1) {\n    return (self: unknown) => compareBoth(self, arguments[0])\n  }\n  return compareBoth(arguments[0], arguments[1])\n}\n\nfunction compareBoth(self: unknown, that: unknown) {\n  if (self === that) {\n    return true\n  }\n  const selfType = typeof self\n  if (selfType !== typeof that) {\n    return false\n  }\n  if (\n    (selfType === \"object\" || selfType === \"function\") &&\n    self !== null &&\n    that !== null\n  ) {\n    if (isEqual(self) && isEqual(that)) {\n      return Hash.hash(self) === Hash.hash(that) && self[symbol](that)\n    }\n  }\n  return false\n}\n\n/**\n * @since 2.0.0\n * @category guards\n */\nexport const isEqual = (u: unknown): u is Equal => hasProperty(u, symbol)\n\n/**\n * @since 2.0.0\n * @category instances\n */\nexport const equivalence: <A>() => Equivalence<A> = () => equals\n", "/**\n * @since 2.0.0\n */\n\nimport { hasProperty, isFunction } from \"./Predicate.js\"\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const NodeInspectSymbol = Symbol.for(\"nodejs.util.inspect.custom\")\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type NodeInspectSymbol = typeof NodeInspectSymbol\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Inspectable {\n  toString(): string\n  toJSON(): unknown\n  [NodeInspectSymbol](): unknown\n}\n\n/**\n * @since 2.0.0\n */\nexport const toJSON = (x: unknown): unknown => {\n  if (\n    hasProperty(x, \"toJSON\") && isFunction(x[\"toJSON\"]) &&\n    x[\"toJSON\"].length === 0\n  ) {\n    return x.toJSON()\n  } else if (Array.isArray(x)) {\n    return x.map(toJSON)\n  }\n  return x\n}\n\n/**\n * @since 2.0.0\n */\nexport const format = (x: unknown): string => JSON.stringify(x, null, 2)\n\n/**\n * @since 2.0.0\n */\nexport const BaseProto: Inspectable = {\n  toJSON() {\n    return toJSON(this)\n  },\n  [NodeInspectSymbol]() {\n    return this.toJSON()\n  },\n  toString() {\n    return format(this.toJSON())\n  }\n}\n\n/**\n * @since 2.0.0\n */\nexport abstract class Class {\n  /**\n   * @since 2.0.0\n   */\n  abstract toJSON(): unknown\n  /**\n   * @since 2.0.0\n   */\n  [NodeInspectSymbol]() {\n    return this.toJSON()\n  }\n  /**\n   * @since 2.0.0\n   */\n  toString() {\n    return format(this.toJSON())\n  }\n}\n\n/**\n * @since 2.0.0\n */\nexport const toStringUnknown = (u: unknown, whitespace: number | string | undefined = 2): string => {\n  try {\n    return typeof u === \"object\" ? stringifyCircular(u, whitespace) : String(u)\n  } catch (_) {\n    return String(u)\n  }\n}\n\n/**\n * @since 2.0.0\n */\nexport const stringifyCircular = (obj: unknown, whitespace?: number | string | undefined): string => {\n  let cache: Array<unknown> = []\n  const retVal = JSON.stringify(\n    obj,\n    (_key, value) =>\n      typeof value === \"object\" && value !== null\n        ? cache.includes(value)\n          ? undefined // circular reference\n          : cache.push(value) && value\n        : value,\n    whitespace\n  )\n  ;(cache as any) = undefined\n  return retVal\n}\n", "/**\n * @since 2.0.0\n */\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Pipeable {\n  pipe<A, B>(this: A, ab: (_: A) => B): B\n  pipe<A, B, C>(this: A, ab: (_: A) => B, bc: (_: B) => C): C\n  pipe<A, B, C, D>(this: A, ab: (_: A) => B, bc: (_: B) => C, cd: (_: C) => D): D\n  pipe<A, B, C, D, E>(this: A, ab: (_: A) => B, bc: (_: B) => C, cd: (_: C) => D, de: (_: D) => E): E\n  pipe<A, B, C, D, E, F>(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F\n  ): F\n  pipe<A, B, C, D, E, F, G>(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G\n  ): G\n  pipe<A, B, C, D, E, F, G, H>(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H\n  ): H\n  pipe<A, B, C, D, E, F, G, H, I>(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I\n  ): I\n  pipe<A, B, C, D, E, F, G, H, I, J>(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I,\n    ij: (_: I) => J\n  ): J\n  pipe<A, B, C, D, E, F, G, H, I, J, K>(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I,\n    ij: (_: I) => J,\n    jk: (_: J) => K\n  ): K\n  pipe<A, B, C, D, E, F, G, H, I, J, K, L>(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I,\n    ij: (_: I) => J,\n    jk: (_: J) => K,\n    kl: (_: K) => L\n  ): L\n  pipe<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I,\n    ij: (_: I) => J,\n    jk: (_: J) => K,\n    kl: (_: K) => L,\n    lm: (_: L) => M\n  ): M\n  pipe<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I,\n    ij: (_: I) => J,\n    jk: (_: J) => K,\n    kl: (_: K) => L,\n    lm: (_: L) => M,\n    mn: (_: M) => N\n  ): N\n  pipe<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I,\n    ij: (_: I) => J,\n    jk: (_: J) => K,\n    kl: (_: K) => L,\n    lm: (_: L) => M,\n    mn: (_: M) => N,\n    no: (_: N) => O\n  ): O\n  pipe<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I,\n    ij: (_: I) => J,\n    jk: (_: J) => K,\n    kl: (_: K) => L,\n    lm: (_: L) => M,\n    mn: (_: M) => N,\n    no: (_: N) => O,\n    op: (_: O) => P\n  ): P\n  pipe<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I,\n    ij: (_: I) => J,\n    jk: (_: J) => K,\n    kl: (_: K) => L,\n    lm: (_: L) => M,\n    mn: (_: M) => N,\n    no: (_: N) => O,\n    op: (_: O) => P,\n    pq: (_: P) => Q\n  ): Q\n  pipe<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R>(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I,\n    ij: (_: I) => J,\n    jk: (_: J) => K,\n    kl: (_: K) => L,\n    lm: (_: L) => M,\n    mn: (_: M) => N,\n    no: (_: N) => O,\n    op: (_: O) => P,\n    pq: (_: P) => Q,\n    qr: (_: Q) => R\n  ): R\n  pipe<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S>(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I,\n    ij: (_: I) => J,\n    jk: (_: J) => K,\n    kl: (_: K) => L,\n    lm: (_: L) => M,\n    mn: (_: M) => N,\n    no: (_: N) => O,\n    op: (_: O) => P,\n    pq: (_: P) => Q,\n    qr: (_: Q) => R,\n    rs: (_: R) => S\n  ): S\n  pipe<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T>(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I,\n    ij: (_: I) => J,\n    jk: (_: J) => K,\n    kl: (_: K) => L,\n    lm: (_: L) => M,\n    mn: (_: M) => N,\n    no: (_: N) => O,\n    op: (_: O) => P,\n    pq: (_: P) => Q,\n    qr: (_: Q) => R,\n    rs: (_: R) => S,\n    st: (_: S) => T\n  ): T\n  pipe<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U>(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I,\n    ij: (_: I) => J,\n    jk: (_: J) => K,\n    kl: (_: K) => L,\n    lm: (_: L) => M,\n    mn: (_: M) => N,\n    no: (_: N) => O,\n    op: (_: O) => P,\n    pq: (_: P) => Q,\n    qr: (_: Q) => R,\n    rs: (_: R) => S,\n    st: (_: S) => T,\n    tu: (_: T) => U\n  ): U\n  pipe<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U>(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I,\n    ij: (_: I) => J,\n    jk: (_: J) => K,\n    kl: (_: K) => L,\n    lm: (_: L) => M,\n    mn: (_: M) => N,\n    no: (_: N) => O,\n    op: (_: O) => P,\n    pq: (_: P) => Q,\n    qr: (_: Q) => R,\n    rs: (_: R) => S,\n    st: (_: S) => T,\n    tu: (_: T) => U\n  ): U\n}\n\n/**\n * @since 2.0.0\n */\nexport const pipeArguments = <A>(self: A, args: IArguments): unknown => {\n  switch (args.length) {\n    case 1:\n      return args[0](self)\n    case 2:\n      return args[1](args[0](self))\n    case 3:\n      return args[2](args[1](args[0](self)))\n    case 4:\n      return args[3](args[2](args[1](args[0](self))))\n    case 5:\n      return args[4](args[3](args[2](args[1](args[0](self)))))\n    case 6:\n      return args[5](args[4](args[3](args[2](args[1](args[0](self))))))\n    case 7:\n      return args[6](args[5](args[4](args[3](args[2](args[1](args[0](self)))))))\n    case 8:\n      return args[7](args[6](args[5](args[4](args[3](args[2](args[1](args[0](self))))))))\n    case 9:\n      return args[8](args[7](args[6](args[5](args[4](args[3](args[2](args[1](args[0](self)))))))))\n    default: {\n      let ret = self\n      for (let i = 0, len = args.length; i < len; i++) {\n        ret = args[i](ret)\n      }\n      return ret\n    }\n  }\n}\n", "/** @internal */\nexport type OP_ASYNC = typeof OP_ASYNC\n\n/** @internal */\nexport const OP_ASYNC = \"Async\" as const\n\n/** @internal */\nexport type OP_COMMIT = typeof OP_COMMIT\n\n/** @internal */\nexport const OP_COMMIT = \"Commit\" as const\n\n/** @internal */\nexport type OP_FAILURE = typeof OP_FAILURE\n\n/** @internal */\nexport const OP_FAILURE = \"Failure\" as const\n\n/** @internal */\nexport type OP_ON_FAILURE = typeof OP_ON_FAILURE\n\n/** @internal */\nexport const OP_ON_FAILURE = \"OnFailure\" as const\n\n/** @internal */\nexport type OP_ON_SUCCESS = typeof OP_ON_SUCCESS\n\n/** @internal */\nexport const OP_ON_SUCCESS = \"OnSuccess\" as const\n\n/** @internal */\nexport type OP_ON_SUCCESS_AND_FAILURE = typeof OP_ON_SUCCESS_AND_FAILURE\n\n/** @internal */\nexport const OP_ON_SUCCESS_AND_FAILURE = \"OnSuccessAndFailure\" as const\n\n/** @internal */\nexport type OP_SUCCESS = typeof OP_SUCCESS\n\n/** @internal */\nexport const OP_SUCCESS = \"Success\" as const\n\n/** @internal */\nexport type OP_SYNC = typeof OP_SYNC\n\n/** @internal */\nexport const OP_SYNC = \"Sync\" as const\n\n/** @internal */\nexport const OP_TAG = \"Tag\" as const\n\n/** @internal */\nexport type OP_TAG = typeof OP_TAG\n\n/** @internal */\nexport type OP_UPDATE_RUNTIME_FLAGS = typeof OP_UPDATE_RUNTIME_FLAGS\n\n/** @internal */\nexport const OP_UPDATE_RUNTIME_FLAGS = \"UpdateRuntimeFlags\" as const\n\n/** @internal */\nexport type OP_WHILE = typeof OP_WHILE\n\n/** @internal */\nexport const OP_WHILE = \"While\" as const\n\n/** @internal */\nexport type OP_WITH_RUNTIME = typeof OP_WITH_RUNTIME\n\n/** @internal */\nexport const OP_WITH_RUNTIME = \"WithRuntime\" as const\n\n/** @internal */\nexport type OP_YIELD = typeof OP_YIELD\n\n/** @internal */\nexport const OP_YIELD = \"Yield\" as const\n\n/** @internal */\nexport type OP_REVERT_FLAGS = typeof OP_REVERT_FLAGS\n\n/** @internal */\nexport const OP_REVERT_FLAGS = \"RevertFlags\" as const\n", "import type * as Channel from \"../Channel.js\"\nimport type * as Effect from \"../Effect.js\"\nimport type * as Effectable from \"../Effectable.js\"\nimport * as Equal from \"../Equal.js\"\nimport * as Hash from \"../Hash.js\"\nimport { pipeArguments } from \"../Pipeable.js\"\nimport type * as Sink from \"../Sink.js\"\nimport type * as Stream from \"../Stream.js\"\nimport * as OpCodes from \"./opCodes/effect.js\"\nimport * as version from \"./version.js\"\n\n/** @internal */\nexport const EffectTypeId: Effect.EffectTypeId = Symbol.for(\"effect/Effect\") as Effect.EffectTypeId\n\n/** @internal */\nexport const StreamTypeId: Stream.StreamTypeId = Symbol.for(\"effect/Stream\") as Stream.StreamTypeId\n\n/** @internal */\nexport const SinkTypeId: Sink.SinkTypeId = Symbol.for(\"effect/Sink\") as Sink.SinkTypeId\n\n/** @internal */\nexport const ChannelTypeId: Channel.ChannelTypeId = Symbol.for(\"effect/Channel\") as Channel.ChannelTypeId\n\n/** @internal */\nexport const effectVariance = {\n  /* c8 ignore next */\n  _R: (_: never) => _,\n  /* c8 ignore next */\n  _E: (_: never) => _,\n  /* c8 ignore next */\n  _A: (_: never) => _,\n\n  _V: version.getCurrentVersion()\n}\n\nconst sinkVariance = {\n  /* c8 ignore next */\n  _A: (_: never) => _,\n  /* c8 ignore next */\n  _In: (_: unknown) => _,\n  /* c8 ignore next */\n  _L: (_: never) => _,\n  /* c8 ignore next */\n  _E: (_: never) => _,\n  /* c8 ignore next */\n  _R: (_: never) => _\n}\n\nconst channelVariance = {\n  /* c8 ignore next */\n  _Env: (_: never) => _,\n  /* c8 ignore next */\n  _InErr: (_: unknown) => _,\n  /* c8 ignore next */\n  _InElem: (_: unknown) => _,\n  /* c8 ignore next */\n  _InDone: (_: unknown) => _,\n  /* c8 ignore next */\n  _OutErr: (_: never) => _,\n  /* c8 ignore next */\n  _OutElem: (_: never) => _,\n  /* c8 ignore next */\n  _OutDone: (_: never) => _\n}\n\n/** @internal */\nexport const EffectPrototype: Effect.Effect<never> & Equal.Equal = {\n  [EffectTypeId]: effectVariance,\n  [StreamTypeId]: effectVariance,\n  [SinkTypeId]: sinkVariance,\n  [ChannelTypeId]: channelVariance,\n  [Equal.symbol](that: any) {\n    return this === that\n  },\n  [Hash.symbol]() {\n    return Hash.cached(this, Hash.random(this))\n  },\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nexport const StructuralPrototype: Equal.Equal = {\n  [Hash.symbol]() {\n    return Hash.cached(this, Hash.structure(this))\n  },\n  [Equal.symbol](this: Equal.Equal, that: Equal.Equal) {\n    const selfKeys = Object.keys(this)\n    const thatKeys = Object.keys(that as object)\n    if (selfKeys.length !== thatKeys.length) {\n      return false\n    }\n    for (const key of selfKeys) {\n      if (!(key in (that as object) && Equal.equals((this as any)[key], (that as any)[key]))) {\n        return false\n      }\n    }\n    return true\n  }\n}\n\n/** @internal */\nexport const CommitPrototype: Effect.Effect<never> = {\n  ...EffectPrototype,\n  _op: OpCodes.OP_COMMIT\n} as any\n\n/** @internal */\nexport const StructuralCommitPrototype: Effect.Effect<never> = {\n  ...CommitPrototype,\n  ...StructuralPrototype\n} as any\n\n/** @internal */\nexport const Base: Effectable.CommitPrimitive = (function() {\n  function Base() {}\n  Base.prototype = CommitPrototype\n  return Base as any\n})()\n\n/** @internal */\nexport const StructuralBase: Effectable.CommitPrimitive = (function() {\n  function Base() {}\n  Base.prototype = StructuralCommitPrototype\n  return Base as any\n})()\n", "/**\n * @since 2.0.0\n */\n\nimport * as Equal from \"../Equal.js\"\nimport * as Hash from \"../Hash.js\"\nimport { format, NodeInspectSymbol, toJSON } from \"../Inspectable.js\"\nimport type * as Option from \"../Option.js\"\nimport { hasProperty } from \"../Predicate.js\"\nimport { EffectPrototype } from \"./effectable.js\"\n\nconst TypeId: Option.TypeId = Symbol.for(\"effect/Option\") as Option.TypeId\n\nconst CommonProto = {\n  ...EffectPrototype,\n  [TypeId]: {\n    _A: (_: never) => _\n  },\n  [NodeInspectSymbol]<A>(this: Option.Option<A>) {\n    return this.toJSON()\n  },\n  toString<A>(this: Option.Option<A>) {\n    return format(this.toJSON())\n  }\n}\n\nconst SomeProto = Object.assign(Object.create(CommonProto), {\n  _tag: \"Some\",\n  _op: \"Some\",\n  [Equal.symbol]<A>(this: Option.Some<A>, that: unknown): boolean {\n    return isOption(that) && isSome(that) && Equal.equals(that.value, this.value)\n  },\n  [Hash.symbol]<A>(this: Option.Some<A>) {\n    return Hash.cached(this, Hash.combine(Hash.hash(this._tag))(Hash.hash(this.value)))\n  },\n  toJSON<A>(this: Option.Some<A>) {\n    return {\n      _id: \"Option\",\n      _tag: this._tag,\n      value: toJSON(this.value)\n    }\n  }\n})\n\nconst NoneHash = Hash.hash(\"None\")\nconst NoneProto = Object.assign(Object.create(CommonProto), {\n  _tag: \"None\",\n  _op: \"None\",\n  [Equal.symbol]<A>(this: Option.None<A>, that: unknown): boolean {\n    return isOption(that) && isNone(that)\n  },\n  [Hash.symbol]<A>(this: Option.None<A>) {\n    return NoneHash\n  },\n  toJSON<A>(this: Option.None<A>) {\n    return {\n      _id: \"Option\",\n      _tag: this._tag\n    }\n  }\n})\n\n/** @internal */\nexport const isOption = (input: unknown): input is Option.Option<unknown> => hasProperty(input, TypeId)\n\n/** @internal */\nexport const isNone = <A>(fa: Option.Option<A>): fa is Option.None<A> => fa._tag === \"None\"\n\n/** @internal */\nexport const isSome = <A>(fa: Option.Option<A>): fa is Option.Some<A> => fa._tag === \"Some\"\n\n/** @internal */\nexport const none: Option.Option<never> = Object.create(NoneProto)\n\n/** @internal */\nexport const some = <A>(value: A): Option.Option<A> => {\n  const a = Object.create(SomeProto)\n  a.value = value\n  return a\n}\n", "/**\n * @since 2.0.0\n */\nimport { dual } from \"./Function.js\"\nimport type { TypeLambda } from \"./HKT.js\"\n\n/**\n * @category type class\n * @since 2.0.0\n */\nexport interface Order<in A> {\n  (self: A, that: A): -1 | 0 | 1\n}\n\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexport interface OrderTypeLambda extends TypeLambda {\n  readonly type: Order<this[\"Target\"]>\n}\n\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport const make = <A>(\n  compare: (self: A, that: A) => -1 | 0 | 1\n): Order<A> =>\n(self, that) => self === that ? 0 : compare(self, that)\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const string: Order<string> = make((self, that) => self < that ? -1 : 1)\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const number: Order<number> = make((self, that) => self < that ? -1 : 1)\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const boolean: Order<boolean> = make((self, that) => self < that ? -1 : 1)\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const bigint: Order<bigint> = make((self, that) => self < that ? -1 : 1)\n\n/**\n * @since 2.0.0\n */\nexport const reverse = <A>(O: Order<A>): Order<A> => make((self, that) => O(that, self))\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const combine: {\n  <A>(that: Order<A>): (self: Order<A>) => Order<A>\n  <A>(self: Order<A>, that: Order<A>): Order<A>\n} = dual(2, <A>(self: Order<A>, that: Order<A>): Order<A> =>\n  make((a1, a2) => {\n    const out = self(a1, a2)\n    if (out !== 0) {\n      return out\n    }\n    return that(a1, a2)\n  }))\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const combineMany: {\n  <A>(collection: Iterable<Order<A>>): (self: Order<A>) => Order<A>\n  <A>(self: Order<A>, collection: Iterable<Order<A>>): Order<A>\n} = dual(2, <A>(self: Order<A>, collection: Iterable<Order<A>>): Order<A> =>\n  make((a1, a2) => {\n    let out = self(a1, a2)\n    if (out !== 0) {\n      return out\n    }\n    for (const O of collection) {\n      out = O(a1, a2)\n      if (out !== 0) {\n        return out\n      }\n    }\n    return out\n  }))\n\n/**\n * @since 2.0.0\n */\nexport const empty = <A>(): Order<A> => make(() => 0)\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const combineAll = <A>(collection: Iterable<Order<A>>): Order<A> => combineMany(empty(), collection)\n\n/**\n * @category mapping\n * @since 2.0.0\n */\nexport const mapInput: {\n  <B, A>(f: (b: B) => A): (self: Order<A>) => Order<B>\n  <A, B>(self: Order<A>, f: (b: B) => A): Order<B>\n} = dual(\n  2,\n  <A, B>(self: Order<A>, f: (b: B) => A): Order<B> => make((b1, b2) => self(f(b1), f(b2)))\n)\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const Date: Order<Date> = mapInput(number, (date) => date.getTime())\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const product: {\n  <B>(that: Order<B>): <A>(self: Order<A>) => Order<readonly [A, B]> // readonly because invariant\n  <A, B>(self: Order<A>, that: Order<B>): Order<readonly [A, B]> // readonly because invariant\n} = dual(2, <A, B>(self: Order<A>, that: Order<B>): Order<readonly [A, B]> =>\n  make(([xa, xb], [ya, yb]) => {\n    const o = self(xa, ya)\n    return o !== 0 ? o : that(xb, yb)\n  }))\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const all = <A>(collection: Iterable<Order<A>>): Order<ReadonlyArray<A>> => {\n  return make((x, y) => {\n    const len = Math.min(x.length, y.length)\n    let collectionLength = 0\n    for (const O of collection) {\n      if (collectionLength >= len) {\n        break\n      }\n      const o = O(x[collectionLength], y[collectionLength])\n      if (o !== 0) {\n        return o\n      }\n      collectionLength++\n    }\n    return 0\n  })\n}\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const productMany: {\n  <A>(collection: Iterable<Order<A>>): (self: Order<A>) => Order<readonly [A, ...Array<A>]> // readonly because invariant\n  <A>(self: Order<A>, collection: Iterable<Order<A>>): Order<readonly [A, ...Array<A>]> // readonly because invariant\n} = dual(2, <A>(self: Order<A>, collection: Iterable<Order<A>>): Order<readonly [A, ...Array<A>]> => {\n  const O = all(collection)\n  return make((x, y) => {\n    const o = self(x[0], y[0])\n    return o !== 0 ? o : O(x.slice(1), y.slice(1))\n  })\n})\n\n/**\n * Similar to `Promise.all` but operates on `Order`s.\n *\n * ```\n * [Order<A>, Order<B>, ...] -> Order<[A, B, ...]>\n * ```\n *\n * This function creates and returns a new `Order` for a tuple of values based on the given `Order`s for each element in the tuple.\n * The returned `Order` compares two tuples of the same type by applying the corresponding `Order` to each element in the tuple.\n * It is useful when you need to compare two tuples of the same type and you have a specific way of comparing each element\n * of the tuple.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const tuple = <T extends ReadonlyArray<Order<any>>>(\n  ...elements: T\n): Order<Readonly<{ [I in keyof T]: [T[I]] extends [Order<infer A>] ? A : never }>> => all(elements) as any\n\n/**\n * This function creates and returns a new `Order` for an array of values based on a given `Order` for the elements of the array.\n * The returned `Order` compares two arrays by applying the given `Order` to each element in the arrays.\n * If all elements are equal, the arrays are then compared based on their length.\n * It is useful when you need to compare two arrays of the same type and you have a specific way of comparing each element of the array.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const array = <A>(O: Order<A>): Order<ReadonlyArray<A>> =>\n  make((self, that) => {\n    const aLen = self.length\n    const bLen = that.length\n    const len = Math.min(aLen, bLen)\n    for (let i = 0; i < len; i++) {\n      const o = O(self[i], that[i])\n      if (o !== 0) {\n        return o\n      }\n    }\n    return number(aLen, bLen)\n  })\n\n/**\n * This function creates and returns a new `Order` for a struct of values based on the given `Order`s\n * for each property in the struct.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const struct = <R extends { readonly [x: string]: Order<any> }>(\n  fields: R\n): Order<{ [K in keyof R]: [R[K]] extends [Order<infer A>] ? A : never }> => {\n  const keys = Object.keys(fields)\n  return make((self, that) => {\n    for (const key of keys) {\n      const o = fields[key](self[key], that[key])\n      if (o !== 0) {\n        return o\n      }\n    }\n    return 0\n  })\n}\n\n/**\n * Test whether one value is _strictly less than_ another.\n *\n * @since 2.0.0\n */\nexport const lessThan = <A>(O: Order<A>): {\n  (that: A): (self: A) => boolean\n  (self: A, that: A): boolean\n} => dual(2, (self: A, that: A) => O(self, that) === -1)\n\n/**\n * Test whether one value is _strictly greater than_ another.\n *\n * @since 2.0.0\n */\nexport const greaterThan = <A>(O: Order<A>): {\n  (that: A): (self: A) => boolean\n  (self: A, that: A): boolean\n} => dual(2, (self: A, that: A) => O(self, that) === 1)\n\n/**\n * Test whether one value is _non-strictly less than_ another.\n *\n * @since 2.0.0\n */\nexport const lessThanOrEqualTo = <A>(O: Order<A>): {\n  (that: A): (self: A) => boolean\n  (self: A, that: A): boolean\n} => dual(2, (self: A, that: A) => O(self, that) !== 1)\n\n/**\n * Test whether one value is _non-strictly greater than_ another.\n *\n * @since 2.0.0\n */\nexport const greaterThanOrEqualTo = <A>(O: Order<A>): {\n  (that: A): (self: A) => boolean\n  (self: A, that: A): boolean\n} => dual(2, (self: A, that: A) => O(self, that) !== -1)\n\n/**\n * Take the minimum of two values. If they are considered equal, the first argument is chosen.\n *\n * @since 2.0.0\n */\nexport const min = <A>(O: Order<A>): {\n  (that: A): (self: A) => A\n  (self: A, that: A): A\n} => dual(2, (self: A, that: A) => self === that || O(self, that) < 1 ? self : that)\n\n/**\n * Take the maximum of two values. If they are considered equal, the first argument is chosen.\n *\n * @since 2.0.0\n */\nexport const max = <A>(O: Order<A>): {\n  (that: A): (self: A) => A\n  (self: A, that: A): A\n} => dual(2, (self: A, that: A) => self === that || O(self, that) > -1 ? self : that)\n\n/**\n * Clamp a value between a minimum and a maximum.\n *\n * @example\n * import * as Order from \"effect/Order\"\n * import * as Number from \"effect/Number\"\n *\n * const clamp = Order.clamp(Number.Order)({ minimum: 1, maximum: 5 })\n *\n * assert.equal(clamp(3), 3)\n * assert.equal(clamp(0), 1)\n * assert.equal(clamp(6), 5)\n *\n * @since 2.0.0\n */\nexport const clamp = <A>(O: Order<A>): {\n  (options: {\n    minimum: A\n    maximum: A\n  }): (self: A) => A\n  (self: A, options: {\n    minimum: A\n    maximum: A\n  }): A\n} =>\n  dual(\n    2,\n    (self: A, options: {\n      minimum: A\n      maximum: A\n    }): A => min(O)(options.maximum, max(O)(options.minimum, self))\n  )\n\n/**\n * Test whether a value is between a minimum and a maximum (inclusive).\n *\n * @since 2.0.0\n */\nexport const between = <A>(O: Order<A>): {\n  (options: {\n    minimum: A\n    maximum: A\n  }): (self: A) => boolean\n  (self: A, options: {\n    minimum: A\n    maximum: A\n  }): boolean\n} =>\n  dual(\n    2,\n    (self: A, options: {\n      minimum: A\n      maximum: A\n    }): boolean => !lessThan(O)(self, options.minimum) && !greaterThan(O)(self, options.maximum)\n  )\n"],
  "mappings": "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",
  "names": ["make", "isEquivalent", "self", "that", "isStrictEquivalent", "x", "y", "strict", "string", "number", "boolean", "bigint", "symbol", "combine", "dual", "combineMany", "collection", "equivalence", "isAlwaysEquivalent", "_x", "_y", "combineAll", "mapInput", "f", "Date", "date", "getTime", "product", "xa", "xb", "ya", "yb", "all", "len", "Math", "min", "length", "collectionLength", "productMany", "slice", "tuple", "elements", "array", "item", "i", "isEq", "struct", "fields", "keys", "Object", "key", "moduleVersion", "getCurrentVersion", "setCurrentVersion", "version", "globalStoreId", "Symbol", "for", "getCurrentVersion", "globalThis", "Map", "globalStore", "globalValue", "id", "compute", "has", "set", "get", "GenKindTypeId", "Symbol", "for", "GenKindImpl", "constructor", "value", "_F", "identity", "_R", "_", "_O", "_E", "iterator", "SingleShotGen", "self", "called", "next", "a", "done", "return", "throw", "e", "makeGenKind", "kind", "adapter", "x", "arguments", "i", "length", "defaultIncHi", "defaultIncLo", "MUL_HI", "MUL_LO", "BIT_53", "BIT_27", "PCGRandom", "seedHi", "seedLo", "incHi", "incLo", "_state", "isNullable", "Math", "random", "Int32Array", "_next", "add64", "getState", "setState", "state", "integer", "max", "num", "skew", "number", "hi", "lo", "oldHi", "oldLo", "mul64", "xsHi", "xsLo", "xorshifted", "rot", "rot2", "out", "aHi", "aLo", "bHi", "bLo", "c1", "c0", "imul", "array", "combine", "number", "string", "symbol", "randomHashCache", "globalValue", "Symbol", "for", "WeakMap", "pcgr", "PCGRandom", "symbol", "hash", "self", "number", "string", "toString", "String", "isHash", "random", "Error", "has", "set", "integer", "Number", "MAX_SAFE_INTEGER", "get", "combine", "b", "optimize", "n", "u", "hasProperty", "Infinity", "h", "str", "i", "length", "charCodeAt", "structureKeys", "o", "keys", "pipe", "structure", "Object", "array", "arr", "cached", "arguments", "defineProperty", "value", "enumerable", "symbol", "symbol", "Symbol", "for", "equals", "arguments", "length", "self", "compareBoth", "that", "selfType", "isEqual", "hash", "u", "hasProperty", "equivalence", "NodeInspectSymbol", "Symbol", "for", "toJSON", "x", "hasProperty", "isFunction", "length", "Array", "isArray", "map", "format", "JSON", "stringify", "BaseProto", "toString", "Class", "toStringUnknown", "u", "whitespace", "stringifyCircular", "String", "_", "obj", "cache", "retVal", "_key", "value", "includes", "undefined", "push", "pipeArguments", "self", "args", "length", "ret", "i", "len", "OP_ASYNC", "OP_COMMIT", "OP_FAILURE", "OP_ON_FAILURE", "OP_ON_SUCCESS", "OP_ON_SUCCESS_AND_FAILURE", "OP_SUCCESS", "OP_SYNC", "OP_TAG", "OP_UPDATE_RUNTIME_FLAGS", "OP_WHILE", "OP_WITH_RUNTIME", "OP_YIELD", "OP_REVERT_FLAGS", "EffectTypeId", "Symbol", "for", "StreamTypeId", "SinkTypeId", "ChannelTypeId", "effectVariance", "_R", "_", "_E", "_A", "_V", "getCurrentVersion", "sinkVariance", "_In", "_L", "channelVariance", "_Env", "_InErr", "_InElem", "_InDone", "_OutErr", "_OutElem", "_OutDone", "EffectPrototype", "symbol", "that", "cached", "random", "pipe", "pipeArguments", "arguments", "StructuralPrototype", "structure", "selfKeys", "Object", "keys", "thatKeys", "length", "key", "equals", "CommitPrototype", "_op", "OP_COMMIT", "StructuralCommitPrototype", "Base", "prototype", "StructuralBase", "TypeId", "Symbol", "for", "CommonProto", "EffectPrototype", "_A", "_", "NodeInspectSymbol", "toJSON", "toString", "format", "SomeProto", "Object", "assign", "create", "_tag", "_op", "symbol", "that", "isOption", "isSome", "equals", "value", "cached", "combine", "hash", "_id", "NoneHash", "NoneProto", "isNone", "input", "hasProperty", "fa", "none", "some", "a", "Date", "all", "array", "bigint", "boolean", "combine", "combineAll", "combineMany", "make", "mapInput", "number", "product", "productMany", "string", "struct", "tuple", "make", "compare", "self", "that", "string", "number", "boolean", "bigint", "reverse", "O", "combine", "dual", "a1", "a2", "out", "combineMany", "collection", "empty", "combineAll", "mapInput", "f", "b1", "b2", "Date", "date", "getTime", "product", "xa", "xb", "ya", "yb", "o", "all", "x", "y", "len", "Math", "min", "length", "collectionLength", "productMany", "slice", "tuple", "elements", "array", "aLen", "bLen", "i", "struct", "fields", "keys", "Object", "key", "lessThan", "greaterThan", "lessThanOrEqualTo", "greaterThanOrEqualTo", "max", "clamp", "options", "maximum", "minimum", "between"]
}
