{
  "version": 3,
  "sources": ["../../../../node_modules/@react-stately/radio/dist/packages/@react-stately/radio/src/index.ts", "../../../../node_modules/@react-stately/radio/dist/packages/@react-stately/radio/src/useRadioGroupState.ts"],
  "sourcesContent": ["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport {useRadioGroupState} from './useRadioGroupState';\n\nexport type {RadioGroupProps} from '@react-types/radio';\nexport type {RadioGroupState} from './useRadioGroupState';\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {RadioGroupProps} from '@react-types/radio';\nimport {useControlledState} from '@react-stately/utils';\nimport {useMemo, useState} from 'react';\nimport {ValidationState} from '@react-types/shared';\n\nexport interface RadioGroupState {\n  /**\n   * The name for the group, used for native form submission.\n   * @deprecated\n   * @private\n   */\n  readonly name: string,\n\n  /** Whether the radio group is disabled. */\n  readonly isDisabled: boolean,\n\n  /** Whether the radio group is read only. */\n  readonly isReadOnly: boolean,\n\n  /** Whether the radio group is required. */\n  readonly isRequired: boolean,\n\n  /** Whether the radio group is valid or invalid. */\n  readonly validationState: ValidationState | null,\n\n  /** The currently selected value. */\n  readonly selectedValue: string | null,\n\n  /** Sets the selected value. */\n  setSelectedValue(value: string): void,\n\n  /** The value of the last focused radio. */\n  readonly lastFocusedValue: string | null,\n\n  /** Sets the last focused value. */\n  setLastFocusedValue(value: string): void\n}\n\nlet instance = Math.round(Math.random() * 10000000000);\nlet i = 0;\n\n/**\n * Provides state management for a radio group component. Provides a name for the group,\n * and manages selection and focus state.\n */\nexport function useRadioGroupState(props: RadioGroupProps): RadioGroupState  {\n  // Preserved here for backward compatibility. React Aria now generates the name instead of stately.\n  let name = useMemo(() => props.name || `radio-group-${instance}-${++i}`, [props.name]);\n  let [selectedValue, setSelected] = useControlledState(props.value, props.defaultValue, props.onChange);\n  let [lastFocusedValue, setLastFocusedValue] = useState(null);\n\n  let setSelectedValue = (value) => {\n    if (!props.isReadOnly && !props.isDisabled) {\n      setSelected(value);\n    }\n  };\n\n  return {\n    name,\n    selectedValue,\n    setSelectedValue,\n    lastFocusedValue,\n    setLastFocusedValue,\n    isDisabled: props.isDisabled || false,\n    isReadOnly: props.isReadOnly || false,\n    isRequired: props.isRequired || false,\n    validationState: props.validationState || null\n  };\n}\n"],
  "mappings": ";;;;;;;;;;;;ACkDA,IAAI,iCAAW,KAAK,MAAM,KAAK,OAAM,IAAK,IAAA;AAC1C,IAAI,0BAAI;AAMD,SAAS,0CAAmB,OAA0C;AAE3E,MAAI,QAAO,GAAA,aAAAA,SAAQ,MAAM,MAAM,QAAQ,eAAe,8BAAA,IAAY,EAAE,uBAAA,IAAK;IAAC,MAAM;GAAK;AACrF,MAAI,CAAC,eAAe,WAAA,KAAe,GAAA,2CAAmB,MAAM,OAAO,MAAM,cAAc,MAAM,QAAQ;AACrG,MAAI,CAAC,kBAAkB,mBAAA,KAAuB,GAAA,aAAAC,UAAS,IAAI;AAE3D,MAAI,mBAAmB,CAAC,UAAU;AAChC,QAAI,CAAC,MAAM,cAAc,CAAC,MAAM;AAC9B,kBAAY,KAAA;EAEhB;AAEA,SAAO;;;;;;IAML,YAAY,MAAM,cAAc;IAChC,YAAY,MAAM,cAAc;IAChC,YAAY,MAAM,cAAc;IAChC,iBAAiB,MAAM,mBAAmB;EAC5C;AACF;",
  "names": ["$fQ2SF$useMemo", "$fQ2SF$useState"]
}
