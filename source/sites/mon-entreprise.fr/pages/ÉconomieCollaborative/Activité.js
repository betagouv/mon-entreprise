import { Markdown } from 'Components/utils/markdown'
import { ScrollToTop } from 'Components/utils/Scroll'
import withSitePaths from 'Components/utils/withSitePaths'
import { all } from 'ramda'
import React, { useContext } from 'react'
import emoji from 'react-easy-emoji'
import { Link } from 'react-router-dom'
import Animate from 'Ui/animate'
import { MultiItemSelection, NextButton } from './Activit√©sSelection'
import Exon√©rations from './Exon√©rations'
import { flatActivit√©s } from './reducers'
import { StoreContext } from './StoreContext'

export let allTrue = list => list && all(item => item === true)(list)

export let BackToSelection = withSitePaths(({ sitePaths }) => (
	<Link to={sitePaths.√©conomieCollaborative.index}>
		Revenir √† la s√©lection des activit√©s
	</Link>
))
export default withSitePaths(function LocationMeubl√©e({
	match: {
		params: { title }
	}
}) {
	let {
			state: { selectedActivities, activityAnswers },
			dispatch
		} = useContext(StoreContext),
		data = flatActivit√©s.find(({ titre }) => titre === title)

	if (data.activit√©s) {
		return (
			<Animate.fromBottom>
				<h1>{data.titre}</h1>
				<p>{data.explication}</p>
				<p>Quels sont plus pr√©cis√©ment les types d'activit√©s exerc√©es ? </p>
				<section className="ui__ full-width choice-group">
					<MultiItemSelection
						{...{
							items: data.activit√©s,
							selectedActivities,
							activityAnswers,
							dispatch,
							buttonAttributes: {
								currentActivit√©: title,
								action: () =>
									dispatch({
										type: 'UPDATE_ACTIVITY',
										title,
										data: { completed: true }
									})
							}
						}}
					/>
				</section>
			</Animate.fromBottom>
		)
	}

	let answers = activityAnswers[title] || {}

	return (
		<section>
			<BackToSelection />
			<Animate.fromBottom>
				<ScrollToTop />
				<h1>
					{emoji(data.ic√¥nes)} {data.titre}
				</h1>
				<Markdown source={data.explication} />
				{data.plateformes && (
					<p>
						{emoji('üì± ')}
						Exemples de plateformes : {data.plateformes.join(', ')}
					</p>
				)}
				<h2>Votre situation</h2>
				<Exon√©rations
					{...{ exon√©rations: data.exon√©rations, answers, dispatch, title }}
				/>
				{answers.exon√©rations && allTrue(answers.exon√©rations) ? (
					<p>
						{emoji('üòå ')}
						En ce qui concerne les revenus de cette activit√©, vous n'avez pas
						besoin de les d√©clarer aux imp√¥ts, ni d'en faire une activit√©
						professionnelle.
					</p>
				) : data['seuil pro'] === 0 ? (
					<p>
						Les revenus de cette activit√© sont consid√©r√©s comme des{' '}
						<strong>revenus professionnels d√®s le 1er euro gagn√©</strong>.
					</p>
				) : (
					<>
						<p>Vos revenus annuels pour cette activit√© sont :</p>
						<form
							css={`
								label {
									display: block;
									margin: 0.6rem 0;
								}
							`}>
							{data['seuil d√©claration'] && (
								<label>
									<input
										type="radio"
										name="seuil-d√©claration"
										value="d√©claration"
										checked={answers.d√©claration === false}
										onChange={() =>
											dispatch({
												type: 'UPDATE_ACTIVITY',
												title,
												data: { ...answers, pro: false, d√©claration: false }
											})
										}
									/>{' '}
									inf√©rieurs √† {data['seuil d√©claration']} ‚Ç¨
								</label>
							)}
							<label>
								<input
									type="radio"
									name="seuil-pro"
									value="non-pro"
									checked={
										answers.pro === false && answers.d√©claration !== false
									}
									onChange={() =>
										dispatch({
											type: 'UPDATE_ACTIVITY',
											title,
											data: { ...answers, pro: false }
										})
									}
								/>{' '}
								inf√©rieurs √† {data['seuil pro']} ‚Ç¨
							</label>
							<label>
								<input
									type="radio"
									name="seuil-pro"
									value="pro"
									checked={
										answers.pro === true && !answers.r√©gimeG√©n√©ralD√©pass√©
									}
									onChange={() =>
										dispatch({
											type: 'UPDATE_ACTIVITY',
											title,
											data: { ...answers, pro: true }
										})
									}
								/>{' '}
								sup√©rieurs √† {data['seuil pro']} ‚Ç¨
							</label>
							{data['seuil r√©gime g√©n√©ral'] && (
								<label>
									<input
										type="radio"
										name="seuil-r√©gime-g√©n√©ral"
										value="r√©gime-g√©n√©ral"
										checked={answers.r√©gimeG√©n√©ralD√©pass√© === true}
										onChange={() =>
											dispatch({
												type: 'UPDATE_ACTIVITY',
												title,
												data: {
													...answers,
													pro: true,
													r√©gimeG√©n√©ralD√©pass√©: true
												}
											})
										}
									/>{' '}
									sup√©rieurs √† {data['seuil r√©gime g√©n√©ral']} ‚Ç¨
								</label>
							)}
						</form>
					</>
				)}
				<NextButton
					{...{
						activityAnswers,
						selectedActivities,
						disabled: incompleteActivity(data, answers),
						currentActivit√©: title,
						action: () =>
							dispatch({
								type: 'UPDATE_ACTIVITY',
								title,
								data: { ...answers, completed: true }
							})
					}}
				/>
			</Animate.fromBottom>
		</section>
	)
})

export let incompleteActivity = (data, answers) =>
	(data['seuil pro'] > 0 &&
		!allTrue(answers.exon√©rations) &&
		answers.pro == null) ||
	(data['exon√©rations'] && answers.exon√©rations == null)
