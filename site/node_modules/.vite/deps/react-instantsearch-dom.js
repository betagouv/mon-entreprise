import {
  require_classnames
} from "./chunk-3EPU3HIU.js";
import {
  require_react_fast_compare
} from "./chunk-R5SPFUQU.js";
import {
  require_prop_types
} from "./chunk-GSKEPDIR.js";
import "./chunk-XVVVXXAI.js";
import "./chunk-RPRH3NKW.js";
import {
  require_react
} from "./chunk-4BTUQGSU.js";
import {
  __commonJS,
  __toESM
} from "./chunk-2LSFTFF7.js";

// ../node_modules/algoliasearch-helper/src/functions/merge.js
var require_merge = __commonJS({
  "../node_modules/algoliasearch-helper/src/functions/merge.js"(exports, module) {
    "use strict";
    function clone(value) {
      if (typeof value === "object" && value !== null) {
        return _merge(Array.isArray(value) ? [] : {}, value);
      }
      return value;
    }
    function isObjectOrArrayOrFunction(value) {
      return typeof value === "function" || Array.isArray(value) || Object.prototype.toString.call(value) === "[object Object]";
    }
    function _merge(target, source) {
      if (target === source) {
        return target;
      }
      for (var key in source) {
        if (!Object.prototype.hasOwnProperty.call(source, key) || key === "__proto__" || key === "constructor") {
          continue;
        }
        var sourceVal = source[key];
        var targetVal = target[key];
        if (typeof targetVal !== "undefined" && typeof sourceVal === "undefined") {
          continue;
        }
        if (isObjectOrArrayOrFunction(targetVal) && isObjectOrArrayOrFunction(sourceVal)) {
          target[key] = _merge(targetVal, sourceVal);
        } else {
          target[key] = clone(sourceVal);
        }
      }
      return target;
    }
    function merge(target) {
      if (!isObjectOrArrayOrFunction(target)) {
        target = {};
      }
      for (var i = 1, l = arguments.length; i < l; i++) {
        var source = arguments[i];
        if (isObjectOrArrayOrFunction(source)) {
          _merge(target, source);
        }
      }
      return target;
    }
    module.exports = merge;
  }
});

// ../node_modules/algoliasearch-helper/src/functions/defaultsPure.js
var require_defaultsPure = __commonJS({
  "../node_modules/algoliasearch-helper/src/functions/defaultsPure.js"(exports, module) {
    "use strict";
    module.exports = function defaultsPure() {
      var sources = Array.prototype.slice.call(arguments);
      return sources.reduceRight(function(acc, source) {
        Object.keys(Object(source)).forEach(function(key) {
          if (source[key] === void 0) {
            return;
          }
          if (acc[key] !== void 0) {
            delete acc[key];
          }
          acc[key] = source[key];
        });
        return acc;
      }, {});
    };
  }
});

// ../node_modules/algoliasearch-helper/src/functions/intersection.js
var require_intersection = __commonJS({
  "../node_modules/algoliasearch-helper/src/functions/intersection.js"(exports, module) {
    "use strict";
    function intersection(arr1, arr2) {
      return arr1.filter(function(value, index) {
        return arr2.indexOf(value) > -1 && arr1.indexOf(value) === index;
      });
    }
    module.exports = intersection;
  }
});

// ../node_modules/algoliasearch-helper/src/functions/find.js
var require_find = __commonJS({
  "../node_modules/algoliasearch-helper/src/functions/find.js"(exports, module) {
    "use strict";
    module.exports = function find3(array, comparator) {
      if (!Array.isArray(array)) {
        return void 0;
      }
      for (var i = 0; i < array.length; i++) {
        if (comparator(array[i])) {
          return array[i];
        }
      }
    };
  }
});

// ../node_modules/algoliasearch-helper/src/functions/valToNumber.js
var require_valToNumber = __commonJS({
  "../node_modules/algoliasearch-helper/src/functions/valToNumber.js"(exports, module) {
    "use strict";
    function valToNumber(v) {
      if (typeof v === "number") {
        return v;
      } else if (typeof v === "string") {
        return parseFloat(v);
      } else if (Array.isArray(v)) {
        return v.map(valToNumber);
      }
      throw new Error("The value should be a number, a parsable string or an array of those.");
    }
    module.exports = valToNumber;
  }
});

// ../node_modules/algoliasearch-helper/src/functions/omit.js
var require_omit = __commonJS({
  "../node_modules/algoliasearch-helper/src/functions/omit.js"(exports, module) {
    "use strict";
    function _objectWithoutPropertiesLoose11(source, excluded) {
      if (source === null)
        return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key;
      var i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0)
          continue;
        target[key] = source[key];
      }
      return target;
    }
    module.exports = _objectWithoutPropertiesLoose11;
  }
});

// ../node_modules/algoliasearch-helper/src/functions/objectHasKeys.js
var require_objectHasKeys = __commonJS({
  "../node_modules/algoliasearch-helper/src/functions/objectHasKeys.js"(exports, module) {
    "use strict";
    function objectHasKeys2(obj) {
      return obj && Object.keys(obj).length > 0;
    }
    module.exports = objectHasKeys2;
  }
});

// ../node_modules/algoliasearch-helper/src/utils/isValidUserToken.js
var require_isValidUserToken = __commonJS({
  "../node_modules/algoliasearch-helper/src/utils/isValidUserToken.js"(exports, module) {
    "use strict";
    module.exports = function isValidUserToken(userToken) {
      if (userToken === null) {
        return false;
      }
      return /^[a-zA-Z0-9_-]{1,64}$/.test(userToken);
    };
  }
});

// ../node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js
var require_RefinementList = __commonJS({
  "../node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js"(exports, module) {
    "use strict";
    var defaultsPure = require_defaultsPure();
    var omit2 = require_omit();
    var objectHasKeys2 = require_objectHasKeys();
    var lib = {
      /**
       * Adds a refinement to a RefinementList
       * @param {RefinementList} refinementList the initial list
       * @param {string} attribute the attribute to refine
       * @param {string} value the value of the refinement, if the value is not a string it will be converted
       * @return {RefinementList} a new and updated refinement list
       */
      addRefinement: function addRefinement(refinementList, attribute, value) {
        if (lib.isRefined(refinementList, attribute, value)) {
          return refinementList;
        }
        var valueAsString = "" + value;
        var facetRefinement = !refinementList[attribute] ? [valueAsString] : refinementList[attribute].concat(valueAsString);
        var mod = {};
        mod[attribute] = facetRefinement;
        return defaultsPure({}, mod, refinementList);
      },
      /**
       * Removes refinement(s) for an attribute:
       *  - if the value is specified removes the refinement for the value on the attribute
       *  - if no value is specified removes all the refinements for this attribute
       * @param {RefinementList} refinementList the initial list
       * @param {string} attribute the attribute to refine
       * @param {string} [value] the value of the refinement
       * @return {RefinementList} a new and updated refinement lst
       */
      removeRefinement: function removeRefinement(refinementList, attribute, value) {
        if (value === void 0) {
          return lib.clearRefinement(refinementList, function(v, f) {
            return attribute === f;
          });
        }
        var valueAsString = "" + value;
        return lib.clearRefinement(refinementList, function(v, f) {
          return attribute === f && valueAsString === v;
        });
      },
      /**
       * Toggles the refinement value for an attribute.
       * @param {RefinementList} refinementList the initial list
       * @param {string} attribute the attribute to refine
       * @param {string} value the value of the refinement
       * @return {RefinementList} a new and updated list
       */
      toggleRefinement: function toggleRefinement(refinementList, attribute, value) {
        if (value === void 0)
          throw new Error("toggleRefinement should be used with a value");
        if (lib.isRefined(refinementList, attribute, value)) {
          return lib.removeRefinement(refinementList, attribute, value);
        }
        return lib.addRefinement(refinementList, attribute, value);
      },
      /**
       * Clear all or parts of a RefinementList. Depending on the arguments, three
       * kinds of behavior can happen:
       *  - if no attribute is provided: clears the whole list
       *  - if an attribute is provided as a string: clears the list for the specific attribute
       *  - if an attribute is provided as a function: discards the elements for which the function returns true
       * @param {RefinementList} refinementList the initial list
       * @param {string} [attribute] the attribute or function to discard
       * @param {string} [refinementType] optional parameter to give more context to the attribute function
       * @return {RefinementList} a new and updated refinement list
       */
      clearRefinement: function clearRefinement(refinementList, attribute, refinementType) {
        if (attribute === void 0) {
          if (!objectHasKeys2(refinementList)) {
            return refinementList;
          }
          return {};
        } else if (typeof attribute === "string") {
          return omit2(refinementList, [attribute]);
        } else if (typeof attribute === "function") {
          var hasChanged = false;
          var newRefinementList = Object.keys(refinementList).reduce(function(memo, key) {
            var values = refinementList[key] || [];
            var facetList = values.filter(function(value) {
              return !attribute(value, key, refinementType);
            });
            if (facetList.length !== values.length) {
              hasChanged = true;
            }
            memo[key] = facetList;
            return memo;
          }, {});
          if (hasChanged)
            return newRefinementList;
          return refinementList;
        }
      },
      /**
       * Test if the refinement value is used for the attribute. If no refinement value
       * is provided, test if the refinementList contains any refinement for the
       * given attribute.
       * @param {RefinementList} refinementList the list of refinement
       * @param {string} attribute name of the attribute
       * @param {string} [refinementValue] value of the filter/refinement
       * @return {boolean}
       */
      isRefined: function isRefined(refinementList, attribute, refinementValue) {
        var containsRefinements = !!refinementList[attribute] && refinementList[attribute].length > 0;
        if (refinementValue === void 0 || !containsRefinements) {
          return containsRefinements;
        }
        var refinementValueAsString = "" + refinementValue;
        return refinementList[attribute].indexOf(refinementValueAsString) !== -1;
      }
    };
    module.exports = lib;
  }
});

// ../node_modules/algoliasearch-helper/src/SearchParameters/index.js
var require_SearchParameters = __commonJS({
  "../node_modules/algoliasearch-helper/src/SearchParameters/index.js"(exports, module) {
    "use strict";
    var merge = require_merge();
    var defaultsPure = require_defaultsPure();
    var intersection = require_intersection();
    var find3 = require_find();
    var valToNumber = require_valToNumber();
    var omit2 = require_omit();
    var objectHasKeys2 = require_objectHasKeys();
    var isValidUserToken = require_isValidUserToken();
    var RefinementList2 = require_RefinementList();
    function isEqualNumericRefinement(a, b) {
      if (Array.isArray(a) && Array.isArray(b)) {
        return a.length === b.length && a.every(function(el, i) {
          return isEqualNumericRefinement(b[i], el);
        });
      }
      return a === b;
    }
    function findArray(array, searchedValue) {
      return find3(array, function(currentValue) {
        return isEqualNumericRefinement(currentValue, searchedValue);
      });
    }
    function SearchParameters(newParameters) {
      var params = newParameters ? SearchParameters._parseNumbers(newParameters) : {};
      if (params.userToken !== void 0 && !isValidUserToken(params.userToken)) {
        console.warn("[algoliasearch-helper] The `userToken` parameter is invalid. This can lead to wrong analytics.\n  - Format: [a-zA-Z0-9_-]{1,64}");
      }
      this.facets = params.facets || [];
      this.disjunctiveFacets = params.disjunctiveFacets || [];
      this.hierarchicalFacets = params.hierarchicalFacets || [];
      this.facetsRefinements = params.facetsRefinements || {};
      this.facetsExcludes = params.facetsExcludes || {};
      this.disjunctiveFacetsRefinements = params.disjunctiveFacetsRefinements || {};
      this.numericRefinements = params.numericRefinements || {};
      this.tagRefinements = params.tagRefinements || [];
      this.hierarchicalFacetsRefinements = params.hierarchicalFacetsRefinements || {};
      var self = this;
      Object.keys(params).forEach(function(paramName) {
        var isKeyKnown = SearchParameters.PARAMETERS.indexOf(paramName) !== -1;
        var isValueDefined = params[paramName] !== void 0;
        if (!isKeyKnown && isValueDefined) {
          self[paramName] = params[paramName];
        }
      });
    }
    SearchParameters.PARAMETERS = Object.keys(new SearchParameters());
    SearchParameters._parseNumbers = function(partialState) {
      if (partialState instanceof SearchParameters)
        return partialState;
      var numbers = {};
      var numberKeys = [
        "aroundPrecision",
        "aroundRadius",
        "getRankingInfo",
        "minWordSizefor2Typos",
        "minWordSizefor1Typo",
        "page",
        "maxValuesPerFacet",
        "distinct",
        "minimumAroundRadius",
        "hitsPerPage",
        "minProximity"
      ];
      numberKeys.forEach(function(k) {
        var value = partialState[k];
        if (typeof value === "string") {
          var parsedValue = parseFloat(value);
          numbers[k] = isNaN(parsedValue) ? value : parsedValue;
        }
      });
      if (Array.isArray(partialState.insideBoundingBox)) {
        numbers.insideBoundingBox = partialState.insideBoundingBox.map(function(geoRect) {
          if (Array.isArray(geoRect)) {
            return geoRect.map(function(value) {
              return parseFloat(value);
            });
          }
          return geoRect;
        });
      }
      if (partialState.numericRefinements) {
        var numericRefinements = {};
        Object.keys(partialState.numericRefinements).forEach(function(attribute) {
          var operators = partialState.numericRefinements[attribute] || {};
          numericRefinements[attribute] = {};
          Object.keys(operators).forEach(function(operator) {
            var values = operators[operator];
            var parsedValues = values.map(function(v) {
              if (Array.isArray(v)) {
                return v.map(function(vPrime) {
                  if (typeof vPrime === "string") {
                    return parseFloat(vPrime);
                  }
                  return vPrime;
                });
              } else if (typeof v === "string") {
                return parseFloat(v);
              }
              return v;
            });
            numericRefinements[attribute][operator] = parsedValues;
          });
        });
        numbers.numericRefinements = numericRefinements;
      }
      return merge({}, partialState, numbers);
    };
    SearchParameters.make = function makeSearchParameters(newParameters) {
      var instance = new SearchParameters(newParameters);
      var hierarchicalFacets = newParameters.hierarchicalFacets || [];
      hierarchicalFacets.forEach(function(facet) {
        if (facet.rootPath) {
          var currentRefinement = instance.getHierarchicalRefinement(facet.name);
          if (currentRefinement.length > 0 && currentRefinement[0].indexOf(facet.rootPath) !== 0) {
            instance = instance.clearRefinements(facet.name);
          }
          currentRefinement = instance.getHierarchicalRefinement(facet.name);
          if (currentRefinement.length === 0) {
            instance = instance.toggleHierarchicalFacetRefinement(facet.name, facet.rootPath);
          }
        }
      });
      return instance;
    };
    SearchParameters.validate = function(currentState, parameters) {
      var params = parameters || {};
      if (currentState.tagFilters && params.tagRefinements && params.tagRefinements.length > 0) {
        return new Error(
          "[Tags] Cannot switch from the managed tag API to the advanced API. It is probably an error, if it is really what you want, you should first clear the tags with clearTags method."
        );
      }
      if (currentState.tagRefinements.length > 0 && params.tagFilters) {
        return new Error(
          "[Tags] Cannot switch from the advanced tag API to the managed API. It is probably an error, if it is not, you should first clear the tags with clearTags method."
        );
      }
      if (currentState.numericFilters && params.numericRefinements && objectHasKeys2(params.numericRefinements)) {
        return new Error(
          "[Numeric filters] Can't switch from the advanced to the managed API. It is probably an error, if this is really what you want, you have to first clear the numeric filters."
        );
      }
      if (objectHasKeys2(currentState.numericRefinements) && params.numericFilters) {
        return new Error(
          "[Numeric filters] Can't switch from the managed API to the advanced. It is probably an error, if this is really what you want, you have to first clear the numeric filters."
        );
      }
      return null;
    };
    SearchParameters.prototype = {
      constructor: SearchParameters,
      /**
       * Remove all refinements (disjunctive + conjunctive + excludes + numeric filters)
       * @method
       * @param {undefined|string|SearchParameters.clearCallback} [attribute] optional string or function
       * - If not given, means to clear all the filters.
       * - If `string`, means to clear all refinements for the `attribute` named filter.
       * - If `function`, means to clear all the refinements that return truthy values.
       * @return {SearchParameters}
       */
      clearRefinements: function clearRefinements(attribute) {
        var patch = {
          numericRefinements: this._clearNumericRefinements(attribute),
          facetsRefinements: RefinementList2.clearRefinement(
            this.facetsRefinements,
            attribute,
            "conjunctiveFacet"
          ),
          facetsExcludes: RefinementList2.clearRefinement(
            this.facetsExcludes,
            attribute,
            "exclude"
          ),
          disjunctiveFacetsRefinements: RefinementList2.clearRefinement(
            this.disjunctiveFacetsRefinements,
            attribute,
            "disjunctiveFacet"
          ),
          hierarchicalFacetsRefinements: RefinementList2.clearRefinement(
            this.hierarchicalFacetsRefinements,
            attribute,
            "hierarchicalFacet"
          )
        };
        if (patch.numericRefinements === this.numericRefinements && patch.facetsRefinements === this.facetsRefinements && patch.facetsExcludes === this.facetsExcludes && patch.disjunctiveFacetsRefinements === this.disjunctiveFacetsRefinements && patch.hierarchicalFacetsRefinements === this.hierarchicalFacetsRefinements) {
          return this;
        }
        return this.setQueryParameters(patch);
      },
      /**
       * Remove all the refined tags from the SearchParameters
       * @method
       * @return {SearchParameters}
       */
      clearTags: function clearTags() {
        if (this.tagFilters === void 0 && this.tagRefinements.length === 0)
          return this;
        return this.setQueryParameters({
          tagFilters: void 0,
          tagRefinements: []
        });
      },
      /**
       * Set the index.
       * @method
       * @param {string} index the index name
       * @return {SearchParameters}
       */
      setIndex: function setIndex(index) {
        if (index === this.index)
          return this;
        return this.setQueryParameters({
          index
        });
      },
      /**
       * Query setter
       * @method
       * @param {string} newQuery value for the new query
       * @return {SearchParameters}
       */
      setQuery: function setQuery(newQuery) {
        if (newQuery === this.query)
          return this;
        return this.setQueryParameters({
          query: newQuery
        });
      },
      /**
       * Page setter
       * @method
       * @param {number} newPage new page number
       * @return {SearchParameters}
       */
      setPage: function setPage(newPage) {
        if (newPage === this.page)
          return this;
        return this.setQueryParameters({
          page: newPage
        });
      },
      /**
       * Facets setter
       * The facets are the simple facets, used for conjunctive (and) faceting.
       * @method
       * @param {string[]} facets all the attributes of the algolia records used for conjunctive faceting
       * @return {SearchParameters}
       */
      setFacets: function setFacets(facets) {
        return this.setQueryParameters({
          facets
        });
      },
      /**
       * Disjunctive facets setter
       * Change the list of disjunctive (or) facets the helper chan handle.
       * @method
       * @param {string[]} facets all the attributes of the algolia records used for disjunctive faceting
       * @return {SearchParameters}
       */
      setDisjunctiveFacets: function setDisjunctiveFacets(facets) {
        return this.setQueryParameters({
          disjunctiveFacets: facets
        });
      },
      /**
       * HitsPerPage setter
       * Hits per page represents the number of hits retrieved for this query
       * @method
       * @param {number} n number of hits retrieved per page of results
       * @return {SearchParameters}
       */
      setHitsPerPage: function setHitsPerPage(n) {
        if (this.hitsPerPage === n)
          return this;
        return this.setQueryParameters({
          hitsPerPage: n
        });
      },
      /**
       * typoTolerance setter
       * Set the value of typoTolerance
       * @method
       * @param {string} typoTolerance new value of typoTolerance ("true", "false", "min" or "strict")
       * @return {SearchParameters}
       */
      setTypoTolerance: function setTypoTolerance(typoTolerance) {
        if (this.typoTolerance === typoTolerance)
          return this;
        return this.setQueryParameters({
          typoTolerance
        });
      },
      /**
       * Add a numeric filter for a given attribute
       * When value is an array, they are combined with OR
       * When value is a single value, it will combined with AND
       * @method
       * @param {string} attribute attribute to set the filter on
       * @param {string} operator operator of the filter (possible values: =, >, >=, <, <=, !=)
       * @param {number | number[]} value value of the filter
       * @return {SearchParameters}
       * @example
       * // for price = 50 or 40
       * searchparameter.addNumericRefinement('price', '=', [50, 40]);
       * @example
       * // for size = 38 and 40
       * searchparameter.addNumericRefinement('size', '=', 38);
       * searchparameter.addNumericRefinement('size', '=', 40);
       */
      addNumericRefinement: function(attribute, operator, v) {
        var value = valToNumber(v);
        if (this.isNumericRefined(attribute, operator, value))
          return this;
        var mod = merge({}, this.numericRefinements);
        mod[attribute] = merge({}, mod[attribute]);
        if (mod[attribute][operator]) {
          mod[attribute][operator] = mod[attribute][operator].slice();
          mod[attribute][operator].push(value);
        } else {
          mod[attribute][operator] = [value];
        }
        return this.setQueryParameters({
          numericRefinements: mod
        });
      },
      /**
       * Get the list of conjunctive refinements for a single facet
       * @param {string} facetName name of the attribute used for faceting
       * @return {string[]} list of refinements
       */
      getConjunctiveRefinements: function(facetName) {
        if (!this.isConjunctiveFacet(facetName)) {
          return [];
        }
        return this.facetsRefinements[facetName] || [];
      },
      /**
       * Get the list of disjunctive refinements for a single facet
       * @param {string} facetName name of the attribute used for faceting
       * @return {string[]} list of refinements
       */
      getDisjunctiveRefinements: function(facetName) {
        if (!this.isDisjunctiveFacet(facetName)) {
          return [];
        }
        return this.disjunctiveFacetsRefinements[facetName] || [];
      },
      /**
       * Get the list of hierarchical refinements for a single facet
       * @param {string} facetName name of the attribute used for faceting
       * @return {string[]} list of refinements
       */
      getHierarchicalRefinement: function(facetName) {
        return this.hierarchicalFacetsRefinements[facetName] || [];
      },
      /**
       * Get the list of exclude refinements for a single facet
       * @param {string} facetName name of the attribute used for faceting
       * @return {string[]} list of refinements
       */
      getExcludeRefinements: function(facetName) {
        if (!this.isConjunctiveFacet(facetName)) {
          return [];
        }
        return this.facetsExcludes[facetName] || [];
      },
      /**
       * Remove all the numeric filter for a given (attribute, operator)
       * @method
       * @param {string} attribute attribute to set the filter on
       * @param {string} [operator] operator of the filter (possible values: =, >, >=, <, <=, !=)
       * @param {number} [number] the value to be removed
       * @return {SearchParameters}
       */
      removeNumericRefinement: function(attribute, operator, paramValue) {
        if (paramValue !== void 0) {
          if (!this.isNumericRefined(attribute, operator, paramValue)) {
            return this;
          }
          return this.setQueryParameters({
            numericRefinements: this._clearNumericRefinements(function(value, key) {
              return key === attribute && value.op === operator && isEqualNumericRefinement(value.val, valToNumber(paramValue));
            })
          });
        } else if (operator !== void 0) {
          if (!this.isNumericRefined(attribute, operator))
            return this;
          return this.setQueryParameters({
            numericRefinements: this._clearNumericRefinements(function(value, key) {
              return key === attribute && value.op === operator;
            })
          });
        }
        if (!this.isNumericRefined(attribute))
          return this;
        return this.setQueryParameters({
          numericRefinements: this._clearNumericRefinements(function(value, key) {
            return key === attribute;
          })
        });
      },
      /**
       * Get the list of numeric refinements for a single facet
       * @param {string} facetName name of the attribute used for faceting
       * @return {SearchParameters.OperatorList} list of refinements
       */
      getNumericRefinements: function(facetName) {
        return this.numericRefinements[facetName] || {};
      },
      /**
       * Return the current refinement for the (attribute, operator)
       * @param {string} attribute attribute in the record
       * @param {string} operator operator applied on the refined values
       * @return {Array.<number|number[]>} refined values
       */
      getNumericRefinement: function(attribute, operator) {
        return this.numericRefinements[attribute] && this.numericRefinements[attribute][operator];
      },
      /**
       * Clear numeric filters.
       * @method
       * @private
       * @param {string|SearchParameters.clearCallback} [attribute] optional string or function
       * - If not given, means to clear all the filters.
       * - If `string`, means to clear all refinements for the `attribute` named filter.
       * - If `function`, means to clear all the refinements that return truthy values.
       * @return {Object.<string, OperatorList>}
       */
      _clearNumericRefinements: function _clearNumericRefinements(attribute) {
        if (attribute === void 0) {
          if (!objectHasKeys2(this.numericRefinements)) {
            return this.numericRefinements;
          }
          return {};
        } else if (typeof attribute === "string") {
          return omit2(this.numericRefinements, [attribute]);
        } else if (typeof attribute === "function") {
          var hasChanged = false;
          var numericRefinements = this.numericRefinements;
          var newNumericRefinements = Object.keys(numericRefinements).reduce(function(memo, key) {
            var operators = numericRefinements[key];
            var operatorList = {};
            operators = operators || {};
            Object.keys(operators).forEach(function(operator) {
              var values = operators[operator] || [];
              var outValues = [];
              values.forEach(function(value) {
                var predicateResult = attribute({ val: value, op: operator }, key, "numeric");
                if (!predicateResult)
                  outValues.push(value);
              });
              if (outValues.length !== values.length) {
                hasChanged = true;
              }
              operatorList[operator] = outValues;
            });
            memo[key] = operatorList;
            return memo;
          }, {});
          if (hasChanged)
            return newNumericRefinements;
          return this.numericRefinements;
        }
      },
      /**
       * Add a facet to the facets attribute of the helper configuration, if it
       * isn't already present.
       * @method
       * @param {string} facet facet name to add
       * @return {SearchParameters}
       */
      addFacet: function addFacet(facet) {
        if (this.isConjunctiveFacet(facet)) {
          return this;
        }
        return this.setQueryParameters({
          facets: this.facets.concat([facet])
        });
      },
      /**
       * Add a disjunctive facet to the disjunctiveFacets attribute of the helper
       * configuration, if it isn't already present.
       * @method
       * @param {string} facet disjunctive facet name to add
       * @return {SearchParameters}
       */
      addDisjunctiveFacet: function addDisjunctiveFacet(facet) {
        if (this.isDisjunctiveFacet(facet)) {
          return this;
        }
        return this.setQueryParameters({
          disjunctiveFacets: this.disjunctiveFacets.concat([facet])
        });
      },
      /**
       * Add a hierarchical facet to the hierarchicalFacets attribute of the helper
       * configuration.
       * @method
       * @param {object} hierarchicalFacet hierarchical facet to add
       * @return {SearchParameters}
       * @throws will throw an error if a hierarchical facet with the same name was already declared
       */
      addHierarchicalFacet: function addHierarchicalFacet(hierarchicalFacet) {
        if (this.isHierarchicalFacet(hierarchicalFacet.name)) {
          throw new Error(
            "Cannot declare two hierarchical facets with the same name: `" + hierarchicalFacet.name + "`"
          );
        }
        return this.setQueryParameters({
          hierarchicalFacets: this.hierarchicalFacets.concat([hierarchicalFacet])
        });
      },
      /**
       * Add a refinement on a "normal" facet
       * @method
       * @param {string} facet attribute to apply the faceting on
       * @param {string} value value of the attribute (will be converted to string)
       * @return {SearchParameters}
       */
      addFacetRefinement: function addFacetRefinement(facet, value) {
        if (!this.isConjunctiveFacet(facet)) {
          throw new Error(facet + " is not defined in the facets attribute of the helper configuration");
        }
        if (RefinementList2.isRefined(this.facetsRefinements, facet, value))
          return this;
        return this.setQueryParameters({
          facetsRefinements: RefinementList2.addRefinement(this.facetsRefinements, facet, value)
        });
      },
      /**
       * Exclude a value from a "normal" facet
       * @method
       * @param {string} facet attribute to apply the exclusion on
       * @param {string} value value of the attribute (will be converted to string)
       * @return {SearchParameters}
       */
      addExcludeRefinement: function addExcludeRefinement(facet, value) {
        if (!this.isConjunctiveFacet(facet)) {
          throw new Error(facet + " is not defined in the facets attribute of the helper configuration");
        }
        if (RefinementList2.isRefined(this.facetsExcludes, facet, value))
          return this;
        return this.setQueryParameters({
          facetsExcludes: RefinementList2.addRefinement(this.facetsExcludes, facet, value)
        });
      },
      /**
       * Adds a refinement on a disjunctive facet.
       * @method
       * @param {string} facet attribute to apply the faceting on
       * @param {string} value value of the attribute (will be converted to string)
       * @return {SearchParameters}
       */
      addDisjunctiveFacetRefinement: function addDisjunctiveFacetRefinement(facet, value) {
        if (!this.isDisjunctiveFacet(facet)) {
          throw new Error(
            facet + " is not defined in the disjunctiveFacets attribute of the helper configuration"
          );
        }
        if (RefinementList2.isRefined(this.disjunctiveFacetsRefinements, facet, value))
          return this;
        return this.setQueryParameters({
          disjunctiveFacetsRefinements: RefinementList2.addRefinement(
            this.disjunctiveFacetsRefinements,
            facet,
            value
          )
        });
      },
      /**
       * addTagRefinement adds a tag to the list used to filter the results
       * @param {string} tag tag to be added
       * @return {SearchParameters}
       */
      addTagRefinement: function addTagRefinement(tag) {
        if (this.isTagRefined(tag))
          return this;
        var modification = {
          tagRefinements: this.tagRefinements.concat(tag)
        };
        return this.setQueryParameters(modification);
      },
      /**
       * Remove a facet from the facets attribute of the helper configuration, if it
       * is present.
       * @method
       * @param {string} facet facet name to remove
       * @return {SearchParameters}
       */
      removeFacet: function removeFacet(facet) {
        if (!this.isConjunctiveFacet(facet)) {
          return this;
        }
        return this.clearRefinements(facet).setQueryParameters({
          facets: this.facets.filter(function(f) {
            return f !== facet;
          })
        });
      },
      /**
       * Remove a disjunctive facet from the disjunctiveFacets attribute of the
       * helper configuration, if it is present.
       * @method
       * @param {string} facet disjunctive facet name to remove
       * @return {SearchParameters}
       */
      removeDisjunctiveFacet: function removeDisjunctiveFacet(facet) {
        if (!this.isDisjunctiveFacet(facet)) {
          return this;
        }
        return this.clearRefinements(facet).setQueryParameters({
          disjunctiveFacets: this.disjunctiveFacets.filter(function(f) {
            return f !== facet;
          })
        });
      },
      /**
       * Remove a hierarchical facet from the hierarchicalFacets attribute of the
       * helper configuration, if it is present.
       * @method
       * @param {string} facet hierarchical facet name to remove
       * @return {SearchParameters}
       */
      removeHierarchicalFacet: function removeHierarchicalFacet(facet) {
        if (!this.isHierarchicalFacet(facet)) {
          return this;
        }
        return this.clearRefinements(facet).setQueryParameters({
          hierarchicalFacets: this.hierarchicalFacets.filter(function(f) {
            return f.name !== facet;
          })
        });
      },
      /**
       * Remove a refinement set on facet. If a value is provided, it will clear the
       * refinement for the given value, otherwise it will clear all the refinement
       * values for the faceted attribute.
       * @method
       * @param {string} facet name of the attribute used for faceting
       * @param {string} [value] value used to filter
       * @return {SearchParameters}
       */
      removeFacetRefinement: function removeFacetRefinement(facet, value) {
        if (!this.isConjunctiveFacet(facet)) {
          throw new Error(facet + " is not defined in the facets attribute of the helper configuration");
        }
        if (!RefinementList2.isRefined(this.facetsRefinements, facet, value))
          return this;
        return this.setQueryParameters({
          facetsRefinements: RefinementList2.removeRefinement(this.facetsRefinements, facet, value)
        });
      },
      /**
       * Remove a negative refinement on a facet
       * @method
       * @param {string} facet name of the attribute used for faceting
       * @param {string} value value used to filter
       * @return {SearchParameters}
       */
      removeExcludeRefinement: function removeExcludeRefinement(facet, value) {
        if (!this.isConjunctiveFacet(facet)) {
          throw new Error(facet + " is not defined in the facets attribute of the helper configuration");
        }
        if (!RefinementList2.isRefined(this.facetsExcludes, facet, value))
          return this;
        return this.setQueryParameters({
          facetsExcludes: RefinementList2.removeRefinement(this.facetsExcludes, facet, value)
        });
      },
      /**
       * Remove a refinement on a disjunctive facet
       * @method
       * @param {string} facet name of the attribute used for faceting
       * @param {string} value value used to filter
       * @return {SearchParameters}
       */
      removeDisjunctiveFacetRefinement: function removeDisjunctiveFacetRefinement(facet, value) {
        if (!this.isDisjunctiveFacet(facet)) {
          throw new Error(
            facet + " is not defined in the disjunctiveFacets attribute of the helper configuration"
          );
        }
        if (!RefinementList2.isRefined(this.disjunctiveFacetsRefinements, facet, value))
          return this;
        return this.setQueryParameters({
          disjunctiveFacetsRefinements: RefinementList2.removeRefinement(
            this.disjunctiveFacetsRefinements,
            facet,
            value
          )
        });
      },
      /**
       * Remove a tag from the list of tag refinements
       * @method
       * @param {string} tag the tag to remove
       * @return {SearchParameters}
       */
      removeTagRefinement: function removeTagRefinement(tag) {
        if (!this.isTagRefined(tag))
          return this;
        var modification = {
          tagRefinements: this.tagRefinements.filter(function(t) {
            return t !== tag;
          })
        };
        return this.setQueryParameters(modification);
      },
      /**
       * Generic toggle refinement method to use with facet, disjunctive facets
       * and hierarchical facets
       * @param  {string} facet the facet to refine
       * @param  {string} value the associated value
       * @return {SearchParameters}
       * @throws will throw an error if the facet is not declared in the settings of the helper
       * @deprecated since version 2.19.0, see {@link SearchParameters#toggleFacetRefinement}
       */
      toggleRefinement: function toggleRefinement(facet, value) {
        return this.toggleFacetRefinement(facet, value);
      },
      /**
       * Generic toggle refinement method to use with facet, disjunctive facets
       * and hierarchical facets
       * @param  {string} facet the facet to refine
       * @param  {string} value the associated value
       * @return {SearchParameters}
       * @throws will throw an error if the facet is not declared in the settings of the helper
       */
      toggleFacetRefinement: function toggleFacetRefinement(facet, value) {
        if (this.isHierarchicalFacet(facet)) {
          return this.toggleHierarchicalFacetRefinement(facet, value);
        } else if (this.isConjunctiveFacet(facet)) {
          return this.toggleConjunctiveFacetRefinement(facet, value);
        } else if (this.isDisjunctiveFacet(facet)) {
          return this.toggleDisjunctiveFacetRefinement(facet, value);
        }
        throw new Error("Cannot refine the undeclared facet " + facet + "; it should be added to the helper options facets, disjunctiveFacets or hierarchicalFacets");
      },
      /**
       * Switch the refinement applied over a facet/value
       * @method
       * @param {string} facet name of the attribute used for faceting
       * @param {value} value value used for filtering
       * @return {SearchParameters}
       */
      toggleConjunctiveFacetRefinement: function toggleConjunctiveFacetRefinement(facet, value) {
        if (!this.isConjunctiveFacet(facet)) {
          throw new Error(facet + " is not defined in the facets attribute of the helper configuration");
        }
        return this.setQueryParameters({
          facetsRefinements: RefinementList2.toggleRefinement(this.facetsRefinements, facet, value)
        });
      },
      /**
       * Switch the refinement applied over a facet/value
       * @method
       * @param {string} facet name of the attribute used for faceting
       * @param {value} value value used for filtering
       * @return {SearchParameters}
       */
      toggleExcludeFacetRefinement: function toggleExcludeFacetRefinement(facet, value) {
        if (!this.isConjunctiveFacet(facet)) {
          throw new Error(facet + " is not defined in the facets attribute of the helper configuration");
        }
        return this.setQueryParameters({
          facetsExcludes: RefinementList2.toggleRefinement(this.facetsExcludes, facet, value)
        });
      },
      /**
       * Switch the refinement applied over a facet/value
       * @method
       * @param {string} facet name of the attribute used for faceting
       * @param {value} value value used for filtering
       * @return {SearchParameters}
       */
      toggleDisjunctiveFacetRefinement: function toggleDisjunctiveFacetRefinement(facet, value) {
        if (!this.isDisjunctiveFacet(facet)) {
          throw new Error(
            facet + " is not defined in the disjunctiveFacets attribute of the helper configuration"
          );
        }
        return this.setQueryParameters({
          disjunctiveFacetsRefinements: RefinementList2.toggleRefinement(
            this.disjunctiveFacetsRefinements,
            facet,
            value
          )
        });
      },
      /**
       * Switch the refinement applied over a facet/value
       * @method
       * @param {string} facet name of the attribute used for faceting
       * @param {value} value value used for filtering
       * @return {SearchParameters}
       */
      toggleHierarchicalFacetRefinement: function toggleHierarchicalFacetRefinement(facet, value) {
        if (!this.isHierarchicalFacet(facet)) {
          throw new Error(
            facet + " is not defined in the hierarchicalFacets attribute of the helper configuration"
          );
        }
        var separator = this._getHierarchicalFacetSeparator(this.getHierarchicalFacetByName(facet));
        var mod = {};
        var upOneOrMultipleLevel = this.hierarchicalFacetsRefinements[facet] !== void 0 && this.hierarchicalFacetsRefinements[facet].length > 0 && // remove current refinement:
        // refinement was 'beer > IPA', call is toggleRefine('beer > IPA'), refinement should be `beer`
        (this.hierarchicalFacetsRefinements[facet][0] === value || // remove a parent refinement of the current refinement:
        //  - refinement was 'beer > IPA > Flying dog'
        //  - call is toggleRefine('beer > IPA')
        //  - refinement should be `beer`
        this.hierarchicalFacetsRefinements[facet][0].indexOf(value + separator) === 0);
        if (upOneOrMultipleLevel) {
          if (value.indexOf(separator) === -1) {
            mod[facet] = [];
          } else {
            mod[facet] = [value.slice(0, value.lastIndexOf(separator))];
          }
        } else {
          mod[facet] = [value];
        }
        return this.setQueryParameters({
          hierarchicalFacetsRefinements: defaultsPure({}, mod, this.hierarchicalFacetsRefinements)
        });
      },
      /**
       * Adds a refinement on a hierarchical facet.
       * @param {string} facet the facet name
       * @param {string} path the hierarchical facet path
       * @return {SearchParameter} the new state
       * @throws Error if the facet is not defined or if the facet is refined
       */
      addHierarchicalFacetRefinement: function(facet, path) {
        if (this.isHierarchicalFacetRefined(facet)) {
          throw new Error(facet + " is already refined.");
        }
        if (!this.isHierarchicalFacet(facet)) {
          throw new Error(facet + " is not defined in the hierarchicalFacets attribute of the helper configuration.");
        }
        var mod = {};
        mod[facet] = [path];
        return this.setQueryParameters({
          hierarchicalFacetsRefinements: defaultsPure({}, mod, this.hierarchicalFacetsRefinements)
        });
      },
      /**
       * Removes the refinement set on a hierarchical facet.
       * @param {string} facet the facet name
       * @return {SearchParameter} the new state
       * @throws Error if the facet is not defined or if the facet is not refined
       */
      removeHierarchicalFacetRefinement: function(facet) {
        if (!this.isHierarchicalFacetRefined(facet)) {
          return this;
        }
        var mod = {};
        mod[facet] = [];
        return this.setQueryParameters({
          hierarchicalFacetsRefinements: defaultsPure({}, mod, this.hierarchicalFacetsRefinements)
        });
      },
      /**
       * Switch the tag refinement
       * @method
       * @param {string} tag the tag to remove or add
       * @return {SearchParameters}
       */
      toggleTagRefinement: function toggleTagRefinement(tag) {
        if (this.isTagRefined(tag)) {
          return this.removeTagRefinement(tag);
        }
        return this.addTagRefinement(tag);
      },
      /**
       * Test if the facet name is from one of the disjunctive facets
       * @method
       * @param {string} facet facet name to test
       * @return {boolean}
       */
      isDisjunctiveFacet: function(facet) {
        return this.disjunctiveFacets.indexOf(facet) > -1;
      },
      /**
       * Test if the facet name is from one of the hierarchical facets
       * @method
       * @param {string} facetName facet name to test
       * @return {boolean}
       */
      isHierarchicalFacet: function(facetName) {
        return this.getHierarchicalFacetByName(facetName) !== void 0;
      },
      /**
       * Test if the facet name is from one of the conjunctive/normal facets
       * @method
       * @param {string} facet facet name to test
       * @return {boolean}
       */
      isConjunctiveFacet: function(facet) {
        return this.facets.indexOf(facet) > -1;
      },
      /**
       * Returns true if the facet is refined, either for a specific value or in
       * general.
       * @method
       * @param {string} facet name of the attribute for used for faceting
       * @param {string} value, optional value. If passed will test that this value
       * is filtering the given facet.
       * @return {boolean} returns true if refined
       */
      isFacetRefined: function isFacetRefined(facet, value) {
        if (!this.isConjunctiveFacet(facet)) {
          return false;
        }
        return RefinementList2.isRefined(this.facetsRefinements, facet, value);
      },
      /**
       * Returns true if the facet contains exclusions or if a specific value is
       * excluded.
       *
       * @method
       * @param {string} facet name of the attribute for used for faceting
       * @param {string} [value] optional value. If passed will test that this value
       * is filtering the given facet.
       * @return {boolean} returns true if refined
       */
      isExcludeRefined: function isExcludeRefined(facet, value) {
        if (!this.isConjunctiveFacet(facet)) {
          return false;
        }
        return RefinementList2.isRefined(this.facetsExcludes, facet, value);
      },
      /**
       * Returns true if the facet contains a refinement, or if a value passed is a
       * refinement for the facet.
       * @method
       * @param {string} facet name of the attribute for used for faceting
       * @param {string} value optional, will test if the value is used for refinement
       * if there is one, otherwise will test if the facet contains any refinement
       * @return {boolean}
       */
      isDisjunctiveFacetRefined: function isDisjunctiveFacetRefined(facet, value) {
        if (!this.isDisjunctiveFacet(facet)) {
          return false;
        }
        return RefinementList2.isRefined(this.disjunctiveFacetsRefinements, facet, value);
      },
      /**
       * Returns true if the facet contains a refinement, or if a value passed is a
       * refinement for the facet.
       * @method
       * @param {string} facet name of the attribute for used for faceting
       * @param {string} value optional, will test if the value is used for refinement
       * if there is one, otherwise will test if the facet contains any refinement
       * @return {boolean}
       */
      isHierarchicalFacetRefined: function isHierarchicalFacetRefined(facet, value) {
        if (!this.isHierarchicalFacet(facet)) {
          return false;
        }
        var refinements = this.getHierarchicalRefinement(facet);
        if (!value) {
          return refinements.length > 0;
        }
        return refinements.indexOf(value) !== -1;
      },
      /**
       * Test if the triple (attribute, operator, value) is already refined.
       * If only the attribute and the operator are provided, it tests if the
       * contains any refinement value.
       * @method
       * @param {string} attribute attribute for which the refinement is applied
       * @param {string} [operator] operator of the refinement
       * @param {string} [value] value of the refinement
       * @return {boolean} true if it is refined
       */
      isNumericRefined: function isNumericRefined(attribute, operator, value) {
        if (value === void 0 && operator === void 0) {
          return !!this.numericRefinements[attribute];
        }
        var isOperatorDefined = this.numericRefinements[attribute] && this.numericRefinements[attribute][operator] !== void 0;
        if (value === void 0 || !isOperatorDefined) {
          return isOperatorDefined;
        }
        var parsedValue = valToNumber(value);
        var isAttributeValueDefined = findArray(this.numericRefinements[attribute][operator], parsedValue) !== void 0;
        return isOperatorDefined && isAttributeValueDefined;
      },
      /**
       * Returns true if the tag refined, false otherwise
       * @method
       * @param {string} tag the tag to check
       * @return {boolean}
       */
      isTagRefined: function isTagRefined(tag) {
        return this.tagRefinements.indexOf(tag) !== -1;
      },
      /**
       * Returns the list of all disjunctive facets refined
       * @method
       * @param {string} facet name of the attribute used for faceting
       * @param {value} value value used for filtering
       * @return {string[]}
       */
      getRefinedDisjunctiveFacets: function getRefinedDisjunctiveFacets() {
        var self = this;
        var disjunctiveNumericRefinedFacets = intersection(
          Object.keys(this.numericRefinements).filter(function(facet) {
            return Object.keys(self.numericRefinements[facet]).length > 0;
          }),
          this.disjunctiveFacets
        );
        return Object.keys(this.disjunctiveFacetsRefinements).filter(function(facet) {
          return self.disjunctiveFacetsRefinements[facet].length > 0;
        }).concat(disjunctiveNumericRefinedFacets).concat(this.getRefinedHierarchicalFacets());
      },
      /**
       * Returns the list of all disjunctive facets refined
       * @method
       * @param {string} facet name of the attribute used for faceting
       * @param {value} value value used for filtering
       * @return {string[]}
       */
      getRefinedHierarchicalFacets: function getRefinedHierarchicalFacets() {
        var self = this;
        return intersection(
          // enforce the order between the two arrays,
          // so that refinement name index === hierarchical facet index
          this.hierarchicalFacets.map(function(facet) {
            return facet.name;
          }),
          Object.keys(this.hierarchicalFacetsRefinements).filter(function(facet) {
            return self.hierarchicalFacetsRefinements[facet].length > 0;
          })
        );
      },
      /**
       * Returned the list of all disjunctive facets not refined
       * @method
       * @return {string[]}
       */
      getUnrefinedDisjunctiveFacets: function() {
        var refinedFacets = this.getRefinedDisjunctiveFacets();
        return this.disjunctiveFacets.filter(function(f) {
          return refinedFacets.indexOf(f) === -1;
        });
      },
      managedParameters: [
        "index",
        "facets",
        "disjunctiveFacets",
        "facetsRefinements",
        "hierarchicalFacets",
        "facetsExcludes",
        "disjunctiveFacetsRefinements",
        "numericRefinements",
        "tagRefinements",
        "hierarchicalFacetsRefinements"
      ],
      getQueryParams: function getQueryParams() {
        var managedParameters = this.managedParameters;
        var queryParams = {};
        var self = this;
        Object.keys(this).forEach(function(paramName) {
          var paramValue = self[paramName];
          if (managedParameters.indexOf(paramName) === -1 && paramValue !== void 0) {
            queryParams[paramName] = paramValue;
          }
        });
        return queryParams;
      },
      /**
       * Let the user set a specific value for a given parameter. Will return the
       * same instance if the parameter is invalid or if the value is the same as the
       * previous one.
       * @method
       * @param {string} parameter the parameter name
       * @param {any} value the value to be set, must be compliant with the definition
       * of the attribute on the object
       * @return {SearchParameters} the updated state
       */
      setQueryParameter: function setParameter(parameter, value) {
        if (this[parameter] === value)
          return this;
        var modification = {};
        modification[parameter] = value;
        return this.setQueryParameters(modification);
      },
      /**
       * Let the user set any of the parameters with a plain object.
       * @method
       * @param {object} params all the keys and the values to be updated
       * @return {SearchParameters} a new updated instance
       */
      setQueryParameters: function setQueryParameters(params) {
        if (!params)
          return this;
        var error = SearchParameters.validate(this, params);
        if (error) {
          throw error;
        }
        var self = this;
        var nextWithNumbers = SearchParameters._parseNumbers(params);
        var previousPlainObject = Object.keys(this).reduce(function(acc, key) {
          acc[key] = self[key];
          return acc;
        }, {});
        var nextPlainObject = Object.keys(nextWithNumbers).reduce(
          function(previous, key) {
            var isPreviousValueDefined = previous[key] !== void 0;
            var isNextValueDefined = nextWithNumbers[key] !== void 0;
            if (isPreviousValueDefined && !isNextValueDefined) {
              return omit2(previous, [key]);
            }
            if (isNextValueDefined) {
              previous[key] = nextWithNumbers[key];
            }
            return previous;
          },
          previousPlainObject
        );
        return new this.constructor(nextPlainObject);
      },
      /**
       * Returns a new instance with the page reset. Two scenarios possible:
       * the page is omitted -> return the given instance
       * the page is set -> return a new instance with a page of 0
       * @return {SearchParameters} a new updated instance
       */
      resetPage: function() {
        if (this.page === void 0) {
          return this;
        }
        return this.setPage(0);
      },
      /**
       * Helper function to get the hierarchicalFacet separator or the default one (`>`)
       * @param  {object} hierarchicalFacet
       * @return {string} returns the hierarchicalFacet.separator or `>` as default
       */
      _getHierarchicalFacetSortBy: function(hierarchicalFacet) {
        return hierarchicalFacet.sortBy || ["isRefined:desc", "name:asc"];
      },
      /**
       * Helper function to get the hierarchicalFacet separator or the default one (`>`)
       * @private
       * @param  {object} hierarchicalFacet
       * @return {string} returns the hierarchicalFacet.separator or `>` as default
       */
      _getHierarchicalFacetSeparator: function(hierarchicalFacet) {
        return hierarchicalFacet.separator || " > ";
      },
      /**
       * Helper function to get the hierarchicalFacet prefix path or null
       * @private
       * @param  {object} hierarchicalFacet
       * @return {string} returns the hierarchicalFacet.rootPath or null as default
       */
      _getHierarchicalRootPath: function(hierarchicalFacet) {
        return hierarchicalFacet.rootPath || null;
      },
      /**
       * Helper function to check if we show the parent level of the hierarchicalFacet
       * @private
       * @param  {object} hierarchicalFacet
       * @return {string} returns the hierarchicalFacet.showParentLevel or true as default
       */
      _getHierarchicalShowParentLevel: function(hierarchicalFacet) {
        if (typeof hierarchicalFacet.showParentLevel === "boolean") {
          return hierarchicalFacet.showParentLevel;
        }
        return true;
      },
      /**
       * Helper function to get the hierarchicalFacet by it's name
       * @param  {string} hierarchicalFacetName
       * @return {object} a hierarchicalFacet
       */
      getHierarchicalFacetByName: function(hierarchicalFacetName) {
        return find3(
          this.hierarchicalFacets,
          function(f) {
            return f.name === hierarchicalFacetName;
          }
        );
      },
      /**
       * Get the current breadcrumb for a hierarchical facet, as an array
       * @param  {string} facetName Hierarchical facet name
       * @return {array.<string>} the path as an array of string
       */
      getHierarchicalFacetBreadcrumb: function(facetName) {
        if (!this.isHierarchicalFacet(facetName)) {
          return [];
        }
        var refinement = this.getHierarchicalRefinement(facetName)[0];
        if (!refinement)
          return [];
        var separator = this._getHierarchicalFacetSeparator(
          this.getHierarchicalFacetByName(facetName)
        );
        var path = refinement.split(separator);
        return path.map(function(part) {
          return part.trim();
        });
      },
      toString: function() {
        return JSON.stringify(this, null, 2);
      }
    };
    module.exports = SearchParameters;
  }
});

// ../node_modules/algoliasearch-helper/src/functions/orderBy.js
var require_orderBy = __commonJS({
  "../node_modules/algoliasearch-helper/src/functions/orderBy.js"(exports, module) {
    "use strict";
    function compareAscending(value, other) {
      if (value !== other) {
        var valIsDefined = value !== void 0;
        var valIsNull = value === null;
        var othIsDefined = other !== void 0;
        var othIsNull = other === null;
        if (!othIsNull && value > other || valIsNull && othIsDefined || !valIsDefined) {
          return 1;
        }
        if (!valIsNull && value < other || othIsNull && valIsDefined || !othIsDefined) {
          return -1;
        }
      }
      return 0;
    }
    function orderBy(collection, iteratees, orders) {
      if (!Array.isArray(collection)) {
        return [];
      }
      if (!Array.isArray(orders)) {
        orders = [];
      }
      var result = collection.map(function(value, index) {
        return {
          criteria: iteratees.map(function(iteratee) {
            return value[iteratee];
          }),
          index,
          value
        };
      });
      result.sort(function comparer(object, other) {
        var index = -1;
        while (++index < object.criteria.length) {
          var res = compareAscending(object.criteria[index], other.criteria[index]);
          if (res) {
            if (index >= orders.length) {
              return res;
            }
            if (orders[index] === "desc") {
              return -res;
            }
            return res;
          }
        }
        return object.index - other.index;
      });
      return result.map(function(res) {
        return res.value;
      });
    }
    module.exports = orderBy;
  }
});

// ../node_modules/algoliasearch-helper/src/functions/compact.js
var require_compact = __commonJS({
  "../node_modules/algoliasearch-helper/src/functions/compact.js"(exports, module) {
    "use strict";
    module.exports = function compact(array) {
      if (!Array.isArray(array)) {
        return [];
      }
      return array.filter(Boolean);
    };
  }
});

// ../node_modules/algoliasearch-helper/src/functions/findIndex.js
var require_findIndex = __commonJS({
  "../node_modules/algoliasearch-helper/src/functions/findIndex.js"(exports, module) {
    "use strict";
    module.exports = function find3(array, comparator) {
      if (!Array.isArray(array)) {
        return -1;
      }
      for (var i = 0; i < array.length; i++) {
        if (comparator(array[i])) {
          return i;
        }
      }
      return -1;
    };
  }
});

// ../node_modules/algoliasearch-helper/src/functions/formatSort.js
var require_formatSort = __commonJS({
  "../node_modules/algoliasearch-helper/src/functions/formatSort.js"(exports, module) {
    "use strict";
    var find3 = require_find();
    module.exports = function formatSort(sortBy3, defaults) {
      var defaultInstructions = (defaults || []).map(function(sort) {
        return sort.split(":");
      });
      return sortBy3.reduce(
        function preparePredicate(out, sort) {
          var sortInstruction = sort.split(":");
          var matchingDefault = find3(defaultInstructions, function(defaultInstruction) {
            return defaultInstruction[0] === sortInstruction[0];
          });
          if (sortInstruction.length > 1 || !matchingDefault) {
            out[0].push(sortInstruction[0]);
            out[1].push(sortInstruction[1]);
            return out;
          }
          out[0].push(matchingDefault[0]);
          out[1].push(matchingDefault[1]);
          return out;
        },
        [[], []]
      );
    };
  }
});

// ../node_modules/algoliasearch-helper/src/functions/escapeFacetValue.js
var require_escapeFacetValue = __commonJS({
  "../node_modules/algoliasearch-helper/src/functions/escapeFacetValue.js"(exports, module) {
    "use strict";
    function escapeFacetValue(value) {
      if (typeof value !== "string")
        return value;
      return String(value).replace(/^-/, "\\-");
    }
    function unescapeFacetValue2(value) {
      if (typeof value !== "string")
        return value;
      return value.replace(/^\\-/, "-");
    }
    module.exports = {
      escapeFacetValue,
      unescapeFacetValue: unescapeFacetValue2
    };
  }
});

// ../node_modules/algoliasearch-helper/src/SearchResults/generate-hierarchical-tree.js
var require_generate_hierarchical_tree = __commonJS({
  "../node_modules/algoliasearch-helper/src/SearchResults/generate-hierarchical-tree.js"(exports, module) {
    "use strict";
    module.exports = generateTrees;
    var orderBy = require_orderBy();
    var find3 = require_find();
    var prepareHierarchicalFacetSortBy = require_formatSort();
    var fv = require_escapeFacetValue();
    var escapeFacetValue = fv.escapeFacetValue;
    var unescapeFacetValue2 = fv.unescapeFacetValue;
    function generateTrees(state) {
      return function generate(hierarchicalFacetResult, hierarchicalFacetIndex) {
        var hierarchicalFacet = state.hierarchicalFacets[hierarchicalFacetIndex];
        var hierarchicalFacetRefinement = state.hierarchicalFacetsRefinements[hierarchicalFacet.name] && state.hierarchicalFacetsRefinements[hierarchicalFacet.name][0] || "";
        var hierarchicalSeparator = state._getHierarchicalFacetSeparator(
          hierarchicalFacet
        );
        var hierarchicalRootPath = state._getHierarchicalRootPath(
          hierarchicalFacet
        );
        var hierarchicalShowParentLevel = state._getHierarchicalShowParentLevel(
          hierarchicalFacet
        );
        var sortBy3 = prepareHierarchicalFacetSortBy(
          state._getHierarchicalFacetSortBy(hierarchicalFacet)
        );
        var rootExhaustive = hierarchicalFacetResult.every(function(facetResult) {
          return facetResult.exhaustive;
        });
        var generateTreeFn = generateHierarchicalTree(
          sortBy3,
          hierarchicalSeparator,
          hierarchicalRootPath,
          hierarchicalShowParentLevel,
          hierarchicalFacetRefinement
        );
        var results = hierarchicalFacetResult;
        if (hierarchicalRootPath) {
          results = hierarchicalFacetResult.slice(
            hierarchicalRootPath.split(hierarchicalSeparator).length
          );
        }
        return results.reduce(generateTreeFn, {
          name: state.hierarchicalFacets[hierarchicalFacetIndex].name,
          count: null,
          // root level, no count
          isRefined: true,
          // root level, always refined
          path: null,
          // root level, no path
          escapedValue: null,
          exhaustive: rootExhaustive,
          data: null
        });
      };
    }
    function generateHierarchicalTree(sortBy3, hierarchicalSeparator, hierarchicalRootPath, hierarchicalShowParentLevel, currentRefinement) {
      return function generateTree(hierarchicalTree, hierarchicalFacetResult, currentHierarchicalLevel) {
        var parent = hierarchicalTree;
        if (currentHierarchicalLevel > 0) {
          var level = 0;
          parent = hierarchicalTree;
          while (level < currentHierarchicalLevel) {
            var data = parent && Array.isArray(parent.data) ? parent.data : [];
            parent = find3(data, function(subtree) {
              return subtree.isRefined;
            });
            level++;
          }
        }
        if (parent) {
          var picked = Object.keys(hierarchicalFacetResult.data).map(function(facetValue) {
            return [facetValue, hierarchicalFacetResult.data[facetValue]];
          }).filter(function(tuple) {
            var facetValue = tuple[0];
            return onlyMatchingTree(
              facetValue,
              parent.path || hierarchicalRootPath,
              currentRefinement,
              hierarchicalSeparator,
              hierarchicalRootPath,
              hierarchicalShowParentLevel
            );
          });
          parent.data = orderBy(
            picked.map(function(tuple) {
              var facetValue = tuple[0];
              var facetCount = tuple[1];
              return format(
                facetCount,
                facetValue,
                hierarchicalSeparator,
                unescapeFacetValue2(currentRefinement),
                hierarchicalFacetResult.exhaustive
              );
            }),
            sortBy3[0],
            sortBy3[1]
          );
        }
        return hierarchicalTree;
      };
    }
    function onlyMatchingTree(facetValue, parentPath, currentRefinement, hierarchicalSeparator, hierarchicalRootPath, hierarchicalShowParentLevel) {
      if (hierarchicalRootPath && (facetValue.indexOf(hierarchicalRootPath) !== 0 || hierarchicalRootPath === facetValue)) {
        return false;
      }
      return !hierarchicalRootPath && facetValue.indexOf(hierarchicalSeparator) === -1 || // if there is a rootPath, being root level mean 1 level under rootPath
      hierarchicalRootPath && facetValue.split(hierarchicalSeparator).length - hierarchicalRootPath.split(hierarchicalSeparator).length === 1 || // if current refinement is a root level and current facetValue is a root level,
      // keep the facetValue
      facetValue.indexOf(hierarchicalSeparator) === -1 && currentRefinement.indexOf(hierarchicalSeparator) === -1 || // currentRefinement is a child of the facet value
      currentRefinement.indexOf(facetValue) === 0 || // facetValue is a child of the current parent, add it
      facetValue.indexOf(parentPath + hierarchicalSeparator) === 0 && (hierarchicalShowParentLevel || facetValue.indexOf(currentRefinement) === 0);
    }
    function format(facetCount, facetValue, hierarchicalSeparator, currentRefinement, exhaustive) {
      var parts = facetValue.split(hierarchicalSeparator);
      return {
        name: parts[parts.length - 1].trim(),
        path: facetValue,
        escapedValue: escapeFacetValue(facetValue),
        count: facetCount,
        isRefined: currentRefinement === facetValue || currentRefinement.indexOf(facetValue + hierarchicalSeparator) === 0,
        exhaustive,
        data: null
      };
    }
  }
});

// ../node_modules/algoliasearch-helper/src/SearchResults/index.js
var require_SearchResults = __commonJS({
  "../node_modules/algoliasearch-helper/src/SearchResults/index.js"(exports, module) {
    "use strict";
    var merge = require_merge();
    var defaultsPure = require_defaultsPure();
    var orderBy = require_orderBy();
    var compact = require_compact();
    var find3 = require_find();
    var findIndex = require_findIndex();
    var formatSort = require_formatSort();
    var fv = require_escapeFacetValue();
    var escapeFacetValue = fv.escapeFacetValue;
    var unescapeFacetValue2 = fv.unescapeFacetValue;
    var generateHierarchicalTree = require_generate_hierarchical_tree();
    function getIndices(attributes3) {
      var indices = {};
      attributes3.forEach(function(val, idx) {
        indices[val] = idx;
      });
      return indices;
    }
    function assignFacetStats(dest, facetStats, key) {
      if (facetStats && facetStats[key]) {
        dest.stats = facetStats[key];
      }
    }
    function findMatchingHierarchicalFacetFromAttributeName(hierarchicalFacets, hierarchicalAttributeName) {
      return find3(hierarchicalFacets, function facetKeyMatchesAttribute(hierarchicalFacet) {
        var facetNames = hierarchicalFacet.attributes || [];
        return facetNames.indexOf(hierarchicalAttributeName) > -1;
      });
    }
    function SearchResults(state, results, options) {
      var mainSubResponse = results[0];
      this._rawResults = results;
      var self = this;
      Object.keys(mainSubResponse).forEach(function(key) {
        self[key] = mainSubResponse[key];
      });
      Object.keys(options || {}).forEach(function(key) {
        self[key] = options[key];
      });
      this.processingTimeMS = results.reduce(function(sum, result) {
        return result.processingTimeMS === void 0 ? sum : sum + result.processingTimeMS;
      }, 0);
      this.disjunctiveFacets = [];
      this.hierarchicalFacets = state.hierarchicalFacets.map(function initFutureTree() {
        return [];
      });
      this.facets = [];
      var disjunctiveFacets = state.getRefinedDisjunctiveFacets();
      var facetsIndices = getIndices(state.facets);
      var disjunctiveFacetsIndices = getIndices(state.disjunctiveFacets);
      var nextDisjunctiveResult = 1;
      var mainFacets = mainSubResponse.facets || {};
      Object.keys(mainFacets).forEach(function(facetKey) {
        var facetValueObject = mainFacets[facetKey];
        var hierarchicalFacet = findMatchingHierarchicalFacetFromAttributeName(
          state.hierarchicalFacets,
          facetKey
        );
        if (hierarchicalFacet) {
          var facetIndex = hierarchicalFacet.attributes.indexOf(facetKey);
          var idxAttributeName = findIndex(state.hierarchicalFacets, function(f) {
            return f.name === hierarchicalFacet.name;
          });
          self.hierarchicalFacets[idxAttributeName][facetIndex] = {
            attribute: facetKey,
            data: facetValueObject,
            exhaustive: mainSubResponse.exhaustiveFacetsCount
          };
        } else {
          var isFacetDisjunctive = state.disjunctiveFacets.indexOf(facetKey) !== -1;
          var isFacetConjunctive = state.facets.indexOf(facetKey) !== -1;
          var position;
          if (isFacetDisjunctive) {
            position = disjunctiveFacetsIndices[facetKey];
            self.disjunctiveFacets[position] = {
              name: facetKey,
              data: facetValueObject,
              exhaustive: mainSubResponse.exhaustiveFacetsCount
            };
            assignFacetStats(self.disjunctiveFacets[position], mainSubResponse.facets_stats, facetKey);
          }
          if (isFacetConjunctive) {
            position = facetsIndices[facetKey];
            self.facets[position] = {
              name: facetKey,
              data: facetValueObject,
              exhaustive: mainSubResponse.exhaustiveFacetsCount
            };
            assignFacetStats(self.facets[position], mainSubResponse.facets_stats, facetKey);
          }
        }
      });
      this.hierarchicalFacets = compact(this.hierarchicalFacets);
      disjunctiveFacets.forEach(function(disjunctiveFacet) {
        var result = results[nextDisjunctiveResult];
        var facets = result && result.facets ? result.facets : {};
        var hierarchicalFacet = state.getHierarchicalFacetByName(disjunctiveFacet);
        Object.keys(facets).forEach(function(dfacet) {
          var facetResults = facets[dfacet];
          var position;
          if (hierarchicalFacet) {
            position = findIndex(state.hierarchicalFacets, function(f) {
              return f.name === hierarchicalFacet.name;
            });
            var attributeIndex = findIndex(self.hierarchicalFacets[position], function(f) {
              return f.attribute === dfacet;
            });
            if (attributeIndex === -1) {
              return;
            }
            self.hierarchicalFacets[position][attributeIndex].data = merge(
              {},
              self.hierarchicalFacets[position][attributeIndex].data,
              facetResults
            );
          } else {
            position = disjunctiveFacetsIndices[dfacet];
            var dataFromMainRequest = mainSubResponse.facets && mainSubResponse.facets[dfacet] || {};
            self.disjunctiveFacets[position] = {
              name: dfacet,
              data: defaultsPure({}, facetResults, dataFromMainRequest),
              exhaustive: result.exhaustiveFacetsCount
            };
            assignFacetStats(self.disjunctiveFacets[position], result.facets_stats, dfacet);
            if (state.disjunctiveFacetsRefinements[dfacet]) {
              state.disjunctiveFacetsRefinements[dfacet].forEach(function(refinementValue) {
                if (!self.disjunctiveFacets[position].data[refinementValue] && state.disjunctiveFacetsRefinements[dfacet].indexOf(unescapeFacetValue2(refinementValue)) > -1) {
                  self.disjunctiveFacets[position].data[refinementValue] = 0;
                }
              });
            }
          }
        });
        nextDisjunctiveResult++;
      });
      state.getRefinedHierarchicalFacets().forEach(function(refinedFacet) {
        var hierarchicalFacet = state.getHierarchicalFacetByName(refinedFacet);
        var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);
        var currentRefinement = state.getHierarchicalRefinement(refinedFacet);
        if (currentRefinement.length === 0 || currentRefinement[0].split(separator).length < 2) {
          return;
        }
        results.slice(nextDisjunctiveResult).forEach(function(result) {
          var facets = result && result.facets ? result.facets : {};
          Object.keys(facets).forEach(function(dfacet) {
            var facetResults = facets[dfacet];
            var position = findIndex(state.hierarchicalFacets, function(f) {
              return f.name === hierarchicalFacet.name;
            });
            var attributeIndex = findIndex(self.hierarchicalFacets[position], function(f) {
              return f.attribute === dfacet;
            });
            if (attributeIndex === -1) {
              return;
            }
            var defaultData = {};
            if (currentRefinement.length > 0) {
              var root = currentRefinement[0].split(separator)[0];
              defaultData[root] = self.hierarchicalFacets[position][attributeIndex].data[root];
            }
            self.hierarchicalFacets[position][attributeIndex].data = defaultsPure(
              defaultData,
              facetResults,
              self.hierarchicalFacets[position][attributeIndex].data
            );
          });
          nextDisjunctiveResult++;
        });
      });
      Object.keys(state.facetsExcludes).forEach(function(facetName) {
        var excludes = state.facetsExcludes[facetName];
        var position = facetsIndices[facetName];
        self.facets[position] = {
          name: facetName,
          data: mainSubResponse.facets[facetName],
          exhaustive: mainSubResponse.exhaustiveFacetsCount
        };
        excludes.forEach(function(facetValue) {
          self.facets[position] = self.facets[position] || { name: facetName };
          self.facets[position].data = self.facets[position].data || {};
          self.facets[position].data[facetValue] = 0;
        });
      });
      this.hierarchicalFacets = this.hierarchicalFacets.map(generateHierarchicalTree(state));
      this.facets = compact(this.facets);
      this.disjunctiveFacets = compact(this.disjunctiveFacets);
      this._state = state;
    }
    SearchResults.prototype.getFacetByName = function(name) {
      function predicate(facet) {
        return facet.name === name;
      }
      return find3(this.facets, predicate) || find3(this.disjunctiveFacets, predicate) || find3(this.hierarchicalFacets, predicate);
    };
    function extractNormalizedFacetValues(results, attribute) {
      function predicate(facet2) {
        return facet2.name === attribute;
      }
      if (results._state.isConjunctiveFacet(attribute)) {
        var facet = find3(results.facets, predicate);
        if (!facet)
          return [];
        return Object.keys(facet.data).map(function(name) {
          var value = escapeFacetValue(name);
          return {
            name,
            escapedValue: value,
            count: facet.data[name],
            isRefined: results._state.isFacetRefined(attribute, value),
            isExcluded: results._state.isExcludeRefined(attribute, name)
          };
        });
      } else if (results._state.isDisjunctiveFacet(attribute)) {
        var disjunctiveFacet = find3(results.disjunctiveFacets, predicate);
        if (!disjunctiveFacet)
          return [];
        return Object.keys(disjunctiveFacet.data).map(function(name) {
          var value = escapeFacetValue(name);
          return {
            name,
            escapedValue: value,
            count: disjunctiveFacet.data[name],
            isRefined: results._state.isDisjunctiveFacetRefined(attribute, value)
          };
        });
      } else if (results._state.isHierarchicalFacet(attribute)) {
        var hierarchicalFacetValues = find3(results.hierarchicalFacets, predicate);
        if (!hierarchicalFacetValues)
          return hierarchicalFacetValues;
        var hierarchicalFacet = results._state.getHierarchicalFacetByName(attribute);
        var currentRefinementSplit = unescapeFacetValue2(
          results._state.getHierarchicalRefinement(attribute)[0] || ""
        ).split(results._state._getHierarchicalFacetSeparator(hierarchicalFacet));
        currentRefinementSplit.unshift(attribute);
        setIsRefined(hierarchicalFacetValues, currentRefinementSplit, 0);
        return hierarchicalFacetValues;
      }
    }
    function setIsRefined(item, currentRefinement, depth) {
      item.isRefined = item.name === currentRefinement[depth];
      if (item.data) {
        item.data.forEach(function(child) {
          setIsRefined(child, currentRefinement, depth + 1);
        });
      }
    }
    function recSort(sortFn, node, names, level) {
      level = level || 0;
      if (Array.isArray(node)) {
        return sortFn(node, names[level]);
      }
      if (!node.data || node.data.length === 0) {
        return node;
      }
      var children = node.data.map(function(childNode) {
        return recSort(sortFn, childNode, names, level + 1);
      });
      var sortedChildren = sortFn(children, names[level]);
      var newNode = defaultsPure({ data: sortedChildren }, node);
      return newNode;
    }
    SearchResults.DEFAULT_SORT = ["isRefined:desc", "count:desc", "name:asc"];
    function vanillaSortFn(order, data) {
      return data.sort(order);
    }
    function sortViaFacetOrdering(facetValues, facetOrdering) {
      var orderedFacets = [];
      var remainingFacets = [];
      var order = facetOrdering.order || [];
      var reverseOrder = order.reduce(function(acc, name, i) {
        acc[name] = i;
        return acc;
      }, {});
      facetValues.forEach(function(item) {
        var name = item.path || item.name;
        if (reverseOrder[name] !== void 0) {
          orderedFacets[reverseOrder[name]] = item;
        } else {
          remainingFacets.push(item);
        }
      });
      orderedFacets = orderedFacets.filter(function(facet) {
        return facet;
      });
      var sortRemainingBy = facetOrdering.sortRemainingBy;
      var ordering;
      if (sortRemainingBy === "hidden") {
        return orderedFacets;
      } else if (sortRemainingBy === "alpha") {
        ordering = [["path", "name"], ["asc", "asc"]];
      } else {
        ordering = [["count"], ["desc"]];
      }
      return orderedFacets.concat(
        orderBy(remainingFacets, ordering[0], ordering[1])
      );
    }
    function getFacetOrdering(results, attribute) {
      return results.renderingContent && results.renderingContent.facetOrdering && results.renderingContent.facetOrdering.values && results.renderingContent.facetOrdering.values[attribute];
    }
    SearchResults.prototype.getFacetValues = function(attribute, opts) {
      var facetValues = extractNormalizedFacetValues(this, attribute);
      if (!facetValues) {
        return void 0;
      }
      var options = defaultsPure({}, opts, {
        sortBy: SearchResults.DEFAULT_SORT,
        // if no sortBy is given, attempt to sort based on facetOrdering
        // if it is given, we still allow to sort via facet ordering first
        facetOrdering: !(opts && opts.sortBy)
      });
      var results = this;
      var attributes3;
      if (Array.isArray(facetValues)) {
        attributes3 = [attribute];
      } else {
        var config = results._state.getHierarchicalFacetByName(facetValues.name);
        attributes3 = config.attributes;
      }
      return recSort(function(data, facetName) {
        if (options.facetOrdering) {
          var facetOrdering = getFacetOrdering(results, facetName);
          if (Boolean(facetOrdering)) {
            return sortViaFacetOrdering(data, facetOrdering);
          }
        }
        if (Array.isArray(options.sortBy)) {
          var order = formatSort(options.sortBy, SearchResults.DEFAULT_SORT);
          return orderBy(data, order[0], order[1]);
        } else if (typeof options.sortBy === "function") {
          return vanillaSortFn(options.sortBy, data);
        }
        throw new Error(
          "options.sortBy is optional but if defined it must be either an array of string (predicates) or a sorting function"
        );
      }, facetValues, attributes3);
    };
    SearchResults.prototype.getFacetStats = function(attribute) {
      if (this._state.isConjunctiveFacet(attribute)) {
        return getFacetStatsIfAvailable(this.facets, attribute);
      } else if (this._state.isDisjunctiveFacet(attribute)) {
        return getFacetStatsIfAvailable(this.disjunctiveFacets, attribute);
      }
      return void 0;
    };
    function getFacetStatsIfAvailable(facetList, facetName) {
      var data = find3(facetList, function(facet) {
        return facet.name === facetName;
      });
      return data && data.stats;
    }
    SearchResults.prototype.getRefinements = function() {
      var state = this._state;
      var results = this;
      var res = [];
      Object.keys(state.facetsRefinements).forEach(function(attributeName) {
        state.facetsRefinements[attributeName].forEach(function(name) {
          res.push(getRefinement(state, "facet", attributeName, name, results.facets));
        });
      });
      Object.keys(state.facetsExcludes).forEach(function(attributeName) {
        state.facetsExcludes[attributeName].forEach(function(name) {
          res.push(getRefinement(state, "exclude", attributeName, name, results.facets));
        });
      });
      Object.keys(state.disjunctiveFacetsRefinements).forEach(function(attributeName) {
        state.disjunctiveFacetsRefinements[attributeName].forEach(function(name) {
          res.push(getRefinement(state, "disjunctive", attributeName, name, results.disjunctiveFacets));
        });
      });
      Object.keys(state.hierarchicalFacetsRefinements).forEach(function(attributeName) {
        state.hierarchicalFacetsRefinements[attributeName].forEach(function(name) {
          res.push(getHierarchicalRefinement(state, attributeName, name, results.hierarchicalFacets));
        });
      });
      Object.keys(state.numericRefinements).forEach(function(attributeName) {
        var operators = state.numericRefinements[attributeName];
        Object.keys(operators).forEach(function(operator) {
          operators[operator].forEach(function(value) {
            res.push({
              type: "numeric",
              attributeName,
              name: value,
              numericValue: value,
              operator
            });
          });
        });
      });
      state.tagRefinements.forEach(function(name) {
        res.push({ type: "tag", attributeName: "_tags", name });
      });
      return res;
    };
    function getRefinement(state, type, attributeName, name, resultsFacets) {
      var facet = find3(resultsFacets, function(f) {
        return f.name === attributeName;
      });
      var count = facet && facet.data && facet.data[name] ? facet.data[name] : 0;
      var exhaustive = facet && facet.exhaustive || false;
      return {
        type,
        attributeName,
        name,
        count,
        exhaustive
      };
    }
    function getHierarchicalRefinement(state, attributeName, name, resultsFacets) {
      var facetDeclaration = state.getHierarchicalFacetByName(attributeName);
      var separator = state._getHierarchicalFacetSeparator(facetDeclaration);
      var split = name.split(separator);
      var rootFacet = find3(resultsFacets, function(facet2) {
        return facet2.name === attributeName;
      });
      var facet = split.reduce(function(intermediateFacet, part) {
        var newFacet = intermediateFacet && find3(intermediateFacet.data, function(f) {
          return f.name === part;
        });
        return newFacet !== void 0 ? newFacet : intermediateFacet;
      }, rootFacet);
      var count = facet && facet.count || 0;
      var exhaustive = facet && facet.exhaustive || false;
      var path = facet && facet.path || "";
      return {
        type: "hierarchical",
        attributeName,
        name: path,
        count,
        exhaustive
      };
    }
    module.exports = SearchResults;
  }
});

// ../node_modules/@algolia/events/events.js
var require_events = __commonJS({
  "../node_modules/@algolia/events/events.js"(exports, module) {
    function EventEmitter() {
      this._events = this._events || {};
      this._maxListeners = this._maxListeners || void 0;
    }
    module.exports = EventEmitter;
    EventEmitter.prototype._events = void 0;
    EventEmitter.prototype._maxListeners = void 0;
    EventEmitter.defaultMaxListeners = 10;
    EventEmitter.prototype.setMaxListeners = function(n) {
      if (!isNumber(n) || n < 0 || isNaN(n))
        throw TypeError("n must be a positive number");
      this._maxListeners = n;
      return this;
    };
    EventEmitter.prototype.emit = function(type) {
      var er, handler, len, args, i, listeners;
      if (!this._events)
        this._events = {};
      if (type === "error") {
        if (!this._events.error || isObject(this._events.error) && !this._events.error.length) {
          er = arguments[1];
          if (er instanceof Error) {
            throw er;
          } else {
            var err = new Error('Uncaught, unspecified "error" event. (' + er + ")");
            err.context = er;
            throw err;
          }
        }
      }
      handler = this._events[type];
      if (isUndefined(handler))
        return false;
      if (isFunction(handler)) {
        switch (arguments.length) {
          case 1:
            handler.call(this);
            break;
          case 2:
            handler.call(this, arguments[1]);
            break;
          case 3:
            handler.call(this, arguments[1], arguments[2]);
            break;
          default:
            args = Array.prototype.slice.call(arguments, 1);
            handler.apply(this, args);
        }
      } else if (isObject(handler)) {
        args = Array.prototype.slice.call(arguments, 1);
        listeners = handler.slice();
        len = listeners.length;
        for (i = 0; i < len; i++)
          listeners[i].apply(this, args);
      }
      return true;
    };
    EventEmitter.prototype.addListener = function(type, listener) {
      var m;
      if (!isFunction(listener))
        throw TypeError("listener must be a function");
      if (!this._events)
        this._events = {};
      if (this._events.newListener)
        this.emit(
          "newListener",
          type,
          isFunction(listener.listener) ? listener.listener : listener
        );
      if (!this._events[type])
        this._events[type] = listener;
      else if (isObject(this._events[type]))
        this._events[type].push(listener);
      else
        this._events[type] = [this._events[type], listener];
      if (isObject(this._events[type]) && !this._events[type].warned) {
        if (!isUndefined(this._maxListeners)) {
          m = this._maxListeners;
        } else {
          m = EventEmitter.defaultMaxListeners;
        }
        if (m && m > 0 && this._events[type].length > m) {
          this._events[type].warned = true;
          console.error(
            "(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.",
            this._events[type].length
          );
          if (typeof console.trace === "function") {
            console.trace();
          }
        }
      }
      return this;
    };
    EventEmitter.prototype.on = EventEmitter.prototype.addListener;
    EventEmitter.prototype.once = function(type, listener) {
      if (!isFunction(listener))
        throw TypeError("listener must be a function");
      var fired = false;
      function g() {
        this.removeListener(type, g);
        if (!fired) {
          fired = true;
          listener.apply(this, arguments);
        }
      }
      g.listener = listener;
      this.on(type, g);
      return this;
    };
    EventEmitter.prototype.removeListener = function(type, listener) {
      var list, position, length, i;
      if (!isFunction(listener))
        throw TypeError("listener must be a function");
      if (!this._events || !this._events[type])
        return this;
      list = this._events[type];
      length = list.length;
      position = -1;
      if (list === listener || isFunction(list.listener) && list.listener === listener) {
        delete this._events[type];
        if (this._events.removeListener)
          this.emit("removeListener", type, listener);
      } else if (isObject(list)) {
        for (i = length; i-- > 0; ) {
          if (list[i] === listener || list[i].listener && list[i].listener === listener) {
            position = i;
            break;
          }
        }
        if (position < 0)
          return this;
        if (list.length === 1) {
          list.length = 0;
          delete this._events[type];
        } else {
          list.splice(position, 1);
        }
        if (this._events.removeListener)
          this.emit("removeListener", type, listener);
      }
      return this;
    };
    EventEmitter.prototype.removeAllListeners = function(type) {
      var key, listeners;
      if (!this._events)
        return this;
      if (!this._events.removeListener) {
        if (arguments.length === 0)
          this._events = {};
        else if (this._events[type])
          delete this._events[type];
        return this;
      }
      if (arguments.length === 0) {
        for (key in this._events) {
          if (key === "removeListener")
            continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners("removeListener");
        this._events = {};
        return this;
      }
      listeners = this._events[type];
      if (isFunction(listeners)) {
        this.removeListener(type, listeners);
      } else if (listeners) {
        while (listeners.length)
          this.removeListener(type, listeners[listeners.length - 1]);
      }
      delete this._events[type];
      return this;
    };
    EventEmitter.prototype.listeners = function(type) {
      var ret;
      if (!this._events || !this._events[type])
        ret = [];
      else if (isFunction(this._events[type]))
        ret = [this._events[type]];
      else
        ret = this._events[type].slice();
      return ret;
    };
    EventEmitter.prototype.listenerCount = function(type) {
      if (this._events) {
        var evlistener = this._events[type];
        if (isFunction(evlistener))
          return 1;
        else if (evlistener)
          return evlistener.length;
      }
      return 0;
    };
    EventEmitter.listenerCount = function(emitter, type) {
      return emitter.listenerCount(type);
    };
    function isFunction(arg) {
      return typeof arg === "function";
    }
    function isNumber(arg) {
      return typeof arg === "number";
    }
    function isObject(arg) {
      return typeof arg === "object" && arg !== null;
    }
    function isUndefined(arg) {
      return arg === void 0;
    }
  }
});

// ../node_modules/algoliasearch-helper/src/functions/inherits.js
var require_inherits = __commonJS({
  "../node_modules/algoliasearch-helper/src/functions/inherits.js"(exports, module) {
    "use strict";
    function inherits(ctor, superCtor) {
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
    }
    module.exports = inherits;
  }
});

// ../node_modules/algoliasearch-helper/src/DerivedHelper/index.js
var require_DerivedHelper = __commonJS({
  "../node_modules/algoliasearch-helper/src/DerivedHelper/index.js"(exports, module) {
    "use strict";
    var EventEmitter = require_events();
    var inherits = require_inherits();
    function DerivedHelper(mainHelper, fn) {
      this.main = mainHelper;
      this.fn = fn;
      this.lastResults = null;
    }
    inherits(DerivedHelper, EventEmitter);
    DerivedHelper.prototype.detach = function() {
      this.removeAllListeners();
      this.main.detachDerivedHelper(this);
    };
    DerivedHelper.prototype.getModifiedState = function(parameters) {
      return this.fn(parameters);
    };
    module.exports = DerivedHelper;
  }
});

// ../node_modules/algoliasearch-helper/src/requestBuilder.js
var require_requestBuilder = __commonJS({
  "../node_modules/algoliasearch-helper/src/requestBuilder.js"(exports, module) {
    "use strict";
    var merge = require_merge();
    function sortObject(obj) {
      return Object.keys(obj).sort(function(a, b) {
        return a.localeCompare(b);
      }).reduce(function(acc, curr) {
        acc[curr] = obj[curr];
        return acc;
      }, {});
    }
    var requestBuilder = {
      /**
       * Get all the queries to send to the client, those queries can used directly
       * with the Algolia client.
       * @private
       * @return {object[]} The queries
       */
      _getQueries: function getQueries(index, state) {
        var queries = [];
        queries.push({
          indexName: index,
          params: requestBuilder._getHitsSearchParams(state)
        });
        state.getRefinedDisjunctiveFacets().forEach(function(refinedFacet) {
          queries.push({
            indexName: index,
            params: requestBuilder._getDisjunctiveFacetSearchParams(state, refinedFacet)
          });
        });
        state.getRefinedHierarchicalFacets().forEach(function(refinedFacet) {
          var hierarchicalFacet = state.getHierarchicalFacetByName(refinedFacet);
          var currentRefinement = state.getHierarchicalRefinement(refinedFacet);
          var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);
          if (currentRefinement.length > 0 && currentRefinement[0].split(separator).length > 1) {
            var filtersMap = currentRefinement[0].split(separator).slice(0, -1).reduce(
              function createFiltersMap(map, segment, level) {
                return map.concat({
                  attribute: hierarchicalFacet.attributes[level],
                  value: level === 0 ? segment : [map[map.length - 1].value, segment].join(separator)
                });
              },
              []
            );
            filtersMap.forEach(function(filter, level) {
              var params = requestBuilder._getDisjunctiveFacetSearchParams(
                state,
                filter.attribute,
                level === 0
              );
              function hasHierarchicalFacetFilter(value) {
                return hierarchicalFacet.attributes.some(function(attribute) {
                  return attribute === value.split(":")[0];
                });
              }
              var filteredFacetFilters = (params.facetFilters || []).reduce(function(acc, facetFilter) {
                if (Array.isArray(facetFilter)) {
                  var filtered = facetFilter.filter(function(filterValue) {
                    return !hasHierarchicalFacetFilter(filterValue);
                  });
                  if (filtered.length > 0) {
                    acc.push(filtered);
                  }
                }
                if (typeof facetFilter === "string" && !hasHierarchicalFacetFilter(facetFilter)) {
                  acc.push(facetFilter);
                }
                return acc;
              }, []);
              var parent = filtersMap[level - 1];
              if (level > 0) {
                params.facetFilters = filteredFacetFilters.concat(parent.attribute + ":" + parent.value);
              } else {
                params.facetFilters = filteredFacetFilters.length > 0 ? filteredFacetFilters : void 0;
              }
              queries.push({ indexName: index, params });
            });
          }
        });
        return queries;
      },
      /**
       * Build search parameters used to fetch hits
       * @private
       * @return {object.<string, any>}
       */
      _getHitsSearchParams: function(state) {
        var facets = state.facets.concat(state.disjunctiveFacets).concat(requestBuilder._getHitsHierarchicalFacetsAttributes(state));
        var facetFilters = requestBuilder._getFacetFilters(state);
        var numericFilters = requestBuilder._getNumericFilters(state);
        var tagFilters = requestBuilder._getTagFilters(state);
        var additionalParams = {
          facets: facets.indexOf("*") > -1 ? ["*"] : facets,
          tagFilters
        };
        if (facetFilters.length > 0) {
          additionalParams.facetFilters = facetFilters;
        }
        if (numericFilters.length > 0) {
          additionalParams.numericFilters = numericFilters;
        }
        return sortObject(merge({}, state.getQueryParams(), additionalParams));
      },
      /**
       * Build search parameters used to fetch a disjunctive facet
       * @private
       * @param  {string} facet the associated facet name
       * @param  {boolean} hierarchicalRootLevel ?? FIXME
       * @return {object}
       */
      _getDisjunctiveFacetSearchParams: function(state, facet, hierarchicalRootLevel) {
        var facetFilters = requestBuilder._getFacetFilters(state, facet, hierarchicalRootLevel);
        var numericFilters = requestBuilder._getNumericFilters(state, facet);
        var tagFilters = requestBuilder._getTagFilters(state);
        var additionalParams = {
          hitsPerPage: 0,
          page: 0,
          analytics: false,
          clickAnalytics: false
        };
        if (tagFilters.length > 0) {
          additionalParams.tagFilters = tagFilters;
        }
        var hierarchicalFacet = state.getHierarchicalFacetByName(facet);
        if (hierarchicalFacet) {
          additionalParams.facets = requestBuilder._getDisjunctiveHierarchicalFacetAttribute(
            state,
            hierarchicalFacet,
            hierarchicalRootLevel
          );
        } else {
          additionalParams.facets = facet;
        }
        if (numericFilters.length > 0) {
          additionalParams.numericFilters = numericFilters;
        }
        if (facetFilters.length > 0) {
          additionalParams.facetFilters = facetFilters;
        }
        return sortObject(merge({}, state.getQueryParams(), additionalParams));
      },
      /**
       * Return the numeric filters in an algolia request fashion
       * @private
       * @param {string} [facetName] the name of the attribute for which the filters should be excluded
       * @return {string[]} the numeric filters in the algolia format
       */
      _getNumericFilters: function(state, facetName) {
        if (state.numericFilters) {
          return state.numericFilters;
        }
        var numericFilters = [];
        Object.keys(state.numericRefinements).forEach(function(attribute) {
          var operators = state.numericRefinements[attribute] || {};
          Object.keys(operators).forEach(function(operator) {
            var values = operators[operator] || [];
            if (facetName !== attribute) {
              values.forEach(function(value) {
                if (Array.isArray(value)) {
                  var vs = value.map(function(v) {
                    return attribute + operator + v;
                  });
                  numericFilters.push(vs);
                } else {
                  numericFilters.push(attribute + operator + value);
                }
              });
            }
          });
        });
        return numericFilters;
      },
      /**
       * Return the tags filters depending
       * @private
       * @return {string}
       */
      _getTagFilters: function(state) {
        if (state.tagFilters) {
          return state.tagFilters;
        }
        return state.tagRefinements.join(",");
      },
      /**
       * Build facetFilters parameter based on current refinements. The array returned
       * contains strings representing the facet filters in the algolia format.
       * @private
       * @param  {string} [facet] if set, the current disjunctive facet
       * @return {array.<string>}
       */
      _getFacetFilters: function(state, facet, hierarchicalRootLevel) {
        var facetFilters = [];
        var facetsRefinements = state.facetsRefinements || {};
        Object.keys(facetsRefinements).forEach(function(facetName) {
          var facetValues = facetsRefinements[facetName] || [];
          facetValues.forEach(function(facetValue) {
            facetFilters.push(facetName + ":" + facetValue);
          });
        });
        var facetsExcludes = state.facetsExcludes || {};
        Object.keys(facetsExcludes).forEach(function(facetName) {
          var facetValues = facetsExcludes[facetName] || [];
          facetValues.forEach(function(facetValue) {
            facetFilters.push(facetName + ":-" + facetValue);
          });
        });
        var disjunctiveFacetsRefinements = state.disjunctiveFacetsRefinements || {};
        Object.keys(disjunctiveFacetsRefinements).forEach(function(facetName) {
          var facetValues = disjunctiveFacetsRefinements[facetName] || [];
          if (facetName === facet || !facetValues || facetValues.length === 0) {
            return;
          }
          var orFilters = [];
          facetValues.forEach(function(facetValue) {
            orFilters.push(facetName + ":" + facetValue);
          });
          facetFilters.push(orFilters);
        });
        var hierarchicalFacetsRefinements = state.hierarchicalFacetsRefinements || {};
        Object.keys(hierarchicalFacetsRefinements).forEach(function(facetName) {
          var facetValues = hierarchicalFacetsRefinements[facetName] || [];
          var facetValue = facetValues[0];
          if (facetValue === void 0) {
            return;
          }
          var hierarchicalFacet = state.getHierarchicalFacetByName(facetName);
          var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);
          var rootPath = state._getHierarchicalRootPath(hierarchicalFacet);
          var attributeToRefine;
          var attributesIndex;
          if (facet === facetName) {
            if (facetValue.indexOf(separator) === -1 || !rootPath && hierarchicalRootLevel === true || rootPath && rootPath.split(separator).length === facetValue.split(separator).length) {
              return;
            }
            if (!rootPath) {
              attributesIndex = facetValue.split(separator).length - 2;
              facetValue = facetValue.slice(0, facetValue.lastIndexOf(separator));
            } else {
              attributesIndex = rootPath.split(separator).length - 1;
              facetValue = rootPath;
            }
            attributeToRefine = hierarchicalFacet.attributes[attributesIndex];
          } else {
            attributesIndex = facetValue.split(separator).length - 1;
            attributeToRefine = hierarchicalFacet.attributes[attributesIndex];
          }
          if (attributeToRefine) {
            facetFilters.push([attributeToRefine + ":" + facetValue]);
          }
        });
        return facetFilters;
      },
      _getHitsHierarchicalFacetsAttributes: function(state) {
        var out = [];
        return state.hierarchicalFacets.reduce(
          // ask for as much levels as there's hierarchical refinements
          function getHitsAttributesForHierarchicalFacet(allAttributes, hierarchicalFacet) {
            var hierarchicalRefinement = state.getHierarchicalRefinement(hierarchicalFacet.name)[0];
            if (!hierarchicalRefinement) {
              allAttributes.push(hierarchicalFacet.attributes[0]);
              return allAttributes;
            }
            var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);
            var level = hierarchicalRefinement.split(separator).length;
            var newAttributes = hierarchicalFacet.attributes.slice(0, level + 1);
            return allAttributes.concat(newAttributes);
          },
          out
        );
      },
      _getDisjunctiveHierarchicalFacetAttribute: function(state, hierarchicalFacet, rootLevel) {
        var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);
        if (rootLevel === true) {
          var rootPath = state._getHierarchicalRootPath(hierarchicalFacet);
          var attributeIndex = 0;
          if (rootPath) {
            attributeIndex = rootPath.split(separator).length;
          }
          return [hierarchicalFacet.attributes[attributeIndex]];
        }
        var hierarchicalRefinement = state.getHierarchicalRefinement(hierarchicalFacet.name)[0] || "";
        var parentLevel = hierarchicalRefinement.split(separator).length - 1;
        return hierarchicalFacet.attributes.slice(0, parentLevel + 1);
      },
      getSearchForFacetQuery: function(facetName, query, maxFacetHits, state) {
        var stateForSearchForFacetValues = state.isDisjunctiveFacet(facetName) ? state.clearRefinements(facetName) : state;
        var searchForFacetSearchParameters = {
          facetQuery: query,
          facetName
        };
        if (typeof maxFacetHits === "number") {
          searchForFacetSearchParameters.maxFacetHits = maxFacetHits;
        }
        return sortObject(merge(
          {},
          requestBuilder._getHitsSearchParams(stateForSearchForFacetValues),
          searchForFacetSearchParameters
        ));
      }
    };
    module.exports = requestBuilder;
  }
});

// ../node_modules/algoliasearch-helper/src/version.js
var require_version = __commonJS({
  "../node_modules/algoliasearch-helper/src/version.js"(exports, module) {
    "use strict";
    module.exports = "3.11.3";
  }
});

// ../node_modules/algoliasearch-helper/src/algoliasearch.helper.js
var require_algoliasearch_helper = __commonJS({
  "../node_modules/algoliasearch-helper/src/algoliasearch.helper.js"(exports, module) {
    "use strict";
    var SearchParameters = require_SearchParameters();
    var SearchResults = require_SearchResults();
    var DerivedHelper = require_DerivedHelper();
    var requestBuilder = require_requestBuilder();
    var EventEmitter = require_events();
    var inherits = require_inherits();
    var objectHasKeys2 = require_objectHasKeys();
    var omit2 = require_omit();
    var merge = require_merge();
    var version = require_version();
    var escapeFacetValue = require_escapeFacetValue().escapeFacetValue;
    function AlgoliaSearchHelper(client, index, options) {
      if (typeof client.addAlgoliaAgent === "function") {
        client.addAlgoliaAgent("JS Helper (" + version + ")");
      }
      this.setClient(client);
      var opts = options || {};
      opts.index = index;
      this.state = SearchParameters.make(opts);
      this.lastResults = null;
      this._queryId = 0;
      this._lastQueryIdReceived = -1;
      this.derivedHelpers = [];
      this._currentNbQueries = 0;
    }
    inherits(AlgoliaSearchHelper, EventEmitter);
    AlgoliaSearchHelper.prototype.search = function() {
      this._search({ onlyWithDerivedHelpers: false });
      return this;
    };
    AlgoliaSearchHelper.prototype.searchOnlyWithDerivedHelpers = function() {
      this._search({ onlyWithDerivedHelpers: true });
      return this;
    };
    AlgoliaSearchHelper.prototype.getQuery = function() {
      var state = this.state;
      return requestBuilder._getHitsSearchParams(state);
    };
    AlgoliaSearchHelper.prototype.searchOnce = function(options, cb) {
      var tempState = !options ? this.state : this.state.setQueryParameters(options);
      var queries = requestBuilder._getQueries(tempState.index, tempState);
      var self = this;
      this._currentNbQueries++;
      this.emit("searchOnce", {
        state: tempState
      });
      if (cb) {
        this.client.search(queries).then(function(content) {
          self._currentNbQueries--;
          if (self._currentNbQueries === 0) {
            self.emit("searchQueueEmpty");
          }
          cb(null, new SearchResults(tempState, content.results), tempState);
        }).catch(function(err) {
          self._currentNbQueries--;
          if (self._currentNbQueries === 0) {
            self.emit("searchQueueEmpty");
          }
          cb(err, null, tempState);
        });
        return void 0;
      }
      return this.client.search(queries).then(function(content) {
        self._currentNbQueries--;
        if (self._currentNbQueries === 0)
          self.emit("searchQueueEmpty");
        return {
          content: new SearchResults(tempState, content.results),
          state: tempState,
          _originalResponse: content
        };
      }, function(e) {
        self._currentNbQueries--;
        if (self._currentNbQueries === 0)
          self.emit("searchQueueEmpty");
        throw e;
      });
    };
    AlgoliaSearchHelper.prototype.findAnswers = function(options) {
      console.warn("[algoliasearch-helper] answers is no longer supported");
      var state = this.state;
      var derivedHelper = this.derivedHelpers[0];
      if (!derivedHelper) {
        return Promise.resolve([]);
      }
      var derivedState = derivedHelper.getModifiedState(state);
      var data = merge(
        {
          attributesForPrediction: options.attributesForPrediction,
          nbHits: options.nbHits
        },
        {
          params: omit2(requestBuilder._getHitsSearchParams(derivedState), [
            "attributesToSnippet",
            "hitsPerPage",
            "restrictSearchableAttributes",
            "snippetEllipsisText"
            // FIXME remove this line once the engine is fixed.
          ])
        }
      );
      var errorMessage = "search for answers was called, but this client does not have a function client.initIndex(index).findAnswers";
      if (typeof this.client.initIndex !== "function") {
        throw new Error(errorMessage);
      }
      var index = this.client.initIndex(derivedState.index);
      if (typeof index.findAnswers !== "function") {
        throw new Error(errorMessage);
      }
      return index.findAnswers(derivedState.query, options.queryLanguages, data);
    };
    AlgoliaSearchHelper.prototype.searchForFacetValues = function(facet, query, maxFacetHits, userState) {
      var clientHasSFFV = typeof this.client.searchForFacetValues === "function";
      var clientHasInitIndex = typeof this.client.initIndex === "function";
      if (!clientHasSFFV && !clientHasInitIndex && typeof this.client.search !== "function") {
        throw new Error(
          "search for facet values (searchable) was called, but this client does not have a function client.searchForFacetValues or client.initIndex(index).searchForFacetValues"
        );
      }
      var state = this.state.setQueryParameters(userState || {});
      var isDisjunctive = state.isDisjunctiveFacet(facet);
      var algoliaQuery = requestBuilder.getSearchForFacetQuery(facet, query, maxFacetHits, state);
      this._currentNbQueries++;
      var self = this;
      var searchForFacetValuesPromise;
      if (clientHasSFFV) {
        searchForFacetValuesPromise = this.client.searchForFacetValues([
          { indexName: state.index, params: algoliaQuery }
        ]);
      } else if (clientHasInitIndex) {
        searchForFacetValuesPromise = this.client.initIndex(state.index).searchForFacetValues(algoliaQuery);
      } else {
        delete algoliaQuery.facetName;
        searchForFacetValuesPromise = this.client.search([
          {
            type: "facet",
            facet,
            indexName: state.index,
            params: algoliaQuery
          }
        ]).then(function processResponse(response) {
          return response.results[0];
        });
      }
      this.emit("searchForFacetValues", {
        state,
        facet,
        query
      });
      return searchForFacetValuesPromise.then(function addIsRefined(content) {
        self._currentNbQueries--;
        if (self._currentNbQueries === 0)
          self.emit("searchQueueEmpty");
        content = Array.isArray(content) ? content[0] : content;
        content.facetHits.forEach(function(f) {
          f.escapedValue = escapeFacetValue(f.value);
          f.isRefined = isDisjunctive ? state.isDisjunctiveFacetRefined(facet, f.escapedValue) : state.isFacetRefined(facet, f.escapedValue);
        });
        return content;
      }, function(e) {
        self._currentNbQueries--;
        if (self._currentNbQueries === 0)
          self.emit("searchQueueEmpty");
        throw e;
      });
    };
    AlgoliaSearchHelper.prototype.setQuery = function(q) {
      this._change({
        state: this.state.resetPage().setQuery(q),
        isPageReset: true
      });
      return this;
    };
    AlgoliaSearchHelper.prototype.clearRefinements = function(name) {
      this._change({
        state: this.state.resetPage().clearRefinements(name),
        isPageReset: true
      });
      return this;
    };
    AlgoliaSearchHelper.prototype.clearTags = function() {
      this._change({
        state: this.state.resetPage().clearTags(),
        isPageReset: true
      });
      return this;
    };
    AlgoliaSearchHelper.prototype.addDisjunctiveFacetRefinement = function(facet, value) {
      this._change({
        state: this.state.resetPage().addDisjunctiveFacetRefinement(facet, value),
        isPageReset: true
      });
      return this;
    };
    AlgoliaSearchHelper.prototype.addDisjunctiveRefine = function() {
      return this.addDisjunctiveFacetRefinement.apply(this, arguments);
    };
    AlgoliaSearchHelper.prototype.addHierarchicalFacetRefinement = function(facet, value) {
      this._change({
        state: this.state.resetPage().addHierarchicalFacetRefinement(facet, value),
        isPageReset: true
      });
      return this;
    };
    AlgoliaSearchHelper.prototype.addNumericRefinement = function(attribute, operator, value) {
      this._change({
        state: this.state.resetPage().addNumericRefinement(attribute, operator, value),
        isPageReset: true
      });
      return this;
    };
    AlgoliaSearchHelper.prototype.addFacetRefinement = function(facet, value) {
      this._change({
        state: this.state.resetPage().addFacetRefinement(facet, value),
        isPageReset: true
      });
      return this;
    };
    AlgoliaSearchHelper.prototype.addRefine = function() {
      return this.addFacetRefinement.apply(this, arguments);
    };
    AlgoliaSearchHelper.prototype.addFacetExclusion = function(facet, value) {
      this._change({
        state: this.state.resetPage().addExcludeRefinement(facet, value),
        isPageReset: true
      });
      return this;
    };
    AlgoliaSearchHelper.prototype.addExclude = function() {
      return this.addFacetExclusion.apply(this, arguments);
    };
    AlgoliaSearchHelper.prototype.addTag = function(tag) {
      this._change({
        state: this.state.resetPage().addTagRefinement(tag),
        isPageReset: true
      });
      return this;
    };
    AlgoliaSearchHelper.prototype.removeNumericRefinement = function(attribute, operator, value) {
      this._change({
        state: this.state.resetPage().removeNumericRefinement(attribute, operator, value),
        isPageReset: true
      });
      return this;
    };
    AlgoliaSearchHelper.prototype.removeDisjunctiveFacetRefinement = function(facet, value) {
      this._change({
        state: this.state.resetPage().removeDisjunctiveFacetRefinement(facet, value),
        isPageReset: true
      });
      return this;
    };
    AlgoliaSearchHelper.prototype.removeDisjunctiveRefine = function() {
      return this.removeDisjunctiveFacetRefinement.apply(this, arguments);
    };
    AlgoliaSearchHelper.prototype.removeHierarchicalFacetRefinement = function(facet) {
      this._change({
        state: this.state.resetPage().removeHierarchicalFacetRefinement(facet),
        isPageReset: true
      });
      return this;
    };
    AlgoliaSearchHelper.prototype.removeFacetRefinement = function(facet, value) {
      this._change({
        state: this.state.resetPage().removeFacetRefinement(facet, value),
        isPageReset: true
      });
      return this;
    };
    AlgoliaSearchHelper.prototype.removeRefine = function() {
      return this.removeFacetRefinement.apply(this, arguments);
    };
    AlgoliaSearchHelper.prototype.removeFacetExclusion = function(facet, value) {
      this._change({
        state: this.state.resetPage().removeExcludeRefinement(facet, value),
        isPageReset: true
      });
      return this;
    };
    AlgoliaSearchHelper.prototype.removeExclude = function() {
      return this.removeFacetExclusion.apply(this, arguments);
    };
    AlgoliaSearchHelper.prototype.removeTag = function(tag) {
      this._change({
        state: this.state.resetPage().removeTagRefinement(tag),
        isPageReset: true
      });
      return this;
    };
    AlgoliaSearchHelper.prototype.toggleFacetExclusion = function(facet, value) {
      this._change({
        state: this.state.resetPage().toggleExcludeFacetRefinement(facet, value),
        isPageReset: true
      });
      return this;
    };
    AlgoliaSearchHelper.prototype.toggleExclude = function() {
      return this.toggleFacetExclusion.apply(this, arguments);
    };
    AlgoliaSearchHelper.prototype.toggleRefinement = function(facet, value) {
      return this.toggleFacetRefinement(facet, value);
    };
    AlgoliaSearchHelper.prototype.toggleFacetRefinement = function(facet, value) {
      this._change({
        state: this.state.resetPage().toggleFacetRefinement(facet, value),
        isPageReset: true
      });
      return this;
    };
    AlgoliaSearchHelper.prototype.toggleRefine = function() {
      return this.toggleFacetRefinement.apply(this, arguments);
    };
    AlgoliaSearchHelper.prototype.toggleTag = function(tag) {
      this._change({
        state: this.state.resetPage().toggleTagRefinement(tag),
        isPageReset: true
      });
      return this;
    };
    AlgoliaSearchHelper.prototype.nextPage = function() {
      var page2 = this.state.page || 0;
      return this.setPage(page2 + 1);
    };
    AlgoliaSearchHelper.prototype.previousPage = function() {
      var page2 = this.state.page || 0;
      return this.setPage(page2 - 1);
    };
    function setCurrentPage(page2) {
      if (page2 < 0)
        throw new Error("Page requested below 0.");
      this._change({
        state: this.state.setPage(page2),
        isPageReset: false
      });
      return this;
    }
    AlgoliaSearchHelper.prototype.setCurrentPage = setCurrentPage;
    AlgoliaSearchHelper.prototype.setPage = setCurrentPage;
    AlgoliaSearchHelper.prototype.setIndex = function(name) {
      this._change({
        state: this.state.resetPage().setIndex(name),
        isPageReset: true
      });
      return this;
    };
    AlgoliaSearchHelper.prototype.setQueryParameter = function(parameter, value) {
      this._change({
        state: this.state.resetPage().setQueryParameter(parameter, value),
        isPageReset: true
      });
      return this;
    };
    AlgoliaSearchHelper.prototype.setState = function(newState) {
      this._change({
        state: SearchParameters.make(newState),
        isPageReset: false
      });
      return this;
    };
    AlgoliaSearchHelper.prototype.overrideStateWithoutTriggeringChangeEvent = function(newState) {
      this.state = new SearchParameters(newState);
      return this;
    };
    AlgoliaSearchHelper.prototype.hasRefinements = function(attribute) {
      if (objectHasKeys2(this.state.getNumericRefinements(attribute))) {
        return true;
      } else if (this.state.isConjunctiveFacet(attribute)) {
        return this.state.isFacetRefined(attribute);
      } else if (this.state.isDisjunctiveFacet(attribute)) {
        return this.state.isDisjunctiveFacetRefined(attribute);
      } else if (this.state.isHierarchicalFacet(attribute)) {
        return this.state.isHierarchicalFacetRefined(attribute);
      }
      return false;
    };
    AlgoliaSearchHelper.prototype.isExcluded = function(facet, value) {
      return this.state.isExcludeRefined(facet, value);
    };
    AlgoliaSearchHelper.prototype.isDisjunctiveRefined = function(facet, value) {
      return this.state.isDisjunctiveFacetRefined(facet, value);
    };
    AlgoliaSearchHelper.prototype.hasTag = function(tag) {
      return this.state.isTagRefined(tag);
    };
    AlgoliaSearchHelper.prototype.isTagRefined = function() {
      return this.hasTagRefinements.apply(this, arguments);
    };
    AlgoliaSearchHelper.prototype.getIndex = function() {
      return this.state.index;
    };
    function getCurrentPage() {
      return this.state.page;
    }
    AlgoliaSearchHelper.prototype.getCurrentPage = getCurrentPage;
    AlgoliaSearchHelper.prototype.getPage = getCurrentPage;
    AlgoliaSearchHelper.prototype.getTags = function() {
      return this.state.tagRefinements;
    };
    AlgoliaSearchHelper.prototype.getRefinements = function(facetName) {
      var refinements = [];
      if (this.state.isConjunctiveFacet(facetName)) {
        var conjRefinements = this.state.getConjunctiveRefinements(facetName);
        conjRefinements.forEach(function(r) {
          refinements.push({
            value: r,
            type: "conjunctive"
          });
        });
        var excludeRefinements = this.state.getExcludeRefinements(facetName);
        excludeRefinements.forEach(function(r) {
          refinements.push({
            value: r,
            type: "exclude"
          });
        });
      } else if (this.state.isDisjunctiveFacet(facetName)) {
        var disjRefinements = this.state.getDisjunctiveRefinements(facetName);
        disjRefinements.forEach(function(r) {
          refinements.push({
            value: r,
            type: "disjunctive"
          });
        });
      }
      var numericRefinements = this.state.getNumericRefinements(facetName);
      Object.keys(numericRefinements).forEach(function(operator) {
        var value = numericRefinements[operator];
        refinements.push({
          value,
          operator,
          type: "numeric"
        });
      });
      return refinements;
    };
    AlgoliaSearchHelper.prototype.getNumericRefinement = function(attribute, operator) {
      return this.state.getNumericRefinement(attribute, operator);
    };
    AlgoliaSearchHelper.prototype.getHierarchicalFacetBreadcrumb = function(facetName) {
      return this.state.getHierarchicalFacetBreadcrumb(facetName);
    };
    AlgoliaSearchHelper.prototype._search = function(options) {
      var state = this.state;
      var states = [];
      var mainQueries = [];
      if (!options.onlyWithDerivedHelpers) {
        mainQueries = requestBuilder._getQueries(state.index, state);
        states.push({
          state,
          queriesCount: mainQueries.length,
          helper: this
        });
        this.emit("search", {
          state,
          results: this.lastResults
        });
      }
      var derivedQueries = this.derivedHelpers.map(function(derivedHelper) {
        var derivedState = derivedHelper.getModifiedState(state);
        var derivedStateQueries = requestBuilder._getQueries(derivedState.index, derivedState);
        states.push({
          state: derivedState,
          queriesCount: derivedStateQueries.length,
          helper: derivedHelper
        });
        derivedHelper.emit("search", {
          state: derivedState,
          results: derivedHelper.lastResults
        });
        return derivedStateQueries;
      });
      var queries = Array.prototype.concat.apply(mainQueries, derivedQueries);
      var queryId = this._queryId++;
      this._currentNbQueries++;
      try {
        this.client.search(queries).then(this._dispatchAlgoliaResponse.bind(this, states, queryId)).catch(this._dispatchAlgoliaError.bind(this, queryId));
      } catch (error) {
        this.emit("error", {
          error
        });
      }
    };
    AlgoliaSearchHelper.prototype._dispatchAlgoliaResponse = function(states, queryId, content) {
      if (queryId < this._lastQueryIdReceived) {
        return;
      }
      this._currentNbQueries -= queryId - this._lastQueryIdReceived;
      this._lastQueryIdReceived = queryId;
      if (this._currentNbQueries === 0)
        this.emit("searchQueueEmpty");
      var results = content.results.slice();
      states.forEach(function(s) {
        var state = s.state;
        var queriesCount = s.queriesCount;
        var helper = s.helper;
        var specificResults = results.splice(0, queriesCount);
        var formattedResponse = helper.lastResults = new SearchResults(state, specificResults);
        helper.emit("result", {
          results: formattedResponse,
          state
        });
      });
    };
    AlgoliaSearchHelper.prototype._dispatchAlgoliaError = function(queryId, error) {
      if (queryId < this._lastQueryIdReceived) {
        return;
      }
      this._currentNbQueries -= queryId - this._lastQueryIdReceived;
      this._lastQueryIdReceived = queryId;
      this.emit("error", {
        error
      });
      if (this._currentNbQueries === 0)
        this.emit("searchQueueEmpty");
    };
    AlgoliaSearchHelper.prototype.containsRefinement = function(query, facetFilters, numericFilters, tagFilters) {
      return query || facetFilters.length !== 0 || numericFilters.length !== 0 || tagFilters.length !== 0;
    };
    AlgoliaSearchHelper.prototype._hasDisjunctiveRefinements = function(facet) {
      return this.state.disjunctiveRefinements[facet] && this.state.disjunctiveRefinements[facet].length > 0;
    };
    AlgoliaSearchHelper.prototype._change = function(event) {
      var state = event.state;
      var isPageReset = event.isPageReset;
      if (state !== this.state) {
        this.state = state;
        this.emit("change", {
          state: this.state,
          results: this.lastResults,
          isPageReset
        });
      }
    };
    AlgoliaSearchHelper.prototype.clearCache = function() {
      this.client.clearCache && this.client.clearCache();
      return this;
    };
    AlgoliaSearchHelper.prototype.setClient = function(newClient) {
      if (this.client === newClient)
        return this;
      if (typeof newClient.addAlgoliaAgent === "function") {
        newClient.addAlgoliaAgent("JS Helper (" + version + ")");
      }
      this.client = newClient;
      return this;
    };
    AlgoliaSearchHelper.prototype.getClient = function() {
      return this.client;
    };
    AlgoliaSearchHelper.prototype.derive = function(fn) {
      var derivedHelper = new DerivedHelper(this, fn);
      this.derivedHelpers.push(derivedHelper);
      return derivedHelper;
    };
    AlgoliaSearchHelper.prototype.detachDerivedHelper = function(derivedHelper) {
      var pos = this.derivedHelpers.indexOf(derivedHelper);
      if (pos === -1)
        throw new Error("Derived helper already detached");
      this.derivedHelpers.splice(pos, 1);
    };
    AlgoliaSearchHelper.prototype.hasPendingRequests = function() {
      return this._currentNbQueries > 0;
    };
    module.exports = AlgoliaSearchHelper;
  }
});

// ../node_modules/algoliasearch-helper/index.js
var require_algoliasearch_helper2 = __commonJS({
  "../node_modules/algoliasearch-helper/index.js"(exports, module) {
    "use strict";
    var AlgoliaSearchHelper = require_algoliasearch_helper();
    var SearchParameters = require_SearchParameters();
    var SearchResults = require_SearchResults();
    function algoliasearchHelper4(client, index, opts) {
      return new AlgoliaSearchHelper(client, index, opts);
    }
    algoliasearchHelper4.version = require_version();
    algoliasearchHelper4.AlgoliaSearchHelper = AlgoliaSearchHelper;
    algoliasearchHelper4.SearchParameters = SearchParameters;
    algoliasearchHelper4.SearchResults = SearchResults;
    module.exports = algoliasearchHelper4;
  }
});

// ../node_modules/react-instantsearch-core/dist/es/core/createConnector.js
var import_react2 = __toESM(require_react());
var import_react_fast_compare = __toESM(require_react_fast_compare());

// ../node_modules/react-instantsearch-core/dist/es/core/utils.js
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return _typeof(key) === "symbol" ? key : String(key);
}
function _toPrimitive(input, hint) {
  if (_typeof(input) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function _typeof(obj) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof(obj);
}
var shallowEqual = function shallowEqual2(objA, objB) {
  if (objA === objB) {
    return true;
  }
  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);
  if (keysA.length !== keysB.length) {
    return false;
  }
  var hasOwn = Object.prototype.hasOwnProperty;
  for (var i = 0; i < keysA.length; i++) {
    if (!hasOwn.call(objB, keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {
      return false;
    }
  }
  return true;
};
var getDisplayName = function getDisplayName2(Component28) {
  return Component28.displayName || Component28.name || "UnknownComponent";
};
var resolved = Promise.resolve();
var defer = function defer2(f) {
  resolved.then(f);
};
var isPlainObject = function isPlainObject2(value) {
  return _typeof(value) === "object" && value !== null && !Array.isArray(value);
};
var removeEmptyKey = function removeEmptyKey2(obj) {
  Object.keys(obj).forEach(function(key) {
    var value = obj[key];
    if (!isPlainObject(value)) {
      return;
    }
    if (!objectHasKeys(value)) {
      delete obj[key];
    } else {
      removeEmptyKey2(value);
    }
  });
  return obj;
};
var removeEmptyArraysFromObject = function removeEmptyArraysFromObject2(obj) {
  Object.keys(obj).forEach(function(key) {
    var value = obj[key];
    if (Array.isArray(value) && value.length === 0) {
      delete obj[key];
    }
  });
  return obj;
};
function addAbsolutePositions(hits, hitsPerPage, page2) {
  return hits.map(function(hit, index) {
    return _objectSpread(_objectSpread({}, hit), {}, {
      __position: hitsPerPage * page2 + index + 1
    });
  });
}
function addQueryID(hits, queryID) {
  if (!queryID) {
    return hits;
  }
  return hits.map(function(hit) {
    return _objectSpread(_objectSpread({}, hit), {}, {
      __queryID: queryID
    });
  });
}
function find(array, comparator) {
  if (!Array.isArray(array)) {
    return void 0;
  }
  for (var i = 0; i < array.length; i++) {
    if (comparator(array[i])) {
      return array[i];
    }
  }
  return void 0;
}
function objectHasKeys(object) {
  return object && Object.keys(object).length > 0;
}
function omit(source, excluded) {
  if (source === null || source === void 0) {
    return {};
  }
  var target = {};
  var sourceKeys = Object.keys(source);
  for (var i = 0; i < sourceKeys.length; i++) {
    var key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) {
      continue;
    }
    target[key] = source[key];
  }
  return target;
}
var getPropertyByPath = function getPropertyByPath2(object, path) {
  return (Array.isArray(path) ? path : path.replace(/\[(\d+)]/g, ".$1").split(".")).reduce(function(current, key) {
    return current ? current[key] : void 0;
  }, object);
};
function getObjectType(object) {
  return Object.prototype.toString.call(object).slice(8, -1);
}
function unescapeFacetValue(value) {
  return value.replace(/^\\-/, "-");
}

// ../node_modules/react-instantsearch-core/dist/es/core/context.js
var import_react = __toESM(require_react());
var instantSearchContext = (0, import_react.createContext)({
  onInternalStateUpdate: function onInternalStateUpdate() {
    return void 0;
  },
  createHrefForState: function createHrefForState() {
    return "#";
  },
  onSearchForFacetValues: function onSearchForFacetValues() {
    return void 0;
  },
  onSearchStateChange: function onSearchStateChange() {
    return void 0;
  },
  onSearchParameters: function onSearchParameters() {
    return void 0;
  },
  store: {},
  widgetsManager: {},
  mainTargetedIndex: ""
});
var InstantSearchConsumer = instantSearchContext.Consumer;
var InstantSearchProvider = instantSearchContext.Provider;
var _createContext = (0, import_react.createContext)(void 0);
var IndexConsumer = _createContext.Consumer;
var IndexProvider = _createContext.Provider;

// ../node_modules/react-instantsearch-core/dist/es/core/createConnector.js
var _excluded = ["contextValue"];
function _typeof2(obj) {
  "@babel/helpers - typeof";
  return _typeof2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof2(obj);
}
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _objectWithoutProperties(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function ownKeys2(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
      _defineProperty2(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey2(descriptor.key), descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", { writable: false });
  return Constructor;
}
function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  Object.defineProperty(subClass, "prototype", { writable: false });
  if (superClass)
    _setPrototypeOf(subClass, superClass);
}
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf28(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf(o, p);
}
function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _possibleConstructorReturn(self, call) {
  if (call && (_typeof2(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized(self);
}
function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf28(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf(o);
}
function _defineProperty2(obj, key, value) {
  key = _toPropertyKey2(key);
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey2(arg) {
  var key = _toPrimitive2(arg, "string");
  return _typeof2(key) === "symbol" ? key : String(key);
}
function _toPrimitive2(input, hint) {
  if (_typeof2(input) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof2(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function createConnectorWithoutContext(connectorDesc) {
  if (!connectorDesc.displayName) {
    throw new Error("`createConnector` requires you to provide a `displayName` property.");
  }
  var isWidget = typeof connectorDesc.getSearchParameters === "function" || typeof connectorDesc.getMetadata === "function" || typeof connectorDesc.transitionState === "function";
  return function(Composed) {
    var additionalWidgetProperties = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var Connector = function(_Component) {
      _inherits(Connector2, _Component);
      var _super = _createSuper(Connector2);
      function Connector2(props) {
        var _this;
        _classCallCheck(this, Connector2);
        _this = _super.call(this, props);
        _defineProperty2(_assertThisInitialized(_this), "unsubscribe", void 0);
        _defineProperty2(_assertThisInitialized(_this), "unregisterWidget", void 0);
        _defineProperty2(_assertThisInitialized(_this), "cleanupTimerRef", null);
        _defineProperty2(_assertThisInitialized(_this), "isUnmounting", false);
        _defineProperty2(_assertThisInitialized(_this), "state", {
          providedProps: _this.getProvidedProps(_this.props)
        });
        _defineProperty2(_assertThisInitialized(_this), "refine", function() {
          var _ref7;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this.props.contextValue.onInternalStateUpdate(
            // refine will always be defined here because the prop is only given conditionally
            (_ref7 = connectorDesc.refine).call.apply(_ref7, [_assertThisInitialized(_this), _this.props, _this.props.contextValue.store.getState().widgets].concat(args))
          );
        });
        _defineProperty2(_assertThisInitialized(_this), "createURL", function() {
          var _ref23;
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }
          return _this.props.contextValue.createHrefForState(
            // refine will always be defined here because the prop is only given conditionally
            (_ref23 = connectorDesc.refine).call.apply(_ref23, [_assertThisInitialized(_this), _this.props, _this.props.contextValue.store.getState().widgets].concat(args))
          );
        });
        _defineProperty2(_assertThisInitialized(_this), "searchForFacetValues", function() {
          var _ref34;
          for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            args[_key3] = arguments[_key3];
          }
          _this.props.contextValue.onSearchForFacetValues(
            // searchForFacetValues will always be defined here because the prop is only given conditionally
            (_ref34 = connectorDesc.searchForFacetValues).call.apply(_ref34, [_assertThisInitialized(_this), _this.props, _this.props.contextValue.store.getState().widgets].concat(args))
          );
        });
        if (connectorDesc.getSearchParameters) {
          _this.props.contextValue.onSearchParameters(connectorDesc.getSearchParameters.bind(_assertThisInitialized(_this)), {
            ais: _this.props.contextValue,
            multiIndexContext: _this.props.indexContextValue
          }, _this.props, connectorDesc.getMetadata && connectorDesc.getMetadata.bind(_assertThisInitialized(_this)), connectorDesc.displayName);
        }
        return _this;
      }
      _createClass(Connector2, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          var _this2 = this;
          if (this.cleanupTimerRef) {
            clearTimeout(this.cleanupTimerRef);
            this.cleanupTimerRef = null;
          }
          this.unsubscribe = this.props.contextValue.store.subscribe(function() {
            if (!_this2.isUnmounting) {
              _this2.setState({
                providedProps: _this2.getProvidedProps(_this2.props)
              });
            }
          });
          if (isWidget) {
            this.unregisterWidget = this.props.contextValue.widgetsManager.registerWidget(this);
          }
        }
      }, {
        key: "shouldComponentUpdate",
        value: function shouldComponentUpdate2(nextProps, nextState) {
          if (typeof connectorDesc.shouldComponentUpdate === "function") {
            return connectorDesc.shouldComponentUpdate.call(this, this.props, nextProps, this.state, nextState);
          }
          var propsEqual = shallowEqual(this.props, nextProps);
          if (this.state.providedProps === null || nextState.providedProps === null) {
            if (this.state.providedProps === nextState.providedProps) {
              return !propsEqual;
            }
            return true;
          }
          return !propsEqual || !shallowEqual(this.state.providedProps, nextState.providedProps);
        }
      }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate(prevProps) {
          if (!(0, import_react_fast_compare.default)(prevProps, this.props)) {
            this.setState({
              providedProps: this.getProvidedProps(this.props)
            });
            if (isWidget) {
              this.props.contextValue.widgetsManager.update();
              if (typeof connectorDesc.transitionState === "function") {
                this.props.contextValue.onSearchStateChange(connectorDesc.transitionState.call(this, this.props, this.props.contextValue.store.getState().widgets, this.props.contextValue.store.getState().widgets));
              }
            }
          }
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          var _this3 = this;
          this.cleanupTimerRef = setTimeout(function() {
            _this3.isUnmounting = true;
            if (_this3.unsubscribe) {
              _this3.unsubscribe();
            }
            if (_this3.unregisterWidget) {
              _this3.unregisterWidget();
              if (typeof connectorDesc.cleanUp === "function") {
                var nextState = connectorDesc.cleanUp.call(_this3, _this3.props, _this3.props.contextValue.store.getState().widgets);
                _this3.props.contextValue.store.setState(_objectSpread2(_objectSpread2({}, _this3.props.contextValue.store.getState()), {}, {
                  widgets: nextState
                }));
                _this3.props.contextValue.onSearchStateChange(removeEmptyKey(nextState));
              }
            }
          });
        }
      }, {
        key: "getProvidedProps",
        value: function getProvidedProps28(props) {
          var _this$props$contextVa = this.props.contextValue.store.getState(), widgets = _this$props$contextVa.widgets, results = _this$props$contextVa.results, resultsFacetValues = _this$props$contextVa.resultsFacetValues, searching = _this$props$contextVa.searching, searchingForFacetValues = _this$props$contextVa.searchingForFacetValues, isSearchStalled = _this$props$contextVa.isSearchStalled, metadata = _this$props$contextVa.metadata, error = _this$props$contextVa.error;
          var searchResults = {
            results,
            searching,
            searchingForFacetValues,
            isSearchStalled,
            error
          };
          return connectorDesc.getProvidedProps.call(
            this,
            props,
            widgets,
            searchResults,
            metadata,
            // @MAJOR: move this attribute on the `searchResults` it doesn't
            // makes sense to have it into a separate argument. The search
            // flags are on the object why not the results?
            resultsFacetValues
          );
        }
      }, {
        key: "getSearchParameters",
        value: function getSearchParameters21(searchParameters) {
          if (typeof connectorDesc.getSearchParameters === "function") {
            return connectorDesc.getSearchParameters.call(this, searchParameters, this.props, this.props.contextValue.store.getState().widgets);
          }
          return null;
        }
      }, {
        key: "getMetadata",
        value: function getMetadata13(nextWidgetsState) {
          if (typeof connectorDesc.getMetadata === "function") {
            return connectorDesc.getMetadata.call(this, this.props, nextWidgetsState);
          }
          return {};
        }
      }, {
        key: "transitionState",
        value: function transitionState3(prevWidgetsState, nextWidgetsState) {
          if (typeof connectorDesc.transitionState === "function") {
            return connectorDesc.transitionState.call(this, this.props, prevWidgetsState, nextWidgetsState);
          }
          return nextWidgetsState;
        }
      }, {
        key: "render",
        value: function render() {
          var _this$props = this.props, contextValue = _this$props.contextValue, props = _objectWithoutProperties(_this$props, _excluded);
          var providedProps = this.state.providedProps;
          if (providedProps === null) {
            return null;
          }
          var refineProps = typeof connectorDesc.refine === "function" ? {
            refine: this.refine,
            createURL: this.createURL
          } : {};
          var searchForFacetValuesProps = typeof connectorDesc.searchForFacetValues === "function" ? {
            searchForItems: this.searchForFacetValues
          } : {};
          return import_react2.default.createElement(Composed, _extends({}, props, providedProps, refineProps, searchForFacetValuesProps));
        }
      }]);
      return Connector2;
    }(import_react2.Component);
    _defineProperty2(Connector, "displayName", "".concat(connectorDesc.displayName, "(").concat(getDisplayName(Composed), ")"));
    _defineProperty2(Connector, "$$type", connectorDesc.$$type);
    _defineProperty2(Connector, "$$widgetType", additionalWidgetProperties.$$widgetType);
    _defineProperty2(Connector, "propTypes", connectorDesc.propTypes);
    _defineProperty2(Connector, "defaultProps", connectorDesc.defaultProps);
    _defineProperty2(Connector, "_connectorDesc", connectorDesc);
    return Connector;
  };
}
var createConnectorWithContext = function createConnectorWithContext2(connectorDesc) {
  return function(Composed, additionalWidgetProperties) {
    var Connector = createConnectorWithoutContext(connectorDesc)(Composed, additionalWidgetProperties);
    var ConnectorWrapper = function ConnectorWrapper2(props) {
      return import_react2.default.createElement(InstantSearchConsumer, null, function(contextValue) {
        return import_react2.default.createElement(IndexConsumer, null, function(indexContextValue) {
          return import_react2.default.createElement(Connector, _extends({
            contextValue,
            indexContextValue
          }, props));
        });
      });
    };
    return ConnectorWrapper;
  };
};
var createConnector_default = createConnectorWithContext;

// ../node_modules/react-instantsearch-core/dist/es/core/highlight.js
var HIGHLIGHT_TAGS = {
  highlightPreTag: "<ais-highlight-0000000000>",
  highlightPostTag: "</ais-highlight-0000000000>"
};
function parseHighlightedAttribute(_ref7) {
  var preTag = _ref7.preTag, postTag = _ref7.postTag, _ref$highlightedValue = _ref7.highlightedValue, highlightedValue = _ref$highlightedValue === void 0 ? "" : _ref$highlightedValue;
  var splitByPreTag = highlightedValue.split(preTag);
  var firstValue = splitByPreTag.shift();
  var elements = firstValue === "" ? [] : [{
    value: firstValue,
    isHighlighted: false
  }];
  if (postTag === preTag) {
    var isHighlighted = true;
    splitByPreTag.forEach(function(split) {
      elements.push({
        value: split,
        isHighlighted
      });
      isHighlighted = !isHighlighted;
    });
  } else {
    splitByPreTag.forEach(function(split) {
      var splitByPostTag = split.split(postTag);
      elements.push({
        value: splitByPostTag[0],
        isHighlighted: true
      });
      if (splitByPostTag[1] !== "") {
        elements.push({
          value: splitByPostTag[1],
          isHighlighted: false
        });
      }
    });
  }
  return elements;
}
function parseAlgoliaHit(_ref23) {
  var _ref2$preTag = _ref23.preTag, preTag = _ref2$preTag === void 0 ? "<em>" : _ref2$preTag, _ref2$postTag = _ref23.postTag, postTag = _ref2$postTag === void 0 ? "</em>" : _ref2$postTag, highlightProperty = _ref23.highlightProperty, attribute = _ref23.attribute, hit = _ref23.hit;
  if (!hit)
    throw new Error("`hit`, the matching record, must be provided");
  var highlightObject = getPropertyByPath(hit[highlightProperty], attribute) || {};
  if (Array.isArray(highlightObject)) {
    return highlightObject.map(function(item) {
      return parseHighlightedAttribute({
        preTag,
        postTag,
        highlightedValue: item.value
      });
    });
  }
  return parseHighlightedAttribute({
    preTag,
    postTag,
    highlightedValue: highlightObject.value
  });
}

// ../node_modules/react-instantsearch-core/dist/es/core/version.js
var version_default = "6.39.0";

// ../node_modules/react-instantsearch-core/dist/es/core/translatable.js
var import_react3 = __toESM(require_react());
function _typeof3(obj) {
  "@babel/helpers - typeof";
  return _typeof3 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof3(obj);
}
function _extends2() {
  _extends2 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends2.apply(this, arguments);
}
function _classCallCheck2(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties2(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey3(descriptor.key), descriptor);
  }
}
function _createClass2(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties2(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties2(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", { writable: false });
  return Constructor;
}
function _inherits2(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  Object.defineProperty(subClass, "prototype", { writable: false });
  if (superClass)
    _setPrototypeOf2(subClass, superClass);
}
function _setPrototypeOf2(o, p) {
  _setPrototypeOf2 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf28(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf2(o, p);
}
function _createSuper2(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct2();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf2(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf2(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn2(this, result);
  };
}
function _possibleConstructorReturn2(self, call) {
  if (call && (_typeof3(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized2(self);
}
function _assertThisInitialized2(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct2() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf2(o) {
  _getPrototypeOf2 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf28(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf2(o);
}
function _defineProperty3(obj, key, value) {
  key = _toPropertyKey3(key);
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey3(arg) {
  var key = _toPrimitive3(arg, "string");
  return _typeof3(key) === "symbol" ? key : String(key);
}
function _toPrimitive3(input, hint) {
  if (_typeof3(input) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof3(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
var withKeysPropType = function withKeysPropType2(keys) {
  return function(props, propName, componentName) {
    var prop = props[propName];
    if (prop) {
      for (var _i = 0, _Object$keys = Object.keys(prop); _i < _Object$keys.length; _i++) {
        var key = _Object$keys[_i];
        if (keys.indexOf(key) === -1) {
          return new Error("Unknown `".concat(propName, "` key `").concat(key, "`. Check the render method ") + "of `".concat(componentName, "`."));
        }
      }
    }
    return void 0;
  };
};
function translatable(defaultTranslations) {
  return function(Composed) {
    var Translatable = function(_Component) {
      _inherits2(Translatable2, _Component);
      var _super = _createSuper2(Translatable2);
      function Translatable2() {
        var _this;
        _classCallCheck2(this, Translatable2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty3(_assertThisInitialized2(_this), "translate", function(key) {
          var translations = _this.props.translations;
          var translation = translations && translations.hasOwnProperty(key) ? translations[key] : defaultTranslations[key];
          if (typeof translation === "function") {
            for (var _len2 = arguments.length, params = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
              params[_key2 - 1] = arguments[_key2];
            }
            return translation.apply(void 0, params);
          }
          return translation;
        });
        return _this;
      }
      _createClass2(Translatable2, [{
        key: "render",
        value: function render() {
          return import_react3.default.createElement(Composed, _extends2({
            translate: this.translate
          }, this.props));
        }
      }]);
      return Translatable2;
    }(import_react3.Component);
    var name = Composed.displayName || Composed.name || "UnknownComponent";
    Translatable.displayName = "Translatable(".concat(name, ")");
    Translatable.propTypes = {
      translations: withKeysPropType(Object.keys(defaultTranslations))
    };
    return Translatable;
  };
}

// ../node_modules/react-instantsearch-core/dist/es/core/indexUtils.js
function _typeof4(obj) {
  "@babel/helpers - typeof";
  return _typeof4 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof4(obj);
}
function ownKeys3(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread3(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys3(Object(source), true).forEach(function(key) {
      _defineProperty4(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys3(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty4(obj, key, value) {
  key = _toPropertyKey4(key);
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey4(arg) {
  var key = _toPrimitive4(arg, "string");
  return _typeof4(key) === "symbol" ? key : String(key);
}
function _toPrimitive4(input, hint) {
  if (_typeof4(input) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof4(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function getIndexId(context) {
  return hasMultipleIndices(context) ? context.multiIndexContext.targetedIndex : context.ais.mainTargetedIndex;
}
function getResults(searchResults, context) {
  if (searchResults.results) {
    if (searchResults.results.hits) {
      return searchResults.results;
    }
    var indexId = getIndexId(context);
    if (searchResults.results[indexId]) {
      return searchResults.results[indexId];
    }
  }
  return null;
}
function hasMultipleIndices(context) {
  return context && context.multiIndexContext;
}
function refineValue(searchState, nextRefinement, context, resetPage, namespace8) {
  if (hasMultipleIndices(context)) {
    var indexId = getIndexId(context);
    return namespace8 ? refineMultiIndexWithNamespace(searchState, nextRefinement, indexId, resetPage, namespace8) : refineMultiIndex(searchState, nextRefinement, indexId, resetPage);
  } else {
    if (searchState.indices && resetPage) {
      Object.keys(searchState.indices).forEach(function(targetedIndex) {
        searchState = refineValue(searchState, {
          page: 1
        }, {
          multiIndexContext: {
            targetedIndex
          }
        }, true, namespace8);
      });
    }
    return namespace8 ? refineSingleIndexWithNamespace(searchState, nextRefinement, resetPage, namespace8) : refineSingleIndex(searchState, nextRefinement, resetPage);
  }
}
function refineMultiIndex(searchState, nextRefinement, indexId, resetPage) {
  var page2 = resetPage ? {
    page: 1
  } : void 0;
  var state = searchState.indices && searchState.indices[indexId] ? _objectSpread3(_objectSpread3({}, searchState.indices), {}, _defineProperty4({}, indexId, _objectSpread3(_objectSpread3(_objectSpread3({}, searchState.indices[indexId]), nextRefinement), page2))) : _objectSpread3(_objectSpread3({}, searchState.indices), {}, _defineProperty4({}, indexId, _objectSpread3(_objectSpread3({}, nextRefinement), page2)));
  return _objectSpread3(_objectSpread3({}, searchState), {}, {
    indices: state
  });
}
function refineSingleIndex(searchState, nextRefinement, resetPage) {
  var page2 = resetPage ? {
    page: 1
  } : void 0;
  return _objectSpread3(_objectSpread3(_objectSpread3({}, searchState), nextRefinement), page2);
}
function refineMultiIndexWithNamespace(searchState, nextRefinement, indexId, resetPage, namespace8) {
  var _objectSpread42;
  var page2 = resetPage ? {
    page: 1
  } : void 0;
  var state = searchState.indices && searchState.indices[indexId] ? _objectSpread3(_objectSpread3({}, searchState.indices), {}, _defineProperty4({}, indexId, _objectSpread3(_objectSpread3({}, searchState.indices[indexId]), {}, (_objectSpread42 = {}, _defineProperty4(_objectSpread42, namespace8, _objectSpread3(_objectSpread3({}, searchState.indices[indexId][namespace8]), nextRefinement)), _defineProperty4(_objectSpread42, "page", 1), _objectSpread42)))) : _objectSpread3(_objectSpread3({}, searchState.indices), {}, _defineProperty4({}, indexId, _objectSpread3(_defineProperty4({}, namespace8, nextRefinement), page2)));
  return _objectSpread3(_objectSpread3({}, searchState), {}, {
    indices: state
  });
}
function refineSingleIndexWithNamespace(searchState, nextRefinement, resetPage, namespace8) {
  var page2 = resetPage ? {
    page: 1
  } : void 0;
  return _objectSpread3(_objectSpread3({}, searchState), {}, _defineProperty4({}, namespace8, _objectSpread3(_objectSpread3({}, searchState[namespace8]), nextRefinement)), page2);
}
function getNamespaceAndAttributeName(id) {
  var parts = id.match(/^([^.]*)\.(.*)/);
  var namespace8 = parts && parts[1];
  var attributeName = parts && parts[2];
  return {
    namespace: namespace8,
    attributeName
  };
}
function hasRefinements(_ref7) {
  var multiIndex = _ref7.multiIndex, indexId = _ref7.indexId, namespace8 = _ref7.namespace, attributeName = _ref7.attributeName, id = _ref7.id, searchState = _ref7.searchState;
  if (multiIndex && namespace8) {
    return searchState.indices && searchState.indices[indexId] && searchState.indices[indexId][namespace8] && Object.hasOwnProperty.call(searchState.indices[indexId][namespace8], attributeName);
  }
  if (multiIndex) {
    return searchState.indices && searchState.indices[indexId] && Object.hasOwnProperty.call(searchState.indices[indexId], id);
  }
  if (namespace8) {
    return searchState[namespace8] && Object.hasOwnProperty.call(searchState[namespace8], attributeName);
  }
  return Object.hasOwnProperty.call(searchState, id);
}
function getRefinements(_ref23) {
  var multiIndex = _ref23.multiIndex, indexId = _ref23.indexId, namespace8 = _ref23.namespace, attributeName = _ref23.attributeName, id = _ref23.id, searchState = _ref23.searchState;
  if (multiIndex && namespace8) {
    return searchState.indices[indexId][namespace8][attributeName];
  }
  if (multiIndex) {
    return searchState.indices[indexId][id];
  }
  if (namespace8) {
    return searchState[namespace8][attributeName];
  }
  return searchState[id];
}
function getCurrentRefinementValue(props, searchState, context, id, defaultValue) {
  var indexId = getIndexId(context);
  var _getNamespaceAndAttri = getNamespaceAndAttributeName(id), namespace8 = _getNamespaceAndAttri.namespace, attributeName = _getNamespaceAndAttri.attributeName;
  var multiIndex = hasMultipleIndices(context);
  var args = {
    multiIndex,
    indexId,
    namespace: namespace8,
    attributeName,
    id,
    searchState
  };
  var hasRefinementsValue = hasRefinements(args);
  if (hasRefinementsValue) {
    return getRefinements(args);
  }
  if (props.defaultRefinement) {
    return props.defaultRefinement;
  }
  return defaultValue;
}
function cleanUpValue(searchState, context, id) {
  var indexId = getIndexId(context);
  var _getNamespaceAndAttri2 = getNamespaceAndAttributeName(id), namespace8 = _getNamespaceAndAttri2.namespace, attributeName = _getNamespaceAndAttri2.attributeName;
  if (hasMultipleIndices(context) && Boolean(searchState.indices)) {
    return cleanUpValueWithMultiIndex({
      attribute: attributeName,
      searchState,
      indexId,
      id,
      namespace: namespace8
    });
  }
  return cleanUpValueWithSingleIndex({
    attribute: attributeName,
    searchState,
    id,
    namespace: namespace8
  });
}
function cleanUpValueWithSingleIndex(_ref34) {
  var searchState = _ref34.searchState, id = _ref34.id, namespace8 = _ref34.namespace, attribute = _ref34.attribute;
  if (namespace8) {
    return _objectSpread3(_objectSpread3({}, searchState), {}, _defineProperty4({}, namespace8, omit(searchState[namespace8], [attribute])));
  }
  return omit(searchState, [id]);
}
function cleanUpValueWithMultiIndex(_ref42) {
  var searchState = _ref42.searchState, indexId = _ref42.indexId, id = _ref42.id, namespace8 = _ref42.namespace, attribute = _ref42.attribute;
  var indexSearchState = searchState.indices[indexId];
  if (namespace8 && indexSearchState) {
    return _objectSpread3(_objectSpread3({}, searchState), {}, {
      indices: _objectSpread3(_objectSpread3({}, searchState.indices), {}, _defineProperty4({}, indexId, _objectSpread3(_objectSpread3({}, indexSearchState), {}, _defineProperty4({}, namespace8, omit(indexSearchState[namespace8], [attribute])))))
    });
  }
  if (indexSearchState) {
    return _objectSpread3(_objectSpread3({}, searchState), {}, {
      indices: _objectSpread3(_objectSpread3({}, searchState.indices), {}, _defineProperty4({}, indexId, omit(indexSearchState, [id])))
    });
  }
  return searchState;
}

// ../node_modules/react-instantsearch-core/dist/es/connectors/connectConfigure.js
function _typeof5(obj) {
  "@babel/helpers - typeof";
  return _typeof5 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof5(obj);
}
var _excluded2 = ["children", "contextValue", "indexContextValue"];
var _excluded22 = ["children", "contextValue", "indexContextValue"];
function ownKeys4(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread4(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys4(Object(source), true).forEach(function(key) {
      _defineProperty5(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys4(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty5(obj, key, value) {
  key = _toPropertyKey5(key);
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey5(arg) {
  var key = _toPrimitive5(arg, "string");
  return _typeof5(key) === "symbol" ? key : String(key);
}
function _toPrimitive5(input, hint) {
  if (_typeof5(input) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof5(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function _objectWithoutProperties2(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose2(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose2(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function getId() {
  return "configure";
}
var connectConfigure_default = createConnector_default({
  displayName: "AlgoliaConfigure",
  $$type: "ais.configure",
  getProvidedProps: function getProvidedProps() {
    return {};
  },
  getSearchParameters: function getSearchParameters(searchParameters, props) {
    var children = props.children, contextValue = props.contextValue, indexContextValue = props.indexContextValue, items4 = _objectWithoutProperties2(props, _excluded2);
    return searchParameters.setQueryParameters(items4);
  },
  transitionState: function transitionState(props, prevSearchState, nextSearchState) {
    var id = getId();
    var children = props.children, contextValue = props.contextValue, indexContextValue = props.indexContextValue, items4 = _objectWithoutProperties2(props, _excluded22);
    var propKeys = Object.keys(props);
    var nonPresentKeys = this._props ? Object.keys(this._props).filter(function(prop) {
      return propKeys.indexOf(prop) === -1;
    }) : [];
    this._props = props;
    var nextValue = _defineProperty5({}, id, _objectSpread4(_objectSpread4({}, omit(nextSearchState[id], nonPresentKeys)), items4));
    return refineValue(nextSearchState, nextValue, {
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    });
  },
  cleanUp: function cleanUp(props, searchState) {
    var id = getId();
    var indexId = getIndexId({
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    });
    var subState = hasMultipleIndices({
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    }) && searchState.indices ? searchState.indices[indexId] : searchState;
    var configureKeys = subState && subState[id] ? Object.keys(subState[id]) : [];
    var configureState = configureKeys.reduce(function(acc, item) {
      if (!props[item]) {
        acc[item] = subState[id][item];
      }
      return acc;
    }, {});
    var nextValue = _defineProperty5({}, id, configureState);
    return refineValue(searchState, nextValue, {
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    });
  }
});

// ../node_modules/react-instantsearch-core/dist/es/widgets/Configure.js
var Configure_default = connectConfigure_default(function Configure() {
  return null;
}, {
  $$widgetType: "ais.configure"
});

// ../node_modules/react-instantsearch-core/dist/es/connectors/connectConfigureRelatedItems.js
var import_algoliasearch_helper = __toESM(require_algoliasearch_helper2());
function _typeof6(obj) {
  "@babel/helpers - typeof";
  return _typeof6 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof6(obj);
}
function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray(arr);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
function ownKeys5(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread5(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys5(Object(source), true).forEach(function(key) {
      _defineProperty6(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys5(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty6(obj, key, value) {
  key = _toPropertyKey6(key);
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey6(arg) {
  var key = _toPrimitive6(arg, "string");
  return _typeof6(key) === "symbol" ? key : String(key);
}
function _toPrimitive6(input, hint) {
  if (_typeof6(input) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof6(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function createOptionalFilter(_ref7) {
  var attributeName = _ref7.attributeName, attributeValue = _ref7.attributeValue, attributeScore = _ref7.attributeScore;
  return "".concat(attributeName, ":").concat(attributeValue, "<score=").concat(attributeScore || 1, ">");
}
var defaultProps = {
  transformSearchParameters: function transformSearchParameters(x) {
    return _objectSpread5({}, x);
  }
};
function getId2() {
  return "configure";
}
function getSearchParametersFromProps(props) {
  var optionalFilters = Object.keys(props.matchingPatterns).reduce(function(acc, attributeName) {
    var attributePattern = props.matchingPatterns[attributeName];
    var attributeValue = getPropertyByPath(props.hit, attributeName);
    var attributeScore = attributePattern.score;
    if (Array.isArray(attributeValue)) {
      return [].concat(_toConsumableArray(acc), [attributeValue.map(function(attributeSubValue) {
        return createOptionalFilter({
          attributeName,
          attributeValue: attributeSubValue,
          attributeScore
        });
      })]);
    }
    if (typeof attributeValue === "string") {
      return [].concat(_toConsumableArray(acc), [createOptionalFilter({
        attributeName,
        attributeValue,
        attributeScore
      })]);
    }
    if (true) {
      console.warn("The `matchingPatterns` option returned a value of type ".concat(getObjectType(attributeValue), ' for the "').concat(attributeName, '" key. This value was not sent to Algolia because `optionalFilters` only supports strings and array of strings.\n\nYou can remove the "').concat(attributeName, '" key from the `matchingPatterns` option.\n\nSee https://www.algolia.com/doc/api-reference/api-parameters/optionalFilters/'));
    }
    return acc;
  }, []);
  return props.transformSearchParameters(new import_algoliasearch_helper.default.SearchParameters({
    // @ts-ignore @TODO algoliasearch-helper@3.0.1 will contain the type
    // `sumOrFiltersScores`.
    // See https://github.com/algolia/algoliasearch-helper-js/pull/753
    sumOrFiltersScores: true,
    facetFilters: ["objectID:-".concat(props.hit.objectID)],
    optionalFilters
  }));
}
var connectConfigureRelatedItems_default = createConnector_default({
  displayName: "AlgoliaConfigureRelatedItems",
  $$type: "ais.configureRelatedItems",
  defaultProps,
  getProvidedProps: function getProvidedProps2() {
    return {};
  },
  getSearchParameters: function getSearchParameters2(searchParameters, props) {
    return searchParameters.setQueryParameters(getSearchParametersFromProps(props));
  },
  transitionState: function transitionState2(props, _prevSearchState, nextSearchState) {
    var id = getId2();
    var searchParameters = removeEmptyArraysFromObject(removeEmptyKey(getSearchParametersFromProps(props)));
    var searchParametersKeys = Object.keys(searchParameters);
    var nonPresentKeys = this._searchParameters ? Object.keys(this._searchParameters).filter(function(prop) {
      return searchParametersKeys.indexOf(prop) === -1;
    }) : [];
    this._searchParameters = searchParameters;
    var nextValue = _defineProperty6({}, id, _objectSpread5(_objectSpread5({}, omit(nextSearchState[id], nonPresentKeys)), searchParameters));
    return refineValue(nextSearchState, nextValue, {
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    });
  },
  cleanUp: function cleanUp2(props, searchState) {
    var _this = this;
    var id = getId2();
    var indexId = getIndexId({
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    });
    var subState = hasMultipleIndices({
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    }) && searchState.indices ? searchState.indices[indexId] : searchState;
    var configureKeys = subState && subState[id] ? Object.keys(subState[id]) : [];
    var configureState = configureKeys.reduce(function(acc, item) {
      if (!_this._searchParameters[item]) {
        acc[item] = subState[id][item];
      }
      return acc;
    }, {});
    var nextValue = _defineProperty6({}, id, configureState);
    return refineValue(searchState, nextValue, {
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    });
  }
});

// ../node_modules/react-instantsearch-core/dist/es/widgets/ConfigureRelatedItems.js
var import_prop_types = __toESM(require_prop_types());
function ConfigureRelatedItems() {
  return null;
}
ConfigureRelatedItems.propTypes = {
  hit: import_prop_types.default.object.isRequired,
  matchingPatterns: import_prop_types.default.object.isRequired,
  transformSearchParameters: import_prop_types.default.func
};
var ConfigureRelatedItems_default = connectConfigureRelatedItems_default(ConfigureRelatedItems, {
  $$widgetType: "ais.configureRelatedItems"
});

// ../node_modules/react-instantsearch-core/dist/es/widgets/DynamicWidgets.js
var import_react4 = __toESM(require_react());

// ../node_modules/react-instantsearch-core/dist/es/connectors/connectDynamicWidgets.js
var import_prop_types2 = __toESM(require_prop_types());
var MAX_WILDCARD_FACETS = 20;
var connectDynamicWidgets_default = createConnector_default({
  displayName: "AlgoliaDynamicWidgets",
  $$type: "ais.dynamicWidgets",
  defaultProps: {
    transformItems: function transformItems(items4) {
      return items4;
    },
    maxValuesPerFacet: 20
  },
  propTypes: {
    transformItems: import_prop_types2.default.func,
    facets: import_prop_types2.default.arrayOf(import_prop_types2.default.string),
    maxValuesPerFacet: import_prop_types2.default.number
  },
  getProvidedProps: function getProvidedProps3(props, _searchState, searchResults) {
    var results = getResults(searchResults, {
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    });
    if (props.facets && !(Array.isArray(props.facets) && props.facets.length <= 1 && (props.facets[0] === "*" || props.facets[0] === void 0))) {
      throw new Error('The `facets` prop only accepts [] or ["*"], you passed '.concat(JSON.stringify(props.facets)));
    }
    if (!results) {
      return {
        attributesToRender: []
      };
    }
    var facetOrder = results.renderingContent && results.renderingContent.facetOrdering && results.renderingContent.facetOrdering.facets && results.renderingContent.facetOrdering.facets.order || [];
    var attributesToRender = props.transformItems(facetOrder, {
      results
    });
    if (attributesToRender.length > MAX_WILDCARD_FACETS && !props.facets) {
      console.warn("More than ".concat(MAX_WILDCARD_FACETS, ` facets are requested to be displayed without explicitly setting which facets to retrieve. This could have a performance impact. Set "facets" to [] to do two smaller network requests, or explicitly to ['*'] to avoid this warning.`));
    }
    if (props.maxValuesPerFacet < results._state.maxValuesPerFacet) {
      console.warn("The maxValuesPerFacet set by dynamic widgets (".concat(props.maxValuesPerFacet, ") is smaller than one of the limits set by a widget (").concat(results._state.maxValuesPerFacet, "). This causes a mismatch in query parameters and thus an extra network request when that widget is mounted."));
    }
    return {
      attributesToRender
    };
  },
  getSearchParameters: function getSearchParameters3(searchParameters, props) {
    return (props.facets || ["*"]).reduce(function(acc, curr) {
      return acc.addFacet(curr);
    }, searchParameters.setQueryParameters({
      maxValuesPerFacet: Math.max(props.maxValuesPerFacet || 0, searchParameters.maxValuesPerFacet || 0)
    }));
  }
});

// ../node_modules/react-instantsearch-core/dist/es/widgets/DynamicWidgets.js
function _typeof7(obj) {
  "@babel/helpers - typeof";
  return _typeof7 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof7(obj);
}
function isReactElement(element) {
  return _typeof7(element) === "object" && element.props;
}
function getAttribute(element) {
  if (!isReactElement(element)) {
    return void 0;
  }
  if (element.props.attribute) {
    return element.props.attribute;
  }
  if (Array.isArray(element.props.attributes)) {
    return element.props.attributes[0];
  }
  if (element.props.children) {
    return getAttribute(import_react4.default.Children.only(element.props.children));
  }
  return void 0;
}
function DynamicWidgets(_ref7) {
  var children = _ref7.children, attributesToRender = _ref7.attributesToRender, _ref$fallbackComponen = _ref7.fallbackComponent, Fallback = _ref$fallbackComponen === void 0 ? function() {
    return null;
  } : _ref$fallbackComponen;
  var widgets = /* @__PURE__ */ new Map();
  import_react4.default.Children.forEach(children, function(child) {
    var attribute = getAttribute(child);
    if (!attribute) {
      throw new Error('Could not find "attribute" prop for '.concat(getDisplayName(child), "."));
    }
    widgets.set(attribute, child);
  });
  return import_react4.default.createElement(import_react4.default.Fragment, null, attributesToRender.map(function(attribute) {
    return import_react4.default.createElement(import_react4.Fragment, {
      key: attribute
    }, widgets.get(attribute) || import_react4.default.createElement(Fallback, {
      attribute
    }));
  }));
}
var DynamicWidgets_default = connectDynamicWidgets_default(DynamicWidgets, {
  $$widgetType: "ais.dynamicWidgets"
});

// ../node_modules/react-instantsearch-core/dist/es/connectors/connectQueryRules.js
function _toConsumableArray2(arr) {
  return _arrayWithoutHoles2(arr) || _iterableToArray2(arr) || _unsupportedIterableToArray2(arr) || _nonIterableSpread2();
}
function _nonIterableSpread2() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray2(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray2(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray2(o, minLen);
}
function _iterableToArray2(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _arrayWithoutHoles2(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray2(arr);
}
function _arrayLikeToArray2(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
function escapeRuleContext(ruleName) {
  return ruleName.replace(/[^a-z0-9-_]+/gi, "_");
}
function getWidgetRefinements(attribute, widgetKey, searchState) {
  var widgetState = searchState[widgetKey];
  switch (widgetKey) {
    case "range":
      return Object.keys(widgetState[attribute]).map(function(rangeKey) {
        return widgetState[attribute][rangeKey];
      });
    case "refinementList":
      return widgetState[attribute];
    case "hierarchicalMenu":
      return [widgetState[attribute]];
    case "menu":
      return [widgetState[attribute]];
    case "multiRange":
      return widgetState[attribute].split(":");
    case "toggle":
      return [widgetState[attribute]];
    default:
      return [];
  }
}
function getRefinements2(attribute) {
  var searchState = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  var refinements = Object.keys(searchState).filter(function(widgetKey) {
    return searchState[widgetKey] !== void 0 && searchState[widgetKey][attribute] !== void 0;
  }).map(function(widgetKey) {
    return getWidgetRefinements(attribute, widgetKey, searchState);
  }).reduce(function(acc, current) {
    return acc.concat(current);
  }, []);
  return refinements;
}
function getRuleContextsFromTrackedFilters(_ref7) {
  var searchState = _ref7.searchState, trackedFilters = _ref7.trackedFilters;
  var ruleContexts = Object.keys(trackedFilters).reduce(function(facets, facetName) {
    var facetRefinements = getRefinements2(facetName, searchState);
    var getTrackedFacetValues = trackedFilters[facetName];
    var trackedFacetValues = getTrackedFacetValues(facetRefinements);
    return [].concat(_toConsumableArray2(facets), _toConsumableArray2(facetRefinements.filter(function(facetRefinement) {
      return trackedFacetValues.includes(facetRefinement);
    }).map(function(facetValue) {
      return escapeRuleContext("ais-".concat(facetName, "-").concat(facetValue));
    })));
  }, []);
  return ruleContexts;
}
var defaultProps2 = {
  transformItems: function transformItems2(items4) {
    return items4;
  },
  transformRuleContexts: function transformRuleContexts(ruleContexts) {
    return ruleContexts;
  },
  trackedFilters: {}
};
var connectQueryRules_default = createConnector_default({
  displayName: "AlgoliaQueryRules",
  $$type: "ais.queryRules",
  defaultProps: defaultProps2,
  getProvidedProps: function getProvidedProps4(props, _1, searchResults) {
    var results = getResults(searchResults, {
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    });
    if (results === null) {
      return {
        items: [],
        canRefine: false
      };
    }
    var _results$userData = results.userData, userData = _results$userData === void 0 ? [] : _results$userData;
    var transformItems3 = props.transformItems;
    var transformedItems = transformItems3(userData);
    return {
      items: transformedItems,
      canRefine: transformedItems.length > 0
    };
  },
  getSearchParameters: function getSearchParameters4(searchParameters, props, searchState) {
    if (Object.keys(props.trackedFilters).length === 0) {
      return searchParameters;
    }
    var indexSearchState = hasMultipleIndices({
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    }) && searchState.indices ? searchState.indices[getIndexId({
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    })] : searchState;
    var newRuleContexts = getRuleContextsFromTrackedFilters({
      searchState: indexSearchState,
      trackedFilters: props.trackedFilters
    });
    var initialRuleContexts = searchParameters.ruleContexts || [];
    var nextRuleContexts = [].concat(_toConsumableArray2(initialRuleContexts), _toConsumableArray2(newRuleContexts));
    if (true) {
      if (nextRuleContexts.length > 10) {
        console.warn("The maximum number of `ruleContexts` is 10. They have been sliced to that limit.\nConsider using `transformRuleContexts` to minimize the number of rules sent to Algolia.");
      }
    }
    var ruleContexts = props.transformRuleContexts(nextRuleContexts).slice(0, 10);
    return searchParameters.setQueryParameter("ruleContexts", ruleContexts);
  }
});

// ../node_modules/react-instantsearch-core/dist/es/widgets/QueryRuleContext.js
var QueryRuleContext_default = connectQueryRules_default(function QueryRuleContext() {
  return null;
}, {
  $$widgetType: "ais.queryRuleContext"
});

// ../node_modules/react-instantsearch-core/dist/es/widgets/Index.js
var import_react5 = __toESM(require_react());
var import_prop_types3 = __toESM(require_prop_types());
function _typeof8(obj) {
  "@babel/helpers - typeof";
  return _typeof8 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof8(obj);
}
function _extends3() {
  _extends3 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends3.apply(this, arguments);
}
function _classCallCheck3(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties3(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey7(descriptor.key), descriptor);
  }
}
function _createClass3(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties3(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties3(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", { writable: false });
  return Constructor;
}
function _inherits3(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  Object.defineProperty(subClass, "prototype", { writable: false });
  if (superClass)
    _setPrototypeOf3(subClass, superClass);
}
function _setPrototypeOf3(o, p) {
  _setPrototypeOf3 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf28(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf3(o, p);
}
function _createSuper3(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct3();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf3(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf3(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn3(this, result);
  };
}
function _possibleConstructorReturn3(self, call) {
  if (call && (_typeof8(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized3(self);
}
function _assertThisInitialized3(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct3() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf3(o) {
  _getPrototypeOf3 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf28(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf3(o);
}
function _defineProperty7(obj, key, value) {
  key = _toPropertyKey7(key);
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey7(arg) {
  var key = _toPrimitive7(arg, "string");
  return _typeof8(key) === "symbol" ? key : String(key);
}
function _toPrimitive7(input, hint) {
  if (_typeof8(input) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof8(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function getIndexContext(props) {
  return {
    targetedIndex: props.indexId
  };
}
var Index = function(_Component) {
  _inherits3(Index2, _Component);
  var _super = _createSuper3(Index2);
  function Index2(props) {
    var _this;
    _classCallCheck3(this, Index2);
    _this = _super.call(this, props);
    _defineProperty7(_assertThisInitialized3(_this), "state", {
      indexContext: getIndexContext(_this.props)
    });
    _defineProperty7(_assertThisInitialized3(_this), "unregisterWidget", void 0);
    _this.props.contextValue.onSearchParameters(_this.getSearchParameters.bind(_assertThisInitialized3(_this)), {
      ais: _this.props.contextValue,
      multiIndexContext: _this.state.indexContext
    }, _this.props, void 0, Index2.displayName);
    return _this;
  }
  _createClass3(Index2, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.unregisterWidget = this.props.contextValue.widgetsManager.registerWidget(this);
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (this.props.indexName !== prevProps.indexName) {
        this.props.contextValue.widgetsManager.update();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (typeof this.unregisterWidget === "function") {
        this.unregisterWidget();
      }
    }
  }, {
    key: "getSearchParameters",
    value: function getSearchParameters21(searchParameters, props) {
      return searchParameters.setIndex(this.props ? this.props.indexName : props.indexName);
    }
  }, {
    key: "render",
    value: function render() {
      var childrenCount = import_react5.Children.count(this.props.children);
      if (childrenCount === 0) {
        return null;
      }
      return import_react5.default.createElement(IndexProvider, {
        value: this.state.indexContext
      }, this.props.children);
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(props) {
      return {
        indexContext: getIndexContext(props)
      };
    }
  }]);
  return Index2;
}(import_react5.Component);
_defineProperty7(Index, "propTypes", {
  indexName: import_prop_types3.default.string.isRequired,
  indexId: import_prop_types3.default.string.isRequired,
  children: import_prop_types3.default.node
});
_defineProperty7(Index, "displayName", "AlgoliaIndex");
_defineProperty7(Index, "$$type", "ais.index");
_defineProperty7(Index, "$$widgetType", "ais.index");
var IndexWrapper = function IndexWrapper2(props) {
  var inferredIndexId = props.indexName;
  return import_react5.default.createElement(InstantSearchConsumer, null, function(contextValue) {
    return import_react5.default.createElement(Index, _extends3({
      contextValue,
      indexId: inferredIndexId
    }, props));
  });
};
IndexWrapper.propTypes = {
  indexName: import_prop_types3.default.string.isRequired,
  indexId: import_prop_types3.default.string
};
var Index_default = IndexWrapper;

// ../node_modules/react-instantsearch-core/dist/es/widgets/InstantSearch.js
var import_react7 = __toESM(require_react());
var import_react_fast_compare2 = __toESM(require_react_fast_compare());
var import_prop_types4 = __toESM(require_prop_types());

// ../node_modules/react-instantsearch-core/dist/es/core/createInstantSearchManager.js
var import_algoliasearch_helper2 = __toESM(require_algoliasearch_helper2());

// ../node_modules/react-instantsearch-core/dist/es/core/createWidgetsManager.js
function createWidgetsManager(onWidgetsUpdate) {
  var widgets = [];
  var scheduled = false;
  function scheduleUpdate() {
    if (scheduled) {
      return;
    }
    scheduled = true;
    defer(function() {
      scheduled = false;
      onWidgetsUpdate();
    });
  }
  return {
    registerWidget: function registerWidget(widget) {
      widgets.push(widget);
      scheduleUpdate();
      return function unregisterWidget() {
        widgets.splice(widgets.indexOf(widget), 1);
        scheduleUpdate();
      };
    },
    update: scheduleUpdate,
    getWidgets: function getWidgets() {
      return widgets;
    }
  };
}

// ../node_modules/react-instantsearch-core/dist/es/core/createStore.js
function createStore(initialState) {
  var state = initialState;
  var listeners = [];
  return {
    getState: function getState() {
      return state;
    },
    setState: function setState(nextState) {
      state = nextState;
      listeners.forEach(function(listener) {
        return listener();
      });
    },
    subscribe: function subscribe(listener) {
      listeners.push(listener);
      return function unsubscribe() {
        listeners.splice(listeners.indexOf(listener), 1);
      };
    }
  };
}

// ../node_modules/react-instantsearch-core/dist/es/core/createInstantSearchManager.js
var import_react6 = __toESM(require_react());
var _excluded3 = ["resultsFacetValues"];
var _excluded23 = ["resultsFacetValues"];
var _excluded32 = ["resultsFacetValues"];
function _typeof9(obj) {
  "@babel/helpers - typeof";
  return _typeof9 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof9(obj);
}
function _objectWithoutProperties3(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose3(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose3(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function ownKeys6(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread6(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys6(Object(source), true).forEach(function(key) {
      _defineProperty8(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys6(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty8(obj, key, value) {
  key = _toPropertyKey8(key);
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey8(arg) {
  var key = _toPrimitive8(arg, "string");
  return _typeof9(key) === "symbol" ? key : String(key);
}
function _toPrimitive8(input, hint) {
  if (_typeof9(input) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof9(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function addAlgoliaAgents(searchClient) {
  if (typeof searchClient.addAlgoliaAgent === "function") {
    searchClient.addAlgoliaAgent("react (".concat(import_react6.version, ")"));
    searchClient.addAlgoliaAgent("react-instantsearch (".concat(version_default, ")"));
  }
}
var isMultiIndexContext = function isMultiIndexContext2(widget) {
  return hasMultipleIndices({
    ais: widget.props.contextValue,
    multiIndexContext: widget.props.indexContextValue
  });
};
var isTargetedIndexEqualIndex = function isTargetedIndexEqualIndex2(widget, indexId) {
  return widget.props.indexContextValue.targetedIndex === indexId;
};
var isIndexWidget = function isIndexWidget2(widget) {
  return Boolean(widget.props.indexId);
};
var isIndexWidgetEqualIndex = function isIndexWidgetEqualIndex2(widget, indexId) {
  return widget.props.indexId === indexId;
};
var sortIndexWidgetsFirst = function sortIndexWidgetsFirst2(firstWidget, secondWidget) {
  var isFirstWidgetIndex = isIndexWidget(firstWidget);
  var isSecondWidgetIndex = isIndexWidget(secondWidget);
  if (isFirstWidgetIndex && !isSecondWidgetIndex) {
    return -1;
  }
  if (!isFirstWidgetIndex && isSecondWidgetIndex) {
    return 1;
  }
  return 0;
};
function serializeQueryParameters(parameters) {
  var isObjectOrArray = function isObjectOrArray2(value) {
    return Object.prototype.toString.call(value) === "[object Object]" || Object.prototype.toString.call(value) === "[object Array]";
  };
  var encode = function encode2(format) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    var i = 0;
    return format.replace(/%s/g, function() {
      return encodeURIComponent(args[i++]);
    });
  };
  return Object.keys(parameters).map(function(key) {
    return encode("%s=%s", key, isObjectOrArray(parameters[key]) ? JSON.stringify(parameters[key]) : parameters[key]);
  }).join("&");
}
function createInstantSearchManager(_ref7) {
  var indexName = _ref7.indexName, _ref$initialState = _ref7.initialState, initialState = _ref$initialState === void 0 ? {} : _ref$initialState, searchClient = _ref7.searchClient, resultsState = _ref7.resultsState, stalledSearchDelay = _ref7.stalledSearchDelay;
  var helper = (0, import_algoliasearch_helper2.default)(searchClient, indexName, _objectSpread6({}, HIGHLIGHT_TAGS));
  addAlgoliaAgents(searchClient);
  helper.on("search", handleNewSearch).on("result", handleSearchSuccess({
    indexId: indexName
  })).on("error", handleSearchError);
  var skip = false;
  var stalledSearchTimer = null;
  var initialSearchParameters = helper.state;
  var searchCounter;
  var widgetsManager = createWidgetsManager(onWidgetsUpdate);
  hydrateSearchClient(searchClient, resultsState);
  var store = createStore({
    widgets: initialState,
    metadata: hydrateMetadata(resultsState),
    results: hydrateResultsState(resultsState),
    error: null,
    searching: false,
    isSearchStalled: true,
    searchingForFacetValues: false
  });
  function skipSearch() {
    skip = true;
  }
  function updateClient(client) {
    addAlgoliaAgents(client);
    helper.setClient(client);
    search();
  }
  function clearCache() {
    helper.clearCache();
    search();
  }
  function getMetadata13(state) {
    return widgetsManager.getWidgets().filter(function(widget) {
      return Boolean(widget.getMetadata);
    }).map(function(widget) {
      return widget.getMetadata(state);
    });
  }
  function getSearchParameters21() {
    var sharedParameters = widgetsManager.getWidgets().filter(function(widget) {
      return Boolean(widget.getSearchParameters);
    }).filter(function(widget) {
      return !isMultiIndexContext(widget) && !isIndexWidget(widget);
    }).reduce(function(res, widget) {
      return widget.getSearchParameters(res);
    }, initialSearchParameters);
    var mainParameters = widgetsManager.getWidgets().filter(function(widget) {
      return Boolean(widget.getSearchParameters);
    }).filter(function(widget) {
      var targetedIndexEqualMainIndex = isMultiIndexContext(widget) && isTargetedIndexEqualIndex(widget, indexName);
      var subIndexEqualMainIndex = isIndexWidget(widget) && isIndexWidgetEqualIndex(widget, indexName);
      return targetedIndexEqualMainIndex || subIndexEqualMainIndex;
    }).sort(sortIndexWidgetsFirst).reduce(function(res, widget) {
      return widget.getSearchParameters(res);
    }, sharedParameters);
    var derivedIndices = widgetsManager.getWidgets().filter(function(widget) {
      return Boolean(widget.getSearchParameters);
    }).filter(function(widget) {
      var targetedIndexNotEqualMainIndex = isMultiIndexContext(widget) && !isTargetedIndexEqualIndex(widget, indexName);
      var subIndexNotEqualMainIndex = isIndexWidget(widget) && !isIndexWidgetEqualIndex(widget, indexName);
      return targetedIndexNotEqualMainIndex || subIndexNotEqualMainIndex;
    }).sort(sortIndexWidgetsFirst).reduce(function(indices, widget) {
      var indexId = isMultiIndexContext(widget) ? widget.props.indexContextValue.targetedIndex : widget.props.indexId;
      var widgets = indices[indexId] || [];
      return _objectSpread6(_objectSpread6({}, indices), {}, _defineProperty8({}, indexId, widgets.concat(widget)));
    }, {});
    var derivedParameters = Object.keys(derivedIndices).map(function(indexId) {
      return {
        parameters: derivedIndices[indexId].reduce(function(res, widget) {
          return widget.getSearchParameters(res);
        }, sharedParameters),
        indexId
      };
    });
    return {
      mainParameters,
      derivedParameters
    };
  }
  function search() {
    if (!skip) {
      var _getSearchParameters = getSearchParameters21(helper.state), mainParameters = _getSearchParameters.mainParameters, derivedParameters = _getSearchParameters.derivedParameters;
      searchCounter = derivedParameters.length + 1;
      helper.derivedHelpers.slice().forEach(function(derivedHelper) {
        derivedHelper.detach();
      });
      derivedParameters.forEach(function(_ref23) {
        var indexId = _ref23.indexId, parameters = _ref23.parameters;
        var derivedHelper = helper.derive(function() {
          return parameters;
        });
        derivedHelper.on("result", handleSearchSuccess({
          indexId
        })).on("error", handleSearchError);
      });
      helper.setState(mainParameters);
      helper.search();
    }
  }
  function handleSearchSuccess(_ref34) {
    var indexId = _ref34.indexId;
    return function(event) {
      searchCounter--;
      var state = store.getState();
      var isDerivedHelpersEmpty = !helper.derivedHelpers.length;
      var results = state.results ? state.results : {};
      results = !isDerivedHelpersEmpty && results.getFacetByName ? {} : results;
      if (!isDerivedHelpersEmpty) {
        results = _objectSpread6(_objectSpread6({}, results), {}, _defineProperty8({}, indexId, event.results));
      } else {
        results = event.results;
      }
      var currentState = store.getState();
      var nextIsSearchStalled = currentState.isSearchStalled;
      if (!helper.hasPendingRequests()) {
        clearTimeout(stalledSearchTimer);
        stalledSearchTimer = null;
        nextIsSearchStalled = false;
      }
      var resultsFacetValues = currentState.resultsFacetValues, partialState = _objectWithoutProperties3(currentState, _excluded3);
      store.setState(_objectSpread6(_objectSpread6({}, partialState), {}, {
        results,
        isSearchStalled: nextIsSearchStalled,
        searching: searchCounter > 0,
        error: null
      }));
    };
  }
  function handleSearchError(_ref42) {
    var error = _ref42.error;
    var currentState = store.getState();
    var nextIsSearchStalled = currentState.isSearchStalled;
    if (!helper.hasPendingRequests()) {
      clearTimeout(stalledSearchTimer);
      nextIsSearchStalled = false;
    }
    var resultsFacetValues = currentState.resultsFacetValues, partialState = _objectWithoutProperties3(currentState, _excluded23);
    store.setState(_objectSpread6(_objectSpread6({}, partialState), {}, {
      isSearchStalled: nextIsSearchStalled,
      error,
      searching: false
    }));
  }
  function handleNewSearch() {
    if (!stalledSearchTimer) {
      stalledSearchTimer = setTimeout(function() {
        var _store$getState = store.getState(), resultsFacetValues = _store$getState.resultsFacetValues, partialState = _objectWithoutProperties3(_store$getState, _excluded32);
        store.setState(_objectSpread6(_objectSpread6({}, partialState), {}, {
          isSearchStalled: true
        }));
      }, stalledSearchDelay);
    }
  }
  function hydrateSearchClient(client, results) {
    if (!results) {
      return;
    }
    if ((!client.transporter || client._cacheHydrated) && (!client._useCache || typeof client.addAlgoliaAgent !== "function")) {
      return;
    }
    if (client.transporter && !client._cacheHydrated) {
      client._cacheHydrated = true;
      var baseMethod = client.search;
      client.search = function(requests) {
        for (var _len2 = arguments.length, methodArgs = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
          methodArgs[_key2 - 1] = arguments[_key2];
        }
        var requestsWithSerializedParams = requests.map(function(request) {
          return _objectSpread6(_objectSpread6({}, request), {}, {
            params: serializeQueryParameters(request.params)
          });
        });
        return client.transporter.responsesCache.get({
          method: "search",
          args: [requestsWithSerializedParams].concat(methodArgs)
        }, function() {
          return baseMethod.apply(void 0, [requests].concat(methodArgs));
        });
      };
    }
    if (Array.isArray(results.results)) {
      hydrateSearchClientWithMultiIndexRequest(client, results.results);
      return;
    }
    hydrateSearchClientWithSingleIndexRequest(client, results);
  }
  function hydrateSearchClientWithMultiIndexRequest(client, results) {
    if (client.transporter) {
      client.transporter.responsesCache.set({
        method: "search",
        args: [results.reduce(function(acc, result) {
          return acc.concat(result.rawResults.map(function(request) {
            return {
              indexName: request.index,
              params: request.params
            };
          }));
        }, [])]
      }, {
        results: results.reduce(function(acc, result) {
          return acc.concat(result.rawResults);
        }, [])
      });
      return;
    }
    var key = "/1/indexes/*/queries_body_".concat(JSON.stringify({
      requests: results.reduce(function(acc, result) {
        return acc.concat(result.rawResults.map(function(request) {
          return {
            indexName: request.index,
            params: request.params
          };
        }));
      }, [])
    }));
    client.cache = _objectSpread6(_objectSpread6({}, client.cache), {}, _defineProperty8({}, key, JSON.stringify({
      results: results.reduce(function(acc, result) {
        return acc.concat(result.rawResults);
      }, [])
    })));
  }
  function hydrateSearchClientWithSingleIndexRequest(client, results) {
    if (client.transporter) {
      client.transporter.responsesCache.set({
        method: "search",
        args: [results.rawResults.map(function(request) {
          return {
            indexName: request.index,
            params: request.params
          };
        })]
      }, {
        results: results.rawResults
      });
      return;
    }
    var key = "/1/indexes/*/queries_body_".concat(JSON.stringify({
      requests: results.rawResults.map(function(request) {
        return {
          indexName: request.index,
          params: request.params
        };
      })
    }));
    client.cache = _objectSpread6(_objectSpread6({}, client.cache), {}, _defineProperty8({}, key, JSON.stringify({
      results: results.rawResults
    })));
  }
  function hydrateResultsState(results) {
    if (!results) {
      return null;
    }
    if (Array.isArray(results.results)) {
      return results.results.reduce(function(acc, result) {
        return _objectSpread6(_objectSpread6({}, acc), {}, _defineProperty8({}, result._internalIndexId, new import_algoliasearch_helper2.default.SearchResults(new import_algoliasearch_helper2.default.SearchParameters(result.state), result.rawResults)));
      }, {});
    }
    return new import_algoliasearch_helper2.default.SearchResults(new import_algoliasearch_helper2.default.SearchParameters(results.state), results.rawResults);
  }
  function onWidgetsUpdate() {
    var metadata = getMetadata13(store.getState().widgets);
    store.setState(_objectSpread6(_objectSpread6({}, store.getState()), {}, {
      metadata,
      searching: true
    }));
    search();
  }
  function transitionState3(nextSearchState) {
    var searchState = store.getState().widgets;
    return widgetsManager.getWidgets().filter(function(widget) {
      return Boolean(widget.transitionState);
    }).reduce(function(res, widget) {
      return widget.transitionState(searchState, res);
    }, nextSearchState);
  }
  function onExternalStateUpdate(nextSearchState) {
    var metadata = getMetadata13(nextSearchState);
    store.setState(_objectSpread6(_objectSpread6({}, store.getState()), {}, {
      widgets: nextSearchState,
      metadata,
      searching: true
    }));
    search();
  }
  function onSearchForFacetValues2(_ref52) {
    var facetName = _ref52.facetName, query = _ref52.query, _ref5$maxFacetHits = _ref52.maxFacetHits, maxFacetHits = _ref5$maxFacetHits === void 0 ? 10 : _ref5$maxFacetHits;
    var maxFacetHitsWithinRange = Math.max(1, Math.min(maxFacetHits, 100));
    store.setState(_objectSpread6(_objectSpread6({}, store.getState()), {}, {
      searchingForFacetValues: true
    }));
    helper.searchForFacetValues(facetName, query, maxFacetHitsWithinRange).then(function(content) {
      var _objectSpread72;
      store.setState(_objectSpread6(_objectSpread6({}, store.getState()), {}, {
        error: null,
        searchingForFacetValues: false,
        resultsFacetValues: _objectSpread6(_objectSpread6({}, store.getState().resultsFacetValues), {}, (_objectSpread72 = {}, _defineProperty8(_objectSpread72, facetName, content.facetHits), _defineProperty8(_objectSpread72, "query", query), _objectSpread72))
      }));
    }, function(error) {
      store.setState(_objectSpread6(_objectSpread6({}, store.getState()), {}, {
        searchingForFacetValues: false,
        error
      }));
    }).catch(function(error) {
      setTimeout(function() {
        throw error;
      });
    });
  }
  function updateIndex(newIndex) {
    initialSearchParameters = initialSearchParameters.setIndex(newIndex);
  }
  function getWidgetsIds() {
    return store.getState().metadata.reduce(function(res, meta) {
      return typeof meta.id !== "undefined" ? res.concat(meta.id) : res;
    }, []);
  }
  return {
    store,
    widgetsManager,
    getWidgetsIds,
    getSearchParameters: getSearchParameters21,
    onSearchForFacetValues: onSearchForFacetValues2,
    onExternalStateUpdate,
    transitionState: transitionState3,
    updateClient,
    updateIndex,
    clearCache,
    skipSearch
  };
}
function hydrateMetadata(resultsState) {
  if (!resultsState) {
    return [];
  }
  return resultsState.metadata.map(function(datum) {
    return _objectSpread6(_objectSpread6({
      value: function value() {
        return {};
      }
    }, datum), {}, {
      items: datum.items && datum.items.map(function(item) {
        return _objectSpread6(_objectSpread6({
          value: function value() {
            return {};
          }
        }, item), {}, {
          items: item.items && item.items.map(function(nestedItem) {
            return _objectSpread6({
              value: function value() {
                return {};
              }
            }, nestedItem);
          })
        });
      })
    });
  });
}

// ../node_modules/react-instantsearch-core/dist/es/core/metadata.js
function _typeof10(obj) {
  "@babel/helpers - typeof";
  return _typeof10 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof10(obj);
}
function isMetadataEnabled() {
  return (typeof window === "undefined" ? "undefined" : _typeof10(window)) === "object" && _typeof10(window.navigator) === "object" && typeof window.navigator.userAgent === "string" && window.navigator.userAgent.includes("Algolia Crawler") && _typeof10(window.document) === "object";
}
function getMetadataPayload(widgets, searchClient) {
  var internalProps = ["contextValue", "indexContextValue"];
  var widgetsPayload = widgets.map(function(_ref7) {
    var props = _ref7.props, constructor = _ref7.constructor;
    var _ref23 = constructor._connectorDesc || {}, _ref2$defaultProps = _ref23.defaultProps, defaultProps3 = _ref2$defaultProps === void 0 ? {} : _ref2$defaultProps, _ref2$displayName = _ref23.displayName, displayName = _ref2$displayName === void 0 ? constructor.displayName : _ref2$displayName;
    return {
      displayName,
      $$type: constructor.$$type,
      $$widgetType: constructor.$$widgetType,
      params: Object.keys(props).filter(function(prop) {
        return !internalProps.includes(prop) && defaultProps3[prop] !== props[prop] && props[prop] !== void 0;
      })
    };
  });
  var client = searchClient;
  var ua = client.transporter && client.transporter.userAgent ? client.transporter.userAgent.value : client._ua;
  return {
    ua,
    widgets: widgetsPayload
  };
}
function injectMetadata(widgets, searchClient) {
  var payloadContainer = document.createElement("meta");
  var refNode = document.querySelector("head");
  payloadContainer.name = "algolia:metadata";
  var payload = getMetadataPayload(widgets, searchClient);
  payloadContainer.content = JSON.stringify(payload);
  refNode.appendChild(payloadContainer);
}

// ../node_modules/react-instantsearch-core/dist/es/widgets/InstantSearch.js
function _typeof11(obj) {
  "@babel/helpers - typeof";
  return _typeof11 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof11(obj);
}
function ownKeys7(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread7(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys7(Object(source), true).forEach(function(key) {
      _defineProperty9(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys7(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _classCallCheck4(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties4(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey9(descriptor.key), descriptor);
  }
}
function _createClass4(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties4(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties4(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", { writable: false });
  return Constructor;
}
function _inherits4(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  Object.defineProperty(subClass, "prototype", { writable: false });
  if (superClass)
    _setPrototypeOf4(subClass, superClass);
}
function _setPrototypeOf4(o, p) {
  _setPrototypeOf4 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf28(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf4(o, p);
}
function _createSuper4(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct4();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf4(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf4(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn4(this, result);
  };
}
function _possibleConstructorReturn4(self, call) {
  if (call && (_typeof11(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized4(self);
}
function _assertThisInitialized4(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct4() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf4(o) {
  _getPrototypeOf4 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf28(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf4(o);
}
function _defineProperty9(obj, key, value) {
  key = _toPropertyKey9(key);
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey9(arg) {
  var key = _toPrimitive9(arg, "string");
  return _typeof11(key) === "symbol" ? key : String(key);
}
function _toPrimitive9(input, hint) {
  if (_typeof11(input) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof11(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function isControlled(props) {
  return Boolean(props.searchState);
}
var InstantSearch = function(_Component) {
  _inherits4(InstantSearch2, _Component);
  var _super = _createSuper4(InstantSearch2);
  function InstantSearch2(props) {
    var _this;
    _classCallCheck4(this, InstantSearch2);
    _this = _super.call(this, props);
    _defineProperty9(_assertThisInitialized4(_this), "cleanupTimerRef", null);
    _defineProperty9(_assertThisInitialized4(_this), "isUnmounting", false);
    var instantSearchManager = createInstantSearchManager({
      indexName: _this.props.indexName,
      searchClient: _this.props.searchClient,
      initialState: _this.props.searchState || {},
      resultsState: _this.props.resultsState,
      stalledSearchDelay: _this.props.stalledSearchDelay
    });
    var contextValue = {
      store: instantSearchManager.store,
      widgetsManager: instantSearchManager.widgetsManager,
      mainTargetedIndex: _this.props.indexName,
      onInternalStateUpdate: _this.onWidgetsInternalStateUpdate.bind(_assertThisInitialized4(_this)),
      createHrefForState: _this.createHrefForState.bind(_assertThisInitialized4(_this)),
      onSearchForFacetValues: _this.onSearchForFacetValues.bind(_assertThisInitialized4(_this)),
      onSearchStateChange: _this.onSearchStateChange.bind(_assertThisInitialized4(_this)),
      onSearchParameters: _this.onSearchParameters.bind(_assertThisInitialized4(_this))
    };
    _this.state = {
      isControlled: isControlled(_this.props),
      instantSearchManager,
      contextValue
    };
    return _this;
  }
  _createClass4(InstantSearch2, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var prevIsControlled = isControlled(prevProps);
      if (prevIsControlled && !this.state.isControlled) {
        throw new Error("You can't switch <InstantSearch> from being controlled to uncontrolled");
      }
      if (!prevIsControlled && this.state.isControlled) {
        throw new Error("You can't switch <InstantSearch> from being uncontrolled to controlled");
      }
      if (this.props.refresh !== prevProps.refresh && this.props.refresh) {
        this.state.instantSearchManager.clearCache();
      }
      if (prevProps.indexName !== this.props.indexName) {
        this.state.instantSearchManager.updateIndex(this.props.indexName);
      }
      if (prevProps.searchClient !== this.props.searchClient) {
        this.state.instantSearchManager.updateClient(this.props.searchClient);
      }
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.cleanupTimerRef) {
        clearTimeout(this.cleanupTimerRef);
        this.cleanupTimerRef = null;
      }
      if (isMetadataEnabled()) {
        injectMetadata(this.state.instantSearchManager.widgetsManager.getWidgets(), this.props.searchClient);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      var _this2 = this;
      this.cleanupTimerRef = setTimeout(function() {
        _this2.isUnmounting = true;
        _this2.state.instantSearchManager.skipSearch();
      });
    }
  }, {
    key: "createHrefForState",
    value: function createHrefForState2(searchState) {
      searchState = this.state.instantSearchManager.transitionState(searchState);
      return this.state.isControlled && this.props.createURL ? this.props.createURL(searchState, this.getKnownKeys()) : "#";
    }
  }, {
    key: "onWidgetsInternalStateUpdate",
    value: function onWidgetsInternalStateUpdate(searchState) {
      searchState = this.state.instantSearchManager.transitionState(searchState);
      this.onSearchStateChange(searchState);
      if (!this.state.isControlled) {
        this.state.instantSearchManager.onExternalStateUpdate(searchState);
      }
    }
  }, {
    key: "onSearchStateChange",
    value: function onSearchStateChange2(searchState) {
      if (this.props.onSearchStateChange && !this.isUnmounting) {
        this.props.onSearchStateChange(searchState);
      }
    }
  }, {
    key: "onSearchParameters",
    value: function onSearchParameters2(getSearchParameters21, context, props, getMetadata13, displayName) {
      if (this.props.onSearchParameters) {
        var _searchState = this.props.searchState ? this.props.searchState : {};
        this.props.onSearchParameters(getSearchParameters21, context, props, _searchState);
      }
      if (this.props.widgetsCollector) {
        var _searchState2 = this.props.searchState ? this.props.searchState : {};
        this.props.widgetsCollector({
          getSearchParameters: getSearchParameters21,
          getMetadata: getMetadata13,
          context,
          props,
          searchState: _searchState2,
          displayName
        });
      }
    }
  }, {
    key: "onSearchForFacetValues",
    value: function onSearchForFacetValues2(searchState) {
      this.state.instantSearchManager.onSearchForFacetValues(searchState);
    }
  }, {
    key: "getKnownKeys",
    value: function getKnownKeys() {
      return this.state.instantSearchManager.getWidgetsIds();
    }
  }, {
    key: "render",
    value: function render() {
      if (import_react7.Children.count(this.props.children) === 0) {
        return null;
      }
      return import_react7.default.createElement(InstantSearchProvider, {
        value: this.state.contextValue
      }, this.props.children);
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps, prevState) {
      var nextIsControlled = isControlled(nextProps);
      var previousSearchState = prevState.instantSearchManager.store.getState().widgets;
      var nextSearchState = nextProps.searchState;
      if (nextIsControlled && !(0, import_react_fast_compare2.default)(previousSearchState, nextSearchState)) {
        prevState.instantSearchManager.onExternalStateUpdate(nextProps.searchState);
      }
      return {
        isControlled: nextIsControlled,
        contextValue: _objectSpread7(_objectSpread7({}, prevState.contextValue), {}, {
          mainTargetedIndex: nextProps.indexName
        })
      };
    }
  }]);
  return InstantSearch2;
}(import_react7.Component);
_defineProperty9(InstantSearch, "defaultProps", {
  stalledSearchDelay: 200,
  refresh: false
});
_defineProperty9(InstantSearch, "propTypes", {
  // @TODO: These props are currently constant.
  indexName: import_prop_types4.default.string.isRequired,
  searchClient: import_prop_types4.default.shape({
    search: import_prop_types4.default.func.isRequired,
    searchForFacetValues: import_prop_types4.default.func,
    addAlgoliaAgent: import_prop_types4.default.func,
    clearCache: import_prop_types4.default.func
  }).isRequired,
  createURL: import_prop_types4.default.func,
  refresh: import_prop_types4.default.bool,
  searchState: import_prop_types4.default.object,
  onSearchStateChange: import_prop_types4.default.func,
  onSearchParameters: import_prop_types4.default.func,
  widgetsCollector: import_prop_types4.default.func,
  resultsState: import_prop_types4.default.oneOfType([import_prop_types4.default.object, import_prop_types4.default.array]),
  children: import_prop_types4.default.node,
  stalledSearchDelay: import_prop_types4.default.number
});
var InstantSearch_default = InstantSearch;

// ../node_modules/react-instantsearch-core/dist/es/connectors/connectAutoComplete.js
function _typeof12(obj) {
  "@babel/helpers - typeof";
  return _typeof12 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof12(obj);
}
function _defineProperty10(obj, key, value) {
  key = _toPropertyKey10(key);
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey10(arg) {
  var key = _toPrimitive10(arg, "string");
  return _typeof12(key) === "symbol" ? key : String(key);
}
function _toPrimitive10(input, hint) {
  if (_typeof12(input) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof12(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function _toConsumableArray3(arr) {
  return _arrayWithoutHoles3(arr) || _iterableToArray3(arr) || _unsupportedIterableToArray3(arr) || _nonIterableSpread3();
}
function _nonIterableSpread3() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray3(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray3(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray3(o, minLen);
}
function _iterableToArray3(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _arrayWithoutHoles3(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray3(arr);
}
function _arrayLikeToArray3(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
var getId3 = function getId4() {
  return "query";
};
function getCurrentRefinement(props, searchState, context) {
  var id = getId3();
  var currentRefinement = getCurrentRefinementValue(props, searchState, context, id, "");
  if (currentRefinement) {
    return currentRefinement;
  }
  return "";
}
function getHits(searchResults) {
  if (searchResults.results) {
    if (searchResults.results.hits && Array.isArray(searchResults.results.hits)) {
      return addAbsolutePositions(addQueryID(searchResults.results.hits, searchResults.results.queryID), searchResults.results.hitsPerPage, searchResults.results.page);
    } else {
      return Object.keys(searchResults.results).reduce(function(hits, index) {
        return [].concat(_toConsumableArray3(hits), [{
          index,
          hits: addAbsolutePositions(addQueryID(searchResults.results[index].hits, searchResults.results[index].queryID), searchResults.results[index].hitsPerPage, searchResults.results[index].page)
        }]);
      }, []);
    }
  } else {
    return [];
  }
}
function _refine(props, searchState, nextRefinement, context) {
  var id = getId3();
  var nextValue = _defineProperty10({}, id, nextRefinement);
  var resetPage = true;
  return refineValue(searchState, nextValue, context, resetPage);
}
function _cleanUp(props, searchState, context) {
  return cleanUpValue(searchState, context, getId3());
}
var connectAutoComplete_default = createConnector_default({
  displayName: "AlgoliaAutoComplete",
  $$type: "ais.autoComplete",
  getProvidedProps: function getProvidedProps5(props, searchState, searchResults) {
    return {
      hits: getHits(searchResults),
      currentRefinement: getCurrentRefinement(props, searchState, {
        ais: props.contextValue,
        multiIndexContext: props.indexContextValue
      })
    };
  },
  refine: function refine(props, searchState, nextRefinement) {
    return _refine(props, searchState, nextRefinement, {
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    });
  },
  cleanUp: function cleanUp3(props, searchState) {
    return _cleanUp(props, searchState, {
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    });
  },
  getSearchParameters: function getSearchParameters5(searchParameters, props, searchState) {
    return searchParameters.setQuery(getCurrentRefinement(props, searchState, {
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    }));
  }
});

// ../node_modules/react-instantsearch-core/dist/es/connectors/connectBreadcrumb.js
var import_prop_types5 = __toESM(require_prop_types());
function _typeof13(obj) {
  "@babel/helpers - typeof";
  return _typeof13 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof13(obj);
}
function _defineProperty11(obj, key, value) {
  key = _toPropertyKey11(key);
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey11(arg) {
  var key = _toPrimitive11(arg, "string");
  return _typeof13(key) === "symbol" ? key : String(key);
}
function _toPrimitive11(input, hint) {
  if (_typeof13(input) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof13(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
var getId5 = function getId6(props) {
  return props.attributes[0];
};
var namespace = "hierarchicalMenu";
function _refine2(props, searchState, nextRefinement, context) {
  var id = getId5(props);
  var nextValue = _defineProperty11({}, id, nextRefinement || "");
  var resetPage = true;
  return refineValue(searchState, nextValue, context, resetPage, namespace);
}
function transformValue(values) {
  return values.reduce(function(acc, item) {
    if (item.isRefined) {
      acc.push({
        label: item.name,
        // If dealing with a nested "items", "value" is equal to the previous value concatenated with the current value
        // If dealing with the first level, "value" is equal to the current value
        value: item.escapedValue
      });
      if (item.data) {
        acc = acc.concat(transformValue(item.data, acc));
      }
    }
    return acc;
  }, []);
}
var connectBreadcrumb_default = createConnector_default({
  displayName: "AlgoliaBreadcrumb",
  $$type: "ais.breadcrumb",
  propTypes: {
    attributes: function attributes(props, propName, componentName) {
      var isNotString = function isNotString2(val) {
        return typeof val !== "string";
      };
      if (!Array.isArray(props[propName]) || props[propName].some(isNotString) || props[propName].length < 1) {
        return new Error("Invalid prop ".concat(propName, " supplied to ").concat(componentName, ". Expected an Array of Strings"));
      }
      return void 0;
    },
    transformItems: import_prop_types5.default.func
  },
  getProvidedProps: function getProvidedProps6(props, searchState, searchResults) {
    var id = getId5(props);
    var results = getResults(searchResults, {
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    });
    var isFacetPresent = Boolean(results) && Boolean(results.getFacetByName(id));
    if (!isFacetPresent) {
      return {
        items: [],
        canRefine: false
      };
    }
    var values = results.getFacetValues(id);
    var items4 = values.data ? transformValue(values.data) : [];
    var transformedItems = props.transformItems ? props.transformItems(items4) : items4;
    return {
      canRefine: transformedItems.length > 0,
      items: transformedItems
    };
  },
  refine: function refine2(props, searchState, nextRefinement) {
    return _refine2(props, searchState, nextRefinement, {
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    });
  }
});

// ../node_modules/react-instantsearch-core/dist/es/connectors/connectCurrentRefinements.js
var import_prop_types6 = __toESM(require_prop_types());
function _typeof14(obj) {
  "@babel/helpers - typeof";
  return _typeof14 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof14(obj);
}
function ownKeys8(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread8(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys8(Object(source), true).forEach(function(key) {
      _defineProperty12(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys8(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty12(obj, key, value) {
  key = _toPropertyKey12(key);
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey12(arg) {
  var key = _toPrimitive12(arg, "string");
  return _typeof14(key) === "symbol" ? key : String(key);
}
function _toPrimitive12(input, hint) {
  if (_typeof14(input) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof14(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
var connectCurrentRefinements_default = createConnector_default({
  displayName: "AlgoliaCurrentRefinements",
  $$type: "ais.currentRefinements",
  propTypes: {
    transformItems: import_prop_types6.default.func
  },
  getProvidedProps: function getProvidedProps7(props, searchState, searchResults, metadata) {
    var items4 = metadata.reduce(function(res, meta) {
      if (typeof meta.items !== "undefined") {
        if (!props.clearsQuery && meta.id === "query") {
          return res;
        } else {
          if (props.clearsQuery && meta.id === "query" && meta.items[0].currentRefinement === "") {
            return res;
          }
          return res.concat(meta.items.map(function(item) {
            return _objectSpread8(_objectSpread8({}, item), {}, {
              id: meta.id,
              index: meta.index
            });
          }));
        }
      }
      return res;
    }, []);
    var transformedItems = props.transformItems ? props.transformItems(items4) : items4;
    return {
      items: transformedItems,
      canRefine: transformedItems.length > 0
    };
  },
  refine: function refine3(props, searchState, items4) {
    var refinementsToClear = items4 instanceof Array ? items4.map(function(item) {
      return item.value;
    }) : [items4];
    return refinementsToClear.reduce(function(res, clear) {
      return clear(res);
    }, searchState);
  }
});

// ../node_modules/react-instantsearch-core/dist/es/connectors/connectGeoSearch.js
function _typeof15(obj) {
  "@babel/helpers - typeof";
  return _typeof15 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof15(obj);
}
var _excluded4 = ["defaultRefinement"];
function _defineProperty13(obj, key, value) {
  key = _toPropertyKey13(key);
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey13(arg) {
  var key = _toPrimitive13(arg, "string");
  return _typeof15(key) === "symbol" ? key : String(key);
}
function _toPrimitive13(input, hint) {
  if (_typeof15(input) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof15(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function _objectWithoutProperties4(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose4(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose4(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var getBoundingBoxId = function getBoundingBoxId2() {
  return "boundingBox";
};
var getAroundLatLngId = function getAroundLatLngId2() {
  return "aroundLatLng";
};
var getConfigureAroundLatLngId = function getConfigureAroundLatLngId2() {
  return "configure.aroundLatLng";
};
var currentRefinementToString = function currentRefinementToString2(currentRefinement) {
  return [currentRefinement.northEast.lat, currentRefinement.northEast.lng, currentRefinement.southWest.lat, currentRefinement.southWest.lng].join();
};
var stringToCurrentRefinement = function stringToCurrentRefinement2(value) {
  var values = value.split(",");
  return {
    northEast: {
      lat: parseFloat(values[0]),
      lng: parseFloat(values[1])
    },
    southWest: {
      lat: parseFloat(values[2]),
      lng: parseFloat(values[3])
    }
  };
};
var latLngRegExp = /^(-?\d+(?:\.\d+)?),\s*(-?\d+(?:\.\d+)?)$/;
var stringToPosition = function stringToPosition2(value) {
  var pattern = value.match(latLngRegExp);
  return {
    lat: parseFloat(pattern[1]),
    lng: parseFloat(pattern[2])
  };
};
var getCurrentRefinement2 = function getCurrentRefinement3(props, searchState, context) {
  var refinement = getCurrentRefinementValue(props, searchState, context, getBoundingBoxId(), {});
  if (!objectHasKeys(refinement)) {
    return;
  }
  return {
    northEast: {
      lat: parseFloat(refinement.northEast.lat),
      lng: parseFloat(refinement.northEast.lng)
    },
    southWest: {
      lat: parseFloat(refinement.southWest.lat),
      lng: parseFloat(refinement.southWest.lng)
    }
  };
};
var getCurrentPosition = function getCurrentPosition2(props, searchState, context) {
  var defaultRefinement = props.defaultRefinement, propsWithoutDefaultRefinement = _objectWithoutProperties4(props, _excluded4);
  var aroundLatLng = getCurrentRefinementValue(propsWithoutDefaultRefinement, searchState, context, getAroundLatLngId());
  if (!aroundLatLng) {
    var configureAroundLatLng = getCurrentRefinementValue(propsWithoutDefaultRefinement, searchState, context, getConfigureAroundLatLngId());
    return configureAroundLatLng && stringToPosition(configureAroundLatLng);
  }
  return aroundLatLng;
};
var _refine3 = function refine4(searchState, nextValue, context) {
  var resetPage = true;
  var nextRefinement = _defineProperty13({}, getBoundingBoxId(), nextValue);
  return refineValue(searchState, nextRefinement, context, resetPage);
};
var connectGeoSearch_default = createConnector_default({
  displayName: "AlgoliaGeoSearch",
  $$type: "ais.geoSearch",
  getProvidedProps: function getProvidedProps8(props, searchState, searchResults) {
    var context = {
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    };
    var results = getResults(searchResults, context);
    var currentRefinementFromSearchState = getCurrentRefinement2(props, searchState, context);
    var currentRefinementFromSearchParameters = results && results._state.insideBoundingBox && stringToCurrentRefinement(results._state.insideBoundingBox) || void 0;
    var currentPositionFromSearchState = getCurrentPosition(props, searchState, context);
    var currentPositionFromSearchParameters = results && results._state.aroundLatLng && stringToPosition(results._state.aroundLatLng) || void 0;
    var currentRefinement = currentRefinementFromSearchState || currentRefinementFromSearchParameters;
    var position = currentPositionFromSearchState || currentPositionFromSearchParameters;
    return {
      hits: !results ? [] : results.hits.filter(function(_) {
        return Boolean(_._geoloc);
      }),
      isRefinedWithMap: Boolean(currentRefinement),
      currentRefinement,
      position
    };
  },
  refine: function refine5(props, searchState, nextValue) {
    return _refine3(searchState, nextValue, {
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    });
  },
  getSearchParameters: function getSearchParameters6(searchParameters, props, searchState) {
    var currentRefinement = getCurrentRefinement2(props, searchState, {
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    });
    if (!currentRefinement) {
      return searchParameters;
    }
    return searchParameters.setQueryParameter("insideBoundingBox", currentRefinementToString(currentRefinement));
  },
  cleanUp: function cleanUp4(props, searchState) {
    return cleanUpValue(searchState, {
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    }, getBoundingBoxId());
  },
  getMetadata: function getMetadata(props, searchState) {
    var items4 = [];
    var id = getBoundingBoxId();
    var context = {
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    };
    var index = getIndexId(context);
    var nextRefinement = {};
    var currentRefinement = getCurrentRefinement2(props, searchState, context);
    if (currentRefinement) {
      items4.push({
        label: "".concat(id, ": ").concat(currentRefinementToString(currentRefinement)),
        value: function value(nextState) {
          return _refine3(nextState, nextRefinement, context);
        },
        currentRefinement
      });
    }
    return {
      id,
      index,
      items: items4
    };
  },
  shouldComponentUpdate: function shouldComponentUpdate() {
    return true;
  }
});

// ../node_modules/react-instantsearch-core/dist/es/connectors/connectHierarchicalMenu.js
var import_prop_types7 = __toESM(require_prop_types());
var import_algoliasearch_helper3 = __toESM(require_algoliasearch_helper2());
function _typeof16(obj) {
  "@babel/helpers - typeof";
  return _typeof16 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof16(obj);
}
function ownKeys9(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread9(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys9(Object(source), true).forEach(function(key) {
      _defineProperty14(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys9(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty14(obj, key, value) {
  key = _toPropertyKey14(key);
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey14(arg) {
  var key = _toPrimitive14(arg, "string");
  return _typeof16(key) === "symbol" ? key : String(key);
}
function _toPrimitive14(input, hint) {
  if (_typeof16(input) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof16(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
var getId7 = function getId8(props) {
  return props.attributes[0];
};
var namespace2 = "hierarchicalMenu";
function getCurrentRefinement4(props, searchState, context) {
  var currentRefinement = getCurrentRefinementValue(props, searchState, context, "".concat(namespace2, ".").concat(getId7(props)), null);
  if (currentRefinement === "") {
    return null;
  }
  return currentRefinement;
}
function getValue(value, props, searchState, context) {
  var id = props.id, attributes3 = props.attributes, separator = props.separator, rootPath = props.rootPath, showParentLevel = props.showParentLevel;
  var currentRefinement = getCurrentRefinement4(props, searchState, context);
  var nextRefinement;
  if (currentRefinement === null) {
    nextRefinement = value;
  } else {
    var tmpSearchParameters = new import_algoliasearch_helper3.default.SearchParameters({
      hierarchicalFacets: [{
        name: id,
        attributes: attributes3,
        separator,
        rootPath,
        showParentLevel
      }]
    });
    nextRefinement = tmpSearchParameters.toggleHierarchicalFacetRefinement(id, currentRefinement).toggleHierarchicalFacetRefinement(id, value).getHierarchicalRefinement(id)[0];
  }
  return nextRefinement;
}
function transformValue2(value, props, searchState, context) {
  return value.map(function(v) {
    return {
      label: v.name,
      value: getValue(v.escapedValue, props, searchState, context),
      count: v.count,
      isRefined: v.isRefined,
      items: v.data && transformValue2(v.data, props, searchState, context)
    };
  });
}
var truncate = function truncate2() {
  var items4 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
  var limit = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 10;
  return items4.slice(0, limit).map(function() {
    var item = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    return Array.isArray(item.items) ? _objectSpread9(_objectSpread9({}, item), {}, {
      items: truncate2(item.items, limit)
    }) : item;
  });
};
function _refine4(props, searchState, nextRefinement, context) {
  var id = getId7(props);
  var nextValue = _defineProperty14({}, id, nextRefinement || "");
  var resetPage = true;
  return refineValue(searchState, nextValue, context, resetPage, namespace2);
}
function _cleanUp2(props, searchState, context) {
  return cleanUpValue(searchState, context, "".concat(namespace2, ".").concat(getId7(props)));
}
var sortBy = ["name:asc"];
var connectHierarchicalMenu_default = createConnector_default({
  displayName: "AlgoliaHierarchicalMenu",
  $$type: "ais.hierarchicalMenu",
  propTypes: {
    attributes: function attributes2(props, propName, componentName) {
      var isNotString = function isNotString2(val) {
        return typeof val !== "string";
      };
      if (!Array.isArray(props[propName]) || props[propName].some(isNotString) || props[propName].length < 1) {
        return new Error("Invalid prop ".concat(propName, " supplied to ").concat(componentName, ". Expected an Array of Strings"));
      }
      return void 0;
    },
    separator: import_prop_types7.default.string,
    rootPath: import_prop_types7.default.string,
    showParentLevel: import_prop_types7.default.bool,
    defaultRefinement: import_prop_types7.default.string,
    showMore: import_prop_types7.default.bool,
    limit: import_prop_types7.default.number,
    showMoreLimit: import_prop_types7.default.number,
    transformItems: import_prop_types7.default.func,
    facetOrdering: import_prop_types7.default.bool
  },
  defaultProps: {
    showMore: false,
    limit: 10,
    showMoreLimit: 20,
    separator: " > ",
    rootPath: null,
    showParentLevel: true,
    facetOrdering: true
  },
  getProvidedProps: function getProvidedProps9(props, searchState, searchResults) {
    var showMore4 = props.showMore, limit = props.limit, showMoreLimit = props.showMoreLimit, facetOrdering = props.facetOrdering;
    var id = getId7(props);
    var results = getResults(searchResults, {
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    });
    var isFacetPresent = Boolean(results) && Boolean(results.getFacetByName(id));
    if (!isFacetPresent) {
      return {
        items: [],
        currentRefinement: getCurrentRefinement4(props, searchState, {
          ais: props.contextValue,
          multiIndexContext: props.indexContextValue
        }),
        canRefine: false
      };
    }
    var itemsLimit = showMore4 ? showMoreLimit : limit;
    var value = results.getFacetValues(id, {
      sortBy,
      facetOrdering
    });
    var items4 = value.data ? transformValue2(value.data, props, searchState, {
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    }) : [];
    var transformedItems = props.transformItems ? props.transformItems(items4) : items4;
    return {
      items: truncate(transformedItems, itemsLimit),
      currentRefinement: getCurrentRefinement4(props, searchState, {
        ais: props.contextValue,
        multiIndexContext: props.indexContextValue
      }),
      canRefine: transformedItems.length > 0
    };
  },
  refine: function refine6(props, searchState, nextRefinement) {
    return _refine4(props, searchState, nextRefinement, {
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    });
  },
  cleanUp: function cleanUp5(props, searchState) {
    return _cleanUp2(props, searchState, {
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    });
  },
  getSearchParameters: function getSearchParameters7(searchParameters, props, searchState) {
    var attributes3 = props.attributes, separator = props.separator, rootPath = props.rootPath, showParentLevel = props.showParentLevel, showMore4 = props.showMore, limit = props.limit, showMoreLimit = props.showMoreLimit, contextValue = props.contextValue;
    var id = getId7(props);
    var itemsLimit = showMore4 ? showMoreLimit : limit;
    searchParameters = searchParameters.addHierarchicalFacet({
      name: id,
      attributes: attributes3,
      separator,
      rootPath,
      showParentLevel
    }).setQueryParameters({
      maxValuesPerFacet: Math.max(searchParameters.maxValuesPerFacet || 0, itemsLimit)
    });
    var currentRefinement = getCurrentRefinement4(props, searchState, {
      ais: contextValue,
      multiIndexContext: props.indexContextValue
    });
    if (currentRefinement !== null) {
      searchParameters = searchParameters.toggleHierarchicalFacetRefinement(id, currentRefinement);
    }
    return searchParameters;
  },
  getMetadata: function getMetadata2(props, searchState) {
    var rootAttribute = props.attributes[0];
    var id = getId7(props);
    var currentRefinement = getCurrentRefinement4(props, searchState, {
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    });
    var items4 = !currentRefinement ? [] : [{
      label: "".concat(rootAttribute, ": ").concat(unescapeFacetValue(currentRefinement)),
      attribute: rootAttribute,
      value: function value(nextState) {
        return _refine4(props, nextState, "", {
          ais: props.contextValue,
          multiIndexContext: props.indexContextValue
        });
      },
      currentRefinement
    }];
    return {
      id,
      index: getIndexId({
        ais: props.contextValue,
        multiIndexContext: props.indexContextValue
      }),
      items: items4
    };
  }
});

// ../node_modules/react-instantsearch-core/dist/es/connectors/connectHighlight.js
var highlight = function highlight2(_ref7) {
  var attribute = _ref7.attribute, hit = _ref7.hit, highlightProperty = _ref7.highlightProperty, _ref$preTag = _ref7.preTag, preTag = _ref$preTag === void 0 ? HIGHLIGHT_TAGS.highlightPreTag : _ref$preTag, _ref$postTag = _ref7.postTag, postTag = _ref$postTag === void 0 ? HIGHLIGHT_TAGS.highlightPostTag : _ref$postTag;
  return parseAlgoliaHit({
    attribute,
    highlightProperty,
    hit,
    preTag,
    postTag
  });
};
var connectHighlight_default = createConnector_default({
  displayName: "AlgoliaHighlighter",
  $$type: "ais.highlighter",
  propTypes: {},
  getProvidedProps: function getProvidedProps10() {
    return {
      highlight
    };
  }
});

// ../node_modules/react-instantsearch-core/dist/es/connectors/connectHits.js
var connectHits_default = createConnector_default({
  displayName: "AlgoliaHits",
  $$type: "ais.hits",
  getProvidedProps: function getProvidedProps11(props, searchState, searchResults) {
    var results = getResults(searchResults, {
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    });
    if (!results) {
      return {
        hits: []
      };
    }
    var hitsWithPositions = addAbsolutePositions(results.hits, results.hitsPerPage, results.page);
    var hitsWithPositionsAndQueryID = addQueryID(hitsWithPositions, results.queryID);
    return {
      hits: hitsWithPositionsAndQueryID
    };
  },
  /*
   * Hits needs to be considered as a widget to trigger a search,
   * even if no other widgets are used.
   *
   * To be considered as a widget you need either:
   * - getSearchParameters
   * - getMetadata
   * - transitionState
   *
   * See: createConnector.tsx
   */
  getSearchParameters: function getSearchParameters8(searchParameters) {
    return searchParameters;
  }
});

// ../node_modules/react-instantsearch-core/dist/es/connectors/connectHitsPerPage.js
var import_prop_types8 = __toESM(require_prop_types());
function _typeof17(obj) {
  "@babel/helpers - typeof";
  return _typeof17 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof17(obj);
}
function ownKeys10(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread10(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys10(Object(source), true).forEach(function(key) {
      _defineProperty15(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys10(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty15(obj, key, value) {
  key = _toPropertyKey15(key);
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey15(arg) {
  var key = _toPrimitive15(arg, "string");
  return _typeof17(key) === "symbol" ? key : String(key);
}
function _toPrimitive15(input, hint) {
  if (_typeof17(input) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof17(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function getId9() {
  return "hitsPerPage";
}
function getCurrentRefinement5(props, searchState, context) {
  var id = getId9();
  var currentRefinement = getCurrentRefinementValue(props, searchState, context, id, null);
  if (typeof currentRefinement === "string") {
    return parseInt(currentRefinement, 10);
  }
  return currentRefinement;
}
var connectHitsPerPage_default = createConnector_default({
  displayName: "AlgoliaHitsPerPage",
  $$type: "ais.hitsPerPage",
  propTypes: {
    defaultRefinement: import_prop_types8.default.number.isRequired,
    items: import_prop_types8.default.arrayOf(import_prop_types8.default.shape({
      label: import_prop_types8.default.string,
      value: import_prop_types8.default.number.isRequired
    })).isRequired,
    transformItems: import_prop_types8.default.func
  },
  getProvidedProps: function getProvidedProps12(props, searchState) {
    var currentRefinement = getCurrentRefinement5(props, searchState, {
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    });
    var items4 = props.items.map(function(item) {
      return item.value === currentRefinement ? _objectSpread10(_objectSpread10({}, item), {}, {
        isRefined: true
      }) : _objectSpread10(_objectSpread10({}, item), {}, {
        isRefined: false
      });
    });
    return {
      items: props.transformItems ? props.transformItems(items4) : items4,
      currentRefinement
    };
  },
  refine: function refine7(props, searchState, nextRefinement) {
    var id = getId9();
    var nextValue = _defineProperty15({}, id, nextRefinement);
    var resetPage = true;
    return refineValue(searchState, nextValue, {
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    }, resetPage);
  },
  cleanUp: function cleanUp6(props, searchState) {
    return cleanUpValue(searchState, {
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    }, getId9());
  },
  getSearchParameters: function getSearchParameters9(searchParameters, props, searchState) {
    return searchParameters.setHitsPerPage(getCurrentRefinement5(props, searchState, {
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    }));
  },
  getMetadata: function getMetadata3() {
    return {
      id: getId9()
    };
  }
});

// ../node_modules/react-instantsearch-core/dist/es/connectors/connectInfiniteHits.js
var import_react_fast_compare3 = __toESM(require_react_fast_compare());
function _typeof18(obj) {
  "@babel/helpers - typeof";
  return _typeof18 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof18(obj);
}
var _excluded5 = ["page"];
function _defineProperty16(obj, key, value) {
  key = _toPropertyKey16(key);
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey16(arg) {
  var key = _toPrimitive16(arg, "string");
  return _typeof18(key) === "symbol" ? key : String(key);
}
function _toPrimitive16(input, hint) {
  if (_typeof18(input) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof18(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function _toConsumableArray4(arr) {
  return _arrayWithoutHoles4(arr) || _iterableToArray4(arr) || _unsupportedIterableToArray4(arr) || _nonIterableSpread4();
}
function _nonIterableSpread4() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray4(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray4(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray4(o, minLen);
}
function _iterableToArray4(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _arrayWithoutHoles4(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray4(arr);
}
function _arrayLikeToArray4(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
function _objectWithoutProperties5(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose5(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose5(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function getId10() {
  return "page";
}
function getCurrentRefinement6(props, searchState, context) {
  var id = getId10();
  var page2 = 1;
  var currentRefinement = getCurrentRefinementValue(props, searchState, context, id, page2);
  if (typeof currentRefinement === "string") {
    return parseInt(currentRefinement, 10);
  }
  return currentRefinement;
}
function getStateWithoutPage(state) {
  var _ref7 = state || {}, page2 = _ref7.page, rest = _objectWithoutProperties5(_ref7, _excluded5);
  return rest;
}
function getInMemoryCache() {
  var cachedHits = void 0;
  var cachedState = void 0;
  return {
    read: function read(_ref23) {
      var state = _ref23.state;
      return (0, import_react_fast_compare3.default)(cachedState, getStateWithoutPage(state)) ? cachedHits : null;
    },
    write: function write(_ref34) {
      var state = _ref34.state, hits = _ref34.hits;
      cachedState = getStateWithoutPage(state);
      cachedHits = hits;
    }
  };
}
function extractHitsFromCachedHits(cachedHits) {
  return Object.keys(cachedHits).map(Number).sort(function(a, b) {
    return a - b;
  }).reduce(function(acc, page2) {
    return acc.concat(cachedHits[page2]);
  }, []);
}
var connectInfiniteHits_default = createConnector_default({
  displayName: "AlgoliaInfiniteHits",
  $$type: "ais.infiniteHits",
  getProvidedProps: function getProvidedProps13(props, searchState, searchResults) {
    var _this = this;
    var results = getResults(searchResults, {
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    });
    if (!results) {
      return {
        hits: [],
        hasPrevious: false,
        hasMore: false,
        refine: function refine19() {
        },
        refinePrevious: function refinePrevious2() {
        },
        refineNext: function refineNext2() {
        }
      };
    }
    var page2 = results.page, hits = results.hits, hitsPerPage = results.hitsPerPage, nbPages = results.nbPages, state = results._state;
    this._cache = props.cache ? props.cache : this._cache || getInMemoryCache();
    var cachedHits = this._cache.read({
      state
    }) || {};
    var hitsWithPositions = addAbsolutePositions(hits, hitsPerPage, page2);
    var hitsWithPositionsAndQueryID = addQueryID(hitsWithPositions, results.queryID);
    cachedHits[page2] = hitsWithPositionsAndQueryID;
    this._cache.write({
      state,
      hits: cachedHits
    });
    var firstReceivedPage = Math.min.apply(Math, _toConsumableArray4(Object.keys(cachedHits).map(Number)));
    var lastReceivedPage = Math.max.apply(Math, _toConsumableArray4(Object.keys(cachedHits).map(Number)));
    var hasPrevious = firstReceivedPage > 0;
    var lastPageIndex = nbPages - 1;
    var hasMore = lastReceivedPage < lastPageIndex;
    var refinePrevious = function refinePrevious2(event) {
      return _this.refine(event, firstReceivedPage - 1);
    };
    var refineNext = function refineNext2(event) {
      return _this.refine(event, lastReceivedPage + 1);
    };
    return {
      hits: extractHitsFromCachedHits(cachedHits),
      hasPrevious,
      hasMore,
      refinePrevious,
      refineNext
    };
  },
  getSearchParameters: function getSearchParameters10(searchParameters, props, searchState) {
    return searchParameters.setQueryParameters({
      page: getCurrentRefinement6(props, searchState, {
        ais: props.contextValue,
        multiIndexContext: props.indexContextValue
      }) - 1
    });
  },
  refine: function refine8(props, searchState, event, index) {
    var id = getId10();
    var nextValue = _defineProperty16({}, id, index + 1);
    var resetPage = false;
    return refineValue(searchState, nextValue, {
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    }, resetPage);
  }
});

// ../node_modules/react-instantsearch-core/dist/es/connectors/connectMenu.js
var import_prop_types9 = __toESM(require_prop_types());
function _typeof19(obj) {
  "@babel/helpers - typeof";
  return _typeof19 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof19(obj);
}
function _defineProperty17(obj, key, value) {
  key = _toPropertyKey17(key);
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey17(arg) {
  var key = _toPrimitive17(arg, "string");
  return _typeof19(key) === "symbol" ? key : String(key);
}
function _toPrimitive17(input, hint) {
  if (_typeof19(input) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof19(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
var namespace3 = "menu";
function getId11(props) {
  return props.attribute;
}
function getCurrentRefinement7(props, searchState, context) {
  var currentRefinement = getCurrentRefinementValue(props, searchState, context, "".concat(namespace3, ".").concat(getId11(props)), null);
  if (currentRefinement === "") {
    return null;
  }
  return currentRefinement;
}
function getValue2(value, props, searchState, context) {
  var currentRefinement = getCurrentRefinement7(props, searchState, context);
  return value === currentRefinement ? "" : value;
}
function getLimit(_ref7) {
  var showMore4 = _ref7.showMore, limit = _ref7.limit, showMoreLimit = _ref7.showMoreLimit;
  return showMore4 ? showMoreLimit : limit;
}
function _refine5(props, searchState, nextRefinement, context) {
  var id = getId11(props);
  var nextValue = _defineProperty17({}, id, nextRefinement ? nextRefinement : "");
  var resetPage = true;
  return refineValue(searchState, nextValue, context, resetPage, namespace3);
}
function _cleanUp3(props, searchState, context) {
  return cleanUpValue(searchState, context, "".concat(namespace3, ".").concat(getId11(props)));
}
var defaultSortBy = ["count:desc", "name:asc"];
var connectMenu_default = createConnector_default({
  displayName: "AlgoliaMenu",
  $$type: "ais.menu",
  propTypes: {
    attribute: import_prop_types9.default.string.isRequired,
    showMore: import_prop_types9.default.bool,
    limit: import_prop_types9.default.number,
    showMoreLimit: import_prop_types9.default.number,
    defaultRefinement: import_prop_types9.default.string,
    transformItems: import_prop_types9.default.func,
    searchable: import_prop_types9.default.bool,
    facetOrdering: import_prop_types9.default.bool
  },
  defaultProps: {
    showMore: false,
    limit: 10,
    showMoreLimit: 20,
    facetOrdering: true
  },
  getProvidedProps: function getProvidedProps14(props, searchState, searchResults, meta, searchForFacetValuesResults) {
    var attribute = props.attribute, searchable = props.searchable, indexContextValue = props.indexContextValue, facetOrdering = props.facetOrdering;
    var results = getResults(searchResults, {
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    });
    var canRefine = Boolean(results) && Boolean(results.getFacetByName(attribute));
    var isFromSearch = Boolean(searchForFacetValuesResults && searchForFacetValuesResults[attribute] && searchForFacetValuesResults.query !== "");
    if (searchable && indexContextValue) {
      throw new Error("react-instantsearch: searching in *List is not available when used inside a multi index context");
    }
    if (!canRefine) {
      return {
        items: [],
        currentRefinement: getCurrentRefinement7(props, searchState, {
          ais: props.contextValue,
          multiIndexContext: props.indexContextValue
        }),
        isFromSearch,
        searchable,
        canRefine
      };
    }
    var items4;
    if (isFromSearch) {
      items4 = searchForFacetValuesResults[attribute].map(function(v) {
        return {
          label: v.value,
          value: getValue2(v.escapedValue, props, searchState, {
            ais: props.contextValue,
            multiIndexContext: props.indexContextValue
          }),
          _highlightResult: {
            label: {
              value: v.highlighted
            }
          },
          count: v.count,
          isRefined: v.isRefined
        };
      });
    } else {
      items4 = results.getFacetValues(attribute, {
        sortBy: searchable ? void 0 : defaultSortBy,
        facetOrdering
      }).map(function(v) {
        return {
          label: v.name,
          value: getValue2(v.escapedValue, props, searchState, {
            ais: props.contextValue,
            multiIndexContext: props.indexContextValue
          }),
          count: v.count,
          isRefined: v.isRefined
        };
      });
    }
    var transformedItems = props.transformItems ? props.transformItems(items4) : items4;
    return {
      items: transformedItems.slice(0, getLimit(props)),
      currentRefinement: getCurrentRefinement7(props, searchState, {
        ais: props.contextValue,
        multiIndexContext: props.indexContextValue
      }),
      isFromSearch,
      searchable,
      canRefine: transformedItems.length > 0
    };
  },
  refine: function refine9(props, searchState, nextRefinement) {
    return _refine5(props, searchState, nextRefinement, {
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    });
  },
  searchForFacetValues: function searchForFacetValues(props, searchState, nextRefinement) {
    return {
      facetName: props.attribute,
      query: nextRefinement,
      maxFacetHits: getLimit(props)
    };
  },
  cleanUp: function cleanUp7(props, searchState) {
    return _cleanUp3(props, searchState, {
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    });
  },
  getSearchParameters: function getSearchParameters11(searchParameters, props, searchState) {
    var attribute = props.attribute;
    searchParameters = searchParameters.setQueryParameters({
      maxValuesPerFacet: Math.max(searchParameters.maxValuesPerFacet || 0, getLimit(props))
    });
    searchParameters = searchParameters.addDisjunctiveFacet(attribute);
    var currentRefinement = getCurrentRefinement7(props, searchState, {
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    });
    if (currentRefinement !== null) {
      searchParameters = searchParameters.addDisjunctiveFacetRefinement(attribute, currentRefinement);
    }
    return searchParameters;
  },
  getMetadata: function getMetadata4(props, searchState) {
    var id = getId11(props);
    var currentRefinement = getCurrentRefinement7(props, searchState, {
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    });
    return {
      id,
      index: getIndexId({
        ais: props.contextValue,
        multiIndexContext: props.indexContextValue
      }),
      items: currentRefinement === null ? [] : [{
        label: "".concat(props.attribute, ": ").concat(unescapeFacetValue(currentRefinement)),
        attribute: props.attribute,
        value: function value(nextState) {
          return _refine5(props, nextState, "", {
            ais: props.contextValue,
            multiIndexContext: props.indexContextValue
          });
        },
        currentRefinement
      }]
    };
  }
});

// ../node_modules/react-instantsearch-core/dist/es/connectors/connectNumericMenu.js
var import_prop_types10 = __toESM(require_prop_types());
function _typeof20(obj) {
  "@babel/helpers - typeof";
  return _typeof20 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof20(obj);
}
function _defineProperty18(obj, key, value) {
  key = _toPropertyKey18(key);
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey18(arg) {
  var key = _toPrimitive18(arg, "string");
  return _typeof20(key) === "symbol" ? key : String(key);
}
function _toPrimitive18(input, hint) {
  if (_typeof20(input) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof20(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray5(arr, i) || _nonIterableRest();
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray5(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray5(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray5(o, minLen);
}
function _arrayLikeToArray5(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
function _iterableToArrayLimit(arr, i) {
  var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];
  if (null != _i) {
    var _s, _e, _x, _r, _arr = [], _n = true, _d = false;
    try {
      if (_x = (_i = _i.call(arr)).next, 0 === i) {
        if (Object(_i) !== _i)
          return;
        _n = false;
      } else
        for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = true)
          ;
    } catch (err) {
      _d = true, _e = err;
    } finally {
      try {
        if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r))
          return;
      } finally {
        if (_d)
          throw _e;
      }
    }
    return _arr;
  }
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr))
    return arr;
}
function stringifyItem(item) {
  if (typeof item.start === "undefined" && typeof item.end === "undefined") {
    return "";
  }
  var start = typeof item.start !== "undefined" ? item.start : "";
  var end = typeof item.end !== "undefined" ? item.end : "";
  return "".concat(start, ":").concat(end);
}
function parseItem(value) {
  if (value.length === 0) {
    return {
      start: null,
      end: null
    };
  }
  var _value$split = value.split(":"), _value$split2 = _slicedToArray(_value$split, 2), startStr = _value$split2[0], endStr = _value$split2[1];
  return {
    start: startStr.length > 0 ? parseFloat(startStr) : null,
    end: endStr.length > 0 ? parseFloat(endStr) : null
  };
}
var namespace4 = "multiRange";
function getId12(props) {
  return props.attribute;
}
function getCurrentRefinement8(props, searchState, context) {
  return getCurrentRefinementValue(props, searchState, context, "".concat(namespace4, ".").concat(getId12(props)), "", function(currentRefinement) {
    if (currentRefinement === "") {
      return "";
    }
    return currentRefinement;
  });
}
function isRefinementsRangeIncludesInsideItemRange(stats2, start, end) {
  return stats2.min >= start && stats2.min <= end || stats2.max >= start && stats2.max <= end;
}
function isItemRangeIncludedInsideRefinementsRange(stats2, start, end) {
  return start >= stats2.min && start <= stats2.max || end >= stats2.min && end <= stats2.max;
}
function itemHasRefinement(attribute, results, value) {
  var stats2 = results.getFacetByName(attribute) ? results.getFacetStats(attribute) : null;
  var range2 = value.split(":");
  var start = Number(range2[0]) === 0 || value === "" ? Number.NEGATIVE_INFINITY : Number(range2[0]);
  var end = Number(range2[1]) === 0 || value === "" ? Number.POSITIVE_INFINITY : Number(range2[1]);
  return !(Boolean(stats2) && (isRefinementsRangeIncludesInsideItemRange(stats2, start, end) || isItemRangeIncludedInsideRefinementsRange(stats2, start, end)));
}
function _refine6(props, searchState, nextRefinement, context) {
  var nextValue = _defineProperty18({}, getId12(props, searchState), nextRefinement);
  var resetPage = true;
  return refineValue(searchState, nextValue, context, resetPage, namespace4);
}
function _cleanUp4(props, searchState, context) {
  return cleanUpValue(searchState, context, "".concat(namespace4, ".").concat(getId12(props)));
}
var connectNumericMenu_default = createConnector_default({
  displayName: "AlgoliaNumericMenu",
  $$type: "ais.numericMenu",
  propTypes: {
    id: import_prop_types10.default.string,
    attribute: import_prop_types10.default.string.isRequired,
    items: import_prop_types10.default.arrayOf(import_prop_types10.default.shape({
      label: import_prop_types10.default.node,
      start: import_prop_types10.default.number,
      end: import_prop_types10.default.number
    })).isRequired,
    transformItems: import_prop_types10.default.func
  },
  getProvidedProps: function getProvidedProps15(props, searchState, searchResults) {
    var attribute = props.attribute;
    var currentRefinement = getCurrentRefinement8(props, searchState, {
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    });
    var results = getResults(searchResults, {
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    });
    var items4 = props.items.map(function(item) {
      var value = stringifyItem(item);
      return {
        label: item.label,
        value,
        isRefined: value === currentRefinement,
        noRefinement: results ? itemHasRefinement(getId12(props), results, value) : false
      };
    });
    var stats2 = results && results.getFacetByName(attribute) ? results.getFacetStats(attribute) : null;
    var refinedItem = find(items4, function(item) {
      return item.isRefined === true;
    });
    if (!items4.some(function(item) {
      return item.value === "";
    })) {
      items4.push({
        value: "",
        isRefined: refinedItem === void 0,
        noRefinement: !stats2,
        label: "All"
      });
    }
    var transformedItems = props.transformItems ? props.transformItems(items4) : items4;
    return {
      items: transformedItems,
      currentRefinement,
      canRefine: transformedItems.length > 0 && transformedItems.some(function(item) {
        return item.noRefinement === false;
      })
    };
  },
  refine: function refine10(props, searchState, nextRefinement) {
    return _refine6(props, searchState, nextRefinement, {
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    });
  },
  cleanUp: function cleanUp8(props, searchState) {
    return _cleanUp4(props, searchState, {
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    });
  },
  getSearchParameters: function getSearchParameters12(searchParameters, props, searchState) {
    var attribute = props.attribute;
    var _parseItem = parseItem(getCurrentRefinement8(props, searchState, {
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    })), start = _parseItem.start, end = _parseItem.end;
    searchParameters = searchParameters.addDisjunctiveFacet(attribute);
    if (typeof start === "number") {
      searchParameters = searchParameters.addNumericRefinement(attribute, ">=", start);
    }
    if (typeof end === "number") {
      searchParameters = searchParameters.addNumericRefinement(attribute, "<=", end);
    }
    return searchParameters;
  },
  getMetadata: function getMetadata5(props, searchState) {
    var id = getId12(props);
    var value = getCurrentRefinement8(props, searchState, {
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    });
    var items4 = [];
    var index = getIndexId({
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    });
    if (value !== "") {
      var _find = find(props.items, function(item) {
        return stringifyItem(item) === value;
      }), label = _find.label;
      items4.push({
        label: "".concat(props.attribute, ": ").concat(label),
        attribute: props.attribute,
        currentRefinement: label,
        value: function value2(nextState) {
          return _refine6(props, nextState, "", {
            ais: props.contextValue,
            multiIndexContext: props.indexContextValue
          });
        }
      });
    }
    return {
      id,
      index,
      items: items4
    };
  }
});

// ../node_modules/react-instantsearch-core/dist/es/connectors/connectPagination.js
function _typeof21(obj) {
  "@babel/helpers - typeof";
  return _typeof21 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof21(obj);
}
function _defineProperty19(obj, key, value) {
  key = _toPropertyKey19(key);
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey19(arg) {
  var key = _toPrimitive19(arg, "string");
  return _typeof21(key) === "symbol" ? key : String(key);
}
function _toPrimitive19(input, hint) {
  if (_typeof21(input) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof21(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function getId13() {
  return "page";
}
function getCurrentRefinement9(props, searchState, context) {
  var id = getId13();
  var page2 = 1;
  var currentRefinement = getCurrentRefinementValue(props, searchState, context, id, page2);
  if (typeof currentRefinement === "string") {
    return parseInt(currentRefinement, 10);
  }
  return currentRefinement;
}
function _refine7(props, searchState, nextPage, context) {
  var id = getId13();
  var nextValue = _defineProperty19({}, id, nextPage);
  var resetPage = false;
  return refineValue(searchState, nextValue, context, resetPage);
}
var connectPagination_default = createConnector_default({
  displayName: "AlgoliaPagination",
  $$type: "ais.pagination",
  getProvidedProps: function getProvidedProps16(props, searchState, searchResults) {
    var results = getResults(searchResults, {
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    });
    if (!results) {
      return null;
    }
    var nbPages = results.nbPages;
    return {
      nbPages,
      currentRefinement: getCurrentRefinement9(props, searchState, {
        ais: props.contextValue,
        multiIndexContext: props.indexContextValue
      }),
      canRefine: nbPages > 1
    };
  },
  refine: function refine11(props, searchState, nextPage) {
    return _refine7(props, searchState, nextPage, {
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    });
  },
  cleanUp: function cleanUp9(props, searchState) {
    return cleanUpValue(searchState, {
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    }, getId13());
  },
  getSearchParameters: function getSearchParameters13(searchParameters, props, searchState) {
    return searchParameters.setPage(getCurrentRefinement9(props, searchState, {
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    }) - 1);
  },
  getMetadata: function getMetadata6() {
    return {
      id: getId13()
    };
  }
});

// ../node_modules/react-instantsearch-core/dist/es/connectors/connectPoweredBy.js
var connectPoweredBy_default = createConnector_default({
  displayName: "AlgoliaPoweredBy",
  $$type: "ais.poweredBy",
  getProvidedProps: function getProvidedProps17() {
    var hostname = typeof window === "undefined" || typeof window.location === "undefined" ? "" : window.location.hostname;
    var url = "https://www.algolia.com/?utm_source=react-instantsearch&utm_medium=website&" + "utm_content=".concat(hostname, "&") + "utm_campaign=poweredby";
    return {
      url
    };
  }
});

// ../node_modules/react-instantsearch-core/dist/es/connectors/connectRange.js
var import_prop_types11 = __toESM(require_prop_types());
function _typeof22(obj) {
  "@babel/helpers - typeof";
  return _typeof22 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof22(obj);
}
function _defineProperty20(obj, key, value) {
  key = _toPropertyKey20(key);
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey20(arg) {
  var key = _toPrimitive20(arg, "string");
  return _typeof22(key) === "symbol" ? key : String(key);
}
function _toPrimitive20(input, hint) {
  if (_typeof22(input) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof22(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function getId14(props) {
  return props.attribute;
}
var namespace5 = "range";
function getCurrentRange(boundaries, stats2, precision) {
  var pow = Math.pow(10, precision);
  var min;
  if (typeof boundaries.min === "number" && isFinite(boundaries.min)) {
    min = boundaries.min;
  } else if (typeof stats2.min === "number" && isFinite(stats2.min)) {
    min = stats2.min;
  } else {
    min = void 0;
  }
  var max;
  if (typeof boundaries.max === "number" && isFinite(boundaries.max)) {
    max = boundaries.max;
  } else if (typeof stats2.max === "number" && isFinite(stats2.max)) {
    max = stats2.max;
  } else {
    max = void 0;
  }
  return {
    min: min !== void 0 ? Math.floor(min * pow) / pow : min,
    max: max !== void 0 ? Math.ceil(max * pow) / pow : max
  };
}
function getCurrentRefinement10(props, searchState, currentRange, context) {
  var _getCurrentRefinement = getCurrentRefinementValue(props, searchState, context, "".concat(namespace5, ".").concat(getId14(props)), {}), min = _getCurrentRefinement.min, max = _getCurrentRefinement.max;
  var isFloatPrecision = Boolean(props.precision);
  var nextMin = min;
  if (typeof nextMin === "string") {
    nextMin = isFloatPrecision ? parseFloat(nextMin) : parseInt(nextMin, 10);
  }
  var nextMax = max;
  if (typeof nextMax === "string") {
    nextMax = isFloatPrecision ? parseFloat(nextMax) : parseInt(nextMax, 10);
  }
  var refinement = {
    min: nextMin,
    max: nextMax
  };
  var hasMinBound = props.min !== void 0;
  var hasMaxBound = props.max !== void 0;
  var hasMinRefinment = refinement.min !== void 0;
  var hasMaxRefinment = refinement.max !== void 0;
  if (hasMinBound && hasMinRefinment && refinement.min < currentRange.min) {
    throw Error("You can't provide min value lower than range.");
  }
  if (hasMaxBound && hasMaxRefinment && refinement.max > currentRange.max) {
    throw Error("You can't provide max value greater than range.");
  }
  if (hasMinBound && !hasMinRefinment) {
    refinement.min = currentRange.min;
  }
  if (hasMaxBound && !hasMaxRefinment) {
    refinement.max = currentRange.max;
  }
  return refinement;
}
function getCurrentRefinementWithRange(refinement, range2) {
  return {
    min: refinement.min !== void 0 ? refinement.min : range2.min,
    max: refinement.max !== void 0 ? refinement.max : range2.max
  };
}
function nextValueForRefinement(hasBound, isReset, range2, value) {
  var next;
  if (!hasBound && range2 === value) {
    next = void 0;
  } else if (hasBound && isReset) {
    next = range2;
  } else {
    next = value;
  }
  return next;
}
function _refine8(props, searchState, nextRefinement, currentRange, context) {
  var nextMin = nextRefinement.min, nextMax = nextRefinement.max;
  var currentMinRange = currentRange.min, currentMaxRange = currentRange.max;
  var isMinReset = nextMin === void 0 || nextMin === "";
  var isMaxReset = nextMax === void 0 || nextMax === "";
  var nextMinAsNumber = !isMinReset ? parseFloat(nextMin) : void 0;
  var nextMaxAsNumber = !isMaxReset ? parseFloat(nextMax) : void 0;
  var isNextMinValid = isMinReset || isFinite(nextMinAsNumber);
  var isNextMaxValid = isMaxReset || isFinite(nextMaxAsNumber);
  if (!isNextMinValid || !isNextMaxValid) {
    throw Error("You can't provide non finite values to the range connector.");
  }
  if (nextMinAsNumber < currentMinRange) {
    throw Error("You can't provide min value lower than range.");
  }
  if (nextMaxAsNumber > currentMaxRange) {
    throw Error("You can't provide max value greater than range.");
  }
  var id = getId14(props);
  var resetPage = true;
  var nextValue = _defineProperty20({}, id, {
    min: nextValueForRefinement(props.min !== void 0, isMinReset, currentMinRange, nextMinAsNumber),
    max: nextValueForRefinement(props.max !== void 0, isMaxReset, currentMaxRange, nextMaxAsNumber)
  });
  return refineValue(searchState, nextValue, context, resetPage, namespace5);
}
function _cleanUp5(props, searchState, context) {
  return cleanUpValue(searchState, context, "".concat(namespace5, ".").concat(getId14(props)));
}
var connectRange_default = createConnector_default({
  displayName: "AlgoliaRange",
  $$type: "ais.range",
  propTypes: {
    id: import_prop_types11.default.string,
    attribute: import_prop_types11.default.string.isRequired,
    defaultRefinement: import_prop_types11.default.shape({
      min: import_prop_types11.default.number,
      max: import_prop_types11.default.number
    }),
    min: import_prop_types11.default.number,
    max: import_prop_types11.default.number,
    precision: import_prop_types11.default.number,
    header: import_prop_types11.default.node,
    footer: import_prop_types11.default.node
  },
  defaultProps: {
    precision: 0
  },
  getProvidedProps: function getProvidedProps18(props, searchState, searchResults) {
    var attribute = props.attribute, precision = props.precision, minBound = props.min, maxBound = props.max;
    var results = getResults(searchResults, {
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    });
    var hasFacet = results && results.getFacetByName(attribute);
    var stats2 = hasFacet ? results.getFacetStats(attribute) || {} : {};
    var facetValues = hasFacet ? results.getFacetValues(attribute) : [];
    var count = facetValues.map(function(v) {
      return {
        value: v.name,
        count: v.count
      };
    });
    var _getCurrentRange = getCurrentRange({
      min: minBound,
      max: maxBound
    }, stats2, precision), rangeMin = _getCurrentRange.min, rangeMax = _getCurrentRange.max;
    this._currentRange = {
      min: rangeMin,
      max: rangeMax
    };
    var currentRefinement = getCurrentRefinement10(props, searchState, this._currentRange, {
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    });
    return {
      min: rangeMin,
      max: rangeMax,
      canRefine: count.length > 0,
      currentRefinement: getCurrentRefinementWithRange(currentRefinement, this._currentRange),
      count,
      precision
    };
  },
  refine: function refine12(props, searchState, nextRefinement) {
    return _refine8(props, searchState, nextRefinement, this._currentRange, {
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    });
  },
  cleanUp: function cleanUp10(props, searchState) {
    return _cleanUp5(props, searchState, {
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    });
  },
  getSearchParameters: function getSearchParameters14(params, props, searchState) {
    var attribute = props.attribute;
    var _getCurrentRefinement2 = getCurrentRefinement10(props, searchState, this._currentRange, {
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    }), min = _getCurrentRefinement2.min, max = _getCurrentRefinement2.max;
    params = params.addDisjunctiveFacet(attribute);
    if (min !== void 0) {
      params = params.addNumericRefinement(attribute, ">=", min);
    }
    if (max !== void 0) {
      params = params.addNumericRefinement(attribute, "<=", max);
    }
    return params;
  },
  getMetadata: function getMetadata7(props, searchState) {
    var _this = this;
    var _this$_currentRange = this._currentRange, minRange = _this$_currentRange.min, maxRange = _this$_currentRange.max;
    var _getCurrentRefinement3 = getCurrentRefinement10(props, searchState, this._currentRange, {
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    }), minValue = _getCurrentRefinement3.min, maxValue = _getCurrentRefinement3.max;
    var items4 = [];
    var hasMin = minValue !== void 0;
    var hasMax = maxValue !== void 0;
    var shouldDisplayMinLabel = hasMin && minValue !== minRange;
    var shouldDisplayMaxLabel = hasMax && maxValue !== maxRange;
    if (shouldDisplayMinLabel || shouldDisplayMaxLabel) {
      var fragments = [hasMin ? "".concat(minValue, " <= ") : "", props.attribute, hasMax ? " <= ".concat(maxValue) : ""];
      items4.push({
        label: fragments.join(""),
        attribute: props.attribute,
        value: function value(nextState) {
          return _refine8(props, nextState, {}, _this._currentRange, {
            ais: props.contextValue,
            multiIndexContext: props.indexContextValue
          });
        },
        currentRefinement: getCurrentRefinementWithRange({
          min: minValue,
          max: maxValue
        }, {
          min: minRange,
          max: maxRange
        })
      });
    }
    return {
      id: getId14(props),
      index: getIndexId({
        ais: props.contextValue,
        multiIndexContext: props.indexContextValue
      }),
      items: items4
    };
  }
});

// ../node_modules/react-instantsearch-core/dist/es/connectors/connectRefinementList.js
var import_prop_types12 = __toESM(require_prop_types());
function _typeof23(obj) {
  "@babel/helpers - typeof";
  return _typeof23 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof23(obj);
}
function _defineProperty21(obj, key, value) {
  key = _toPropertyKey21(key);
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey21(arg) {
  var key = _toPrimitive21(arg, "string");
  return _typeof23(key) === "symbol" ? key : String(key);
}
function _toPrimitive21(input, hint) {
  if (_typeof23(input) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof23(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
var namespace6 = "refinementList";
function getId15(props) {
  return props.attribute;
}
function getCurrentRefinement11(props, searchState, context) {
  var currentRefinement = getCurrentRefinementValue(props, searchState, context, "".concat(namespace6, ".").concat(getId15(props)), []);
  if (typeof currentRefinement !== "string") {
    return currentRefinement;
  }
  if (currentRefinement) {
    return [currentRefinement];
  }
  return [];
}
function getValue3(value, props, searchState, context) {
  var currentRefinement = getCurrentRefinement11(props, searchState, context);
  var isAnewValue = currentRefinement.indexOf(value) === -1;
  var nextRefinement = isAnewValue ? currentRefinement.concat([value]) : currentRefinement.filter(function(selectedValue) {
    return selectedValue !== value;
  });
  return nextRefinement;
}
function getLimit2(_ref7) {
  var showMore4 = _ref7.showMore, limit = _ref7.limit, showMoreLimit = _ref7.showMoreLimit;
  return showMore4 ? showMoreLimit : limit;
}
function _refine9(props, searchState, nextRefinement, context) {
  var id = getId15(props);
  var nextValue = _defineProperty21({}, id, nextRefinement.length > 0 ? nextRefinement : "");
  var resetPage = true;
  return refineValue(searchState, nextValue, context, resetPage, namespace6);
}
function _cleanUp6(props, searchState, context) {
  return cleanUpValue(searchState, context, "".concat(namespace6, ".").concat(getId15(props)));
}
var sortBy2 = ["isRefined", "count:desc", "name:asc"];
var connectRefinementList_default = createConnector_default({
  displayName: "AlgoliaRefinementList",
  $$type: "ais.refinementList",
  propTypes: {
    id: import_prop_types12.default.string,
    attribute: import_prop_types12.default.string.isRequired,
    operator: import_prop_types12.default.oneOf(["and", "or"]),
    showMore: import_prop_types12.default.bool,
    limit: import_prop_types12.default.number,
    showMoreLimit: import_prop_types12.default.number,
    defaultRefinement: import_prop_types12.default.arrayOf(import_prop_types12.default.oneOfType([import_prop_types12.default.string, import_prop_types12.default.number])),
    searchable: import_prop_types12.default.bool,
    transformItems: import_prop_types12.default.func,
    facetOrdering: import_prop_types12.default.bool
  },
  defaultProps: {
    operator: "or",
    showMore: false,
    limit: 10,
    showMoreLimit: 20,
    facetOrdering: true
  },
  getProvidedProps: function getProvidedProps19(props, searchState, searchResults, metadata, searchForFacetValuesResults) {
    var attribute = props.attribute, searchable = props.searchable, indexContextValue = props.indexContextValue, facetOrdering = props.facetOrdering;
    var results = getResults(searchResults, {
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    });
    var canRefine = Boolean(results) && Boolean(results.getFacetByName(attribute));
    var isFromSearch = Boolean(searchForFacetValuesResults && searchForFacetValuesResults[attribute] && searchForFacetValuesResults.query !== "");
    if (searchable && indexContextValue) {
      throw new Error("react-instantsearch: searching in *List is not available when used inside a multi index context");
    }
    if (!canRefine) {
      return {
        items: [],
        currentRefinement: getCurrentRefinement11(props, searchState, {
          ais: props.contextValue,
          multiIndexContext: props.indexContextValue
        }),
        canRefine,
        isFromSearch,
        searchable
      };
    }
    var items4 = isFromSearch ? searchForFacetValuesResults[attribute].map(function(v) {
      return {
        label: v.value,
        value: getValue3(v.escapedValue, props, searchState, {
          ais: props.contextValue,
          multiIndexContext: props.indexContextValue
        }),
        _highlightResult: {
          label: {
            value: v.highlighted
          }
        },
        count: v.count,
        isRefined: v.isRefined
      };
    }) : results.getFacetValues(attribute, {
      sortBy: sortBy2,
      facetOrdering
    }).map(function(v) {
      return {
        label: v.name,
        value: getValue3(v.escapedValue, props, searchState, {
          ais: props.contextValue,
          multiIndexContext: props.indexContextValue
        }),
        count: v.count,
        isRefined: v.isRefined
      };
    });
    var transformedItems = props.transformItems ? props.transformItems(items4) : items4;
    return {
      items: transformedItems.slice(0, getLimit2(props)),
      currentRefinement: getCurrentRefinement11(props, searchState, {
        ais: props.contextValue,
        multiIndexContext: props.indexContextValue
      }),
      isFromSearch,
      searchable,
      canRefine: transformedItems.length > 0
    };
  },
  refine: function refine13(props, searchState, nextRefinement) {
    return _refine9(props, searchState, nextRefinement, {
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    });
  },
  searchForFacetValues: function searchForFacetValues2(props, searchState, nextRefinement) {
    return {
      facetName: props.attribute,
      query: nextRefinement,
      maxFacetHits: getLimit2(props)
    };
  },
  cleanUp: function cleanUp11(props, searchState) {
    return _cleanUp6(props, searchState, {
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    });
  },
  getSearchParameters: function getSearchParameters15(searchParameters, props, searchState) {
    var attribute = props.attribute, operator = props.operator;
    var addKey = operator === "and" ? "addFacet" : "addDisjunctiveFacet";
    var addRefinementKey = "".concat(addKey, "Refinement");
    searchParameters = searchParameters.setQueryParameters({
      maxValuesPerFacet: Math.max(searchParameters.maxValuesPerFacet || 0, getLimit2(props))
    });
    searchParameters = searchParameters[addKey](attribute);
    return getCurrentRefinement11(props, searchState, {
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    }).reduce(function(res, val) {
      return res[addRefinementKey](attribute, val);
    }, searchParameters);
  },
  getMetadata: function getMetadata8(props, searchState) {
    var id = getId15(props);
    var context = {
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    };
    return {
      id,
      index: getIndexId(context),
      items: getCurrentRefinement11(props, searchState, context).length > 0 ? [{
        attribute: props.attribute,
        label: "".concat(props.attribute, ": "),
        currentRefinement: getCurrentRefinement11(props, searchState, context),
        value: function value(nextState) {
          return _refine9(props, nextState, [], context);
        },
        items: getCurrentRefinement11(props, searchState, context).map(function(item) {
          return {
            label: unescapeFacetValue("".concat(item)),
            value: function value(nextState) {
              var nextSelectedItems = getCurrentRefinement11(props, nextState, context).filter(function(other) {
                return other !== item;
              });
              return _refine9(props, searchState, nextSelectedItems, context);
            }
          };
        })
      }] : []
    };
  }
});

// ../node_modules/react-instantsearch-core/dist/es/connectors/connectScrollTo.js
var import_prop_types13 = __toESM(require_prop_types());
var connectScrollTo_default = createConnector_default({
  displayName: "AlgoliaScrollTo",
  $$type: "ais.scrollTo",
  propTypes: {
    scrollOn: import_prop_types13.default.string
  },
  defaultProps: {
    scrollOn: "page"
  },
  getProvidedProps: function getProvidedProps20(props, searchState) {
    var id = props.scrollOn;
    var value = getCurrentRefinementValue(props, searchState, {
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    }, id, null);
    if (!this._prevSearchState) {
      this._prevSearchState = {};
    }
    if (hasMultipleIndices({
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    })) {
      searchState = searchState.indices ? searchState.indices[getIndexId({
        ais: props.contextValue,
        multiIndexContext: props.indexContextValue
      })] : {};
    }
    var cleanedSearchState = omit(searchState, ["configure", id]);
    var hasNotChanged = shallowEqual(this._prevSearchState, cleanedSearchState);
    this._prevSearchState = cleanedSearchState;
    return {
      value,
      hasNotChanged
    };
  }
});

// ../node_modules/react-instantsearch-core/dist/es/connectors/connectSearchBox.js
var import_prop_types14 = __toESM(require_prop_types());
function _typeof24(obj) {
  "@babel/helpers - typeof";
  return _typeof24 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof24(obj);
}
function _defineProperty22(obj, key, value) {
  key = _toPropertyKey22(key);
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey22(arg) {
  var key = _toPrimitive22(arg, "string");
  return _typeof24(key) === "symbol" ? key : String(key);
}
function _toPrimitive22(input, hint) {
  if (_typeof24(input) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof24(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function getId16() {
  return "query";
}
function getCurrentRefinement12(props, searchState, context) {
  var id = getId16(props);
  var currentRefinement = getCurrentRefinementValue(props, searchState, context, id, "");
  if (currentRefinement) {
    return currentRefinement;
  }
  return "";
}
function _refine10(props, searchState, nextRefinement, context) {
  var id = getId16();
  var nextValue = _defineProperty22({}, id, nextRefinement);
  var resetPage = true;
  return refineValue(searchState, nextValue, context, resetPage);
}
function _cleanUp7(props, searchState, context) {
  return cleanUpValue(searchState, context, getId16());
}
var connectSearchBox_default = createConnector_default({
  displayName: "AlgoliaSearchBox",
  $$type: "ais.searchBox",
  propTypes: {
    defaultRefinement: import_prop_types14.default.string
  },
  getProvidedProps: function getProvidedProps21(props, searchState, searchResults) {
    return {
      currentRefinement: getCurrentRefinement12(props, searchState, {
        ais: props.contextValue,
        multiIndexContext: props.indexContextValue
      }),
      isSearchStalled: searchResults.isSearchStalled
    };
  },
  refine: function refine14(props, searchState, nextRefinement) {
    return _refine10(props, searchState, nextRefinement, {
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    });
  },
  cleanUp: function cleanUp12(props, searchState) {
    return _cleanUp7(props, searchState, {
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    });
  },
  getSearchParameters: function getSearchParameters16(searchParameters, props, searchState) {
    return searchParameters.setQuery(getCurrentRefinement12(props, searchState, {
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    }));
  },
  getMetadata: function getMetadata9(props, searchState) {
    var id = getId16(props);
    var currentRefinement = getCurrentRefinement12(props, searchState, {
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    });
    return {
      id,
      index: getIndexId({
        ais: props.contextValue,
        multiIndexContext: props.indexContextValue
      }),
      items: currentRefinement === null ? [] : [{
        label: "".concat(id, ": ").concat(currentRefinement),
        value: function value(nextState) {
          return _refine10(props, nextState, "", {
            ais: props.contextValue,
            multiIndexContext: props.indexContextValue
          });
        },
        currentRefinement
      }]
    };
  }
});

// ../node_modules/react-instantsearch-core/dist/es/connectors/connectRelevantSort.js
function _typeof25(obj) {
  "@babel/helpers - typeof";
  return _typeof25 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof25(obj);
}
function _defineProperty23(obj, key, value) {
  key = _toPropertyKey23(key);
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey23(arg) {
  var key = _toPrimitive23(arg, "string");
  return _typeof25(key) === "symbol" ? key : String(key);
}
function _toPrimitive23(input, hint) {
  if (_typeof25(input) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof25(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function getId17() {
  return "relevancyStrictness";
}
function getCurrentRefinement13(props, searchState, context) {
  var id = getId17();
  var currentRefinement = getCurrentRefinementValue(props, searchState, context, id);
  return currentRefinement;
}
var connectRelevantSort_default = createConnector_default({
  displayName: "AlgoliaRelevantSort",
  $$type: "ais.relevantSort",
  getProvidedProps: function getProvidedProps22(props, _searchState, searchResults) {
    var results = getResults(searchResults, {
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    });
    if (!results) {
      return {
        isVirtualReplica: false,
        isRelevantSorted: false
      };
    }
    return {
      isVirtualReplica: results.appliedRelevancyStrictness !== void 0,
      isRelevantSorted: results.appliedRelevancyStrictness !== void 0 && results.appliedRelevancyStrictness > 0
    };
  },
  getSearchParameters: function getSearchParameters17(searchParameters, props, searchState) {
    return searchParameters.setQueryParameter("relevancyStrictness", getCurrentRefinement13(props, searchState, {
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    }));
  },
  refine: function refine15(props, searchState, nextRefinement) {
    var nextValue = _defineProperty23({}, getId17(), nextRefinement);
    var resetPage = true;
    return refineValue(searchState, nextValue, {
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    }, resetPage);
  }
});

// ../node_modules/react-instantsearch-core/dist/es/connectors/connectSortBy.js
var import_prop_types15 = __toESM(require_prop_types());
function _typeof26(obj) {
  "@babel/helpers - typeof";
  return _typeof26 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof26(obj);
}
function ownKeys11(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread11(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys11(Object(source), true).forEach(function(key) {
      _defineProperty24(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys11(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty24(obj, key, value) {
  key = _toPropertyKey24(key);
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey24(arg) {
  var key = _toPrimitive24(arg, "string");
  return _typeof26(key) === "symbol" ? key : String(key);
}
function _toPrimitive24(input, hint) {
  if (_typeof26(input) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof26(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function getId18() {
  return "sortBy";
}
function getCurrentRefinement14(props, searchState, context) {
  var id = getId18(props);
  var currentRefinement = getCurrentRefinementValue(props, searchState, context, id, null);
  if (currentRefinement) {
    return currentRefinement;
  }
  return null;
}
var connectSortBy_default = createConnector_default({
  displayName: "AlgoliaSortBy",
  $$type: "ais.sortBy",
  propTypes: {
    defaultRefinement: import_prop_types15.default.string,
    items: import_prop_types15.default.arrayOf(import_prop_types15.default.shape({
      label: import_prop_types15.default.string,
      value: import_prop_types15.default.string.isRequired
    })).isRequired,
    transformItems: import_prop_types15.default.func
  },
  getProvidedProps: function getProvidedProps23(props, searchState) {
    var currentRefinement = getCurrentRefinement14(props, searchState, {
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    });
    var items4 = props.items.map(function(item) {
      return item.value === currentRefinement ? _objectSpread11(_objectSpread11({}, item), {}, {
        isRefined: true
      }) : _objectSpread11(_objectSpread11({}, item), {}, {
        isRefined: false
      });
    });
    return {
      items: props.transformItems ? props.transformItems(items4) : items4,
      currentRefinement
    };
  },
  refine: function refine16(props, searchState, nextRefinement) {
    var id = getId18();
    var nextValue = _defineProperty24({}, id, nextRefinement);
    var resetPage = true;
    return refineValue(searchState, nextValue, {
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    }, resetPage);
  },
  cleanUp: function cleanUp13(props, searchState) {
    return cleanUpValue(searchState, {
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    }, getId18());
  },
  getSearchParameters: function getSearchParameters18(searchParameters, props, searchState) {
    var selectedIndex = getCurrentRefinement14(props, searchState, {
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    });
    return searchParameters.setIndex(selectedIndex);
  },
  getMetadata: function getMetadata10() {
    return {
      id: getId18()
    };
  }
});

// ../node_modules/react-instantsearch-core/dist/es/connectors/connectStateResults.js
var connectStateResults_default = createConnector_default({
  displayName: "AlgoliaStateResults",
  $$type: "ais.stateResults",
  getProvidedProps: function getProvidedProps24(props, searchState, searchResults) {
    var results = getResults(searchResults, {
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    });
    return {
      searchState,
      searchResults: results,
      allSearchResults: searchResults.results,
      searching: searchResults.searching,
      isSearchStalled: searchResults.isSearchStalled,
      error: searchResults.error,
      searchingForFacetValues: searchResults.searchingForFacetValues,
      props
    };
  }
});

// ../node_modules/react-instantsearch-core/dist/es/connectors/connectStats.js
var connectStats_default = createConnector_default({
  displayName: "AlgoliaStats",
  $$type: "ais.stats",
  getProvidedProps: function getProvidedProps25(props, _searchState, searchResults) {
    var results = getResults(searchResults, {
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    });
    if (!results) {
      return null;
    }
    return {
      areHitsSorted: results.appliedRelevancyStrictness !== void 0 && results.appliedRelevancyStrictness > 0 && results.nbHits !== results.nbSortedHits,
      nbHits: results.nbHits,
      nbSortedHits: results.nbSortedHits,
      processingTimeMS: results.processingTimeMS
    };
  }
});

// ../node_modules/react-instantsearch-core/dist/es/connectors/connectToggleRefinement.js
var import_prop_types16 = __toESM(require_prop_types());
function _typeof27(obj) {
  "@babel/helpers - typeof";
  return _typeof27 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof27(obj);
}
function _defineProperty25(obj, key, value) {
  key = _toPropertyKey25(key);
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey25(arg) {
  var key = _toPrimitive25(arg, "string");
  return _typeof27(key) === "symbol" ? key : String(key);
}
function _toPrimitive25(input, hint) {
  if (_typeof27(input) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof27(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function getId19(props) {
  return props.attribute;
}
var namespace7 = "toggle";
var falsyStrings = ["0", "false", "null", "undefined"];
function getCurrentRefinement15(props, searchState, context) {
  var currentRefinement = getCurrentRefinementValue(props, searchState, context, "".concat(namespace7, ".").concat(getId19(props)), false);
  if (falsyStrings.indexOf(currentRefinement) !== -1) {
    return false;
  }
  return Boolean(currentRefinement);
}
function _refine11(props, searchState, nextRefinement, context) {
  var id = getId19(props);
  var nextValue = _defineProperty25({}, id, nextRefinement ? nextRefinement : false);
  var resetPage = true;
  return refineValue(searchState, nextValue, context, resetPage, namespace7);
}
function _cleanUp8(props, searchState, context) {
  return cleanUpValue(searchState, context, "".concat(namespace7, ".").concat(getId19(props)));
}
var connectToggleRefinement_default = createConnector_default({
  displayName: "AlgoliaToggle",
  $$type: "ais.toggle",
  propTypes: {
    label: import_prop_types16.default.string.isRequired,
    attribute: import_prop_types16.default.string.isRequired,
    value: import_prop_types16.default.any.isRequired,
    filter: import_prop_types16.default.func,
    defaultRefinement: import_prop_types16.default.bool
  },
  getProvidedProps: function getProvidedProps26(props, searchState, searchResults) {
    var attribute = props.attribute, value = props.value;
    var results = getResults(searchResults, {
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    });
    var currentRefinement = getCurrentRefinement15(props, searchState, {
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    });
    var allFacetValues = results && results.getFacetByName(attribute) ? results.getFacetValues(attribute) : null;
    var facetValue = (
      // Use null to always be consistent with type of the value
      // count: number | null
      allFacetValues && allFacetValues.length ? find(allFacetValues, function(item) {
        return item.name === value.toString();
      }) : null
    );
    var facetValueCount = facetValue && facetValue.count;
    var allFacetValuesCount = (
      // Use null to always be consistent with type of the value
      // count: number | null
      allFacetValues && allFacetValues.length ? allFacetValues.reduce(function(acc, item) {
        return acc + item.count;
      }, 0) : null
    );
    var canRefine = currentRefinement ? allFacetValuesCount !== null && allFacetValuesCount > 0 : facetValueCount !== null && facetValueCount > 0;
    var count = {
      checked: allFacetValuesCount,
      unchecked: facetValueCount
    };
    return {
      currentRefinement,
      canRefine,
      count
    };
  },
  refine: function refine17(props, searchState, nextRefinement) {
    return _refine11(props, searchState, nextRefinement, {
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    });
  },
  cleanUp: function cleanUp14(props, searchState) {
    return _cleanUp8(props, searchState, {
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    });
  },
  getSearchParameters: function getSearchParameters19(searchParameters, props, searchState) {
    var attribute = props.attribute, value = props.value, filter = props.filter;
    var checked = getCurrentRefinement15(props, searchState, {
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    });
    var nextSearchParameters = searchParameters.addDisjunctiveFacet(attribute);
    if (checked) {
      nextSearchParameters = nextSearchParameters.addDisjunctiveFacetRefinement(attribute, value);
      if (filter) {
        nextSearchParameters = filter(nextSearchParameters);
      }
    }
    return nextSearchParameters;
  },
  getMetadata: function getMetadata11(props, searchState) {
    var id = getId19(props);
    var checked = getCurrentRefinement15(props, searchState, {
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    });
    var items4 = [];
    var index = getIndexId({
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    });
    if (checked) {
      items4.push({
        label: props.label,
        currentRefinement: checked,
        attribute: props.attribute,
        value: function value(nextState) {
          return _refine11(props, nextState, false, {
            ais: props.contextValue,
            multiIndexContext: props.indexContextValue
          });
        }
      });
    }
    return {
      id,
      index,
      items: items4
    };
  }
});

// ../node_modules/react-instantsearch-core/dist/es/connectors/connectHitInsights.js
function _typeof28(obj) {
  "@babel/helpers - typeof";
  return _typeof28 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof28(obj);
}
function ownKeys12(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread12(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys12(Object(source), true).forEach(function(key) {
      _defineProperty26(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys12(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty26(obj, key, value) {
  key = _toPropertyKey26(key);
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey26(arg) {
  var key = _toPrimitive26(arg, "string");
  return _typeof28(key) === "symbol" ? key : String(key);
}
function _toPrimitive26(input, hint) {
  if (_typeof28(input) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof28(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function inferPayload(_ref7) {
  var method = _ref7.method, results = _ref7.results, currentHit = _ref7.currentHit;
  var index = results.index;
  var queryID = currentHit.__queryID;
  var objectIDs = [currentHit.objectID];
  if (!queryID) {
    throw new Error("Could not infer `queryID`. Ensure `clickAnalytics: true` was added with the Configure widget.\nSee: https://alg.li/VpPpLt");
  }
  switch (method) {
    case "clickedObjectIDsAfterSearch": {
      var positions = [currentHit.__position];
      return {
        index,
        queryID,
        objectIDs,
        positions
      };
    }
    case "convertedObjectIDsAfterSearch":
      return {
        index,
        queryID,
        objectIDs
      };
    default:
      throw new Error('Unsupported method "'.concat(method, '" passed to the insights function. The supported methods are: "clickedObjectIDsAfterSearch", "convertedObjectIDsAfterSearch".'));
  }
}
var wrapInsightsClient = function wrapInsightsClient2(aa, results, currentHit) {
  return function(method, payload) {
    if (typeof aa !== "function") {
      throw new TypeError("Expected insightsClient to be a Function");
    }
    var inferredPayload = inferPayload({
      method,
      results,
      currentHit
    });
    aa(method, _objectSpread12(_objectSpread12({}, inferredPayload), payload));
  };
};
var connectHitInsights_default = function(insightsClient) {
  return createConnector_default({
    displayName: "AlgoliaInsights",
    $$type: "ais.insights",
    getProvidedProps: function getProvidedProps28(props, _, searchResults) {
      var results = getResults(searchResults, {
        ais: props.contextValue,
        multiIndexContext: props.indexContextValue
      });
      var insights = wrapInsightsClient(insightsClient, results, props.hit);
      return {
        insights
      };
    }
  });
};

// ../node_modules/react-instantsearch-core/dist/es/connectors/connectVoiceSearch.js
var import_prop_types17 = __toESM(require_prop_types());
function _typeof29(obj) {
  "@babel/helpers - typeof";
  return _typeof29 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof29(obj);
}
function ownKeys13(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread13(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys13(Object(source), true).forEach(function(key) {
      _defineProperty27(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys13(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty27(obj, key, value) {
  key = _toPropertyKey27(key);
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey27(arg) {
  var key = _toPrimitive27(arg, "string");
  return _typeof29(key) === "symbol" ? key : String(key);
}
function _toPrimitive27(input, hint) {
  if (_typeof29(input) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof29(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function getId20() {
  return "query";
}
function getAdditionalId() {
  return "additionalVoiceParameters";
}
function getCurrentRefinementQuery(props, searchState, context) {
  var id = getId20();
  var currentRefinement = getCurrentRefinementValue(props, searchState, context, id, "");
  if (currentRefinement) {
    return currentRefinement;
  }
  return "";
}
function getCurrentRefinementAdditional(props, searchState, context) {
  var id = getAdditionalId();
  var currentRefinement = getCurrentRefinementValue(props, searchState, context, id, "");
  if (currentRefinement) {
    return currentRefinement;
  }
  return {};
}
function _refine12(props, searchState, nextRefinement, context) {
  var _nextValue;
  var id = getId20();
  var voiceParams = getAdditionalId();
  var queryLanguages = props.language ? {
    queryLanguages: [props.language.split("-")[0]]
  } : {};
  var additionalQueryParameters = typeof props.additionalQueryParameters === "function" ? _objectSpread13({
    ignorePlurals: true,
    removeStopWords: true,
    optionalWords: nextRefinement
  }, props.additionalQueryParameters({
    query: nextRefinement
  })) : {};
  var nextValue = (_nextValue = {}, _defineProperty27(_nextValue, id, nextRefinement), _defineProperty27(_nextValue, voiceParams, _objectSpread13(_objectSpread13({}, queryLanguages), additionalQueryParameters)), _nextValue);
  var resetPage = true;
  return refineValue(searchState, nextValue, context, resetPage);
}
function _cleanUp9(props, searchState, context) {
  var interimState = cleanUpValue(searchState, context, getId20());
  return cleanUpValue(interimState, context, getAdditionalId());
}
var connectVoiceSearch_default = createConnector_default({
  displayName: "AlgoliaVoiceSearch",
  $$type: "ais.voiceSearch",
  propTypes: {
    defaultRefinement: import_prop_types17.default.string
  },
  getProvidedProps: function getProvidedProps27(props, searchState, searchResults) {
    return {
      currentRefinement: getCurrentRefinementQuery(props, searchState, {
        ais: props.contextValue,
        multiIndexContext: props.indexContextValue
      }),
      isSearchStalled: searchResults.isSearchStalled
    };
  },
  refine: function refine18(props, searchState, nextRefinement) {
    return _refine12(props, searchState, nextRefinement, {
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    });
  },
  cleanUp: function cleanUp15(props, searchState) {
    return _cleanUp9(props, searchState, {
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    });
  },
  getSearchParameters: function getSearchParameters20(searchParameters, props, searchState) {
    var query = getCurrentRefinementQuery(props, searchState, {
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    });
    var additionalParams = getCurrentRefinementAdditional(props, searchState, {
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    });
    return searchParameters.setQuery(query).setQueryParameters(additionalParams);
  },
  getMetadata: function getMetadata12(props, searchState) {
    var id = getId20();
    var currentRefinement = getCurrentRefinementQuery(props, searchState, {
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    });
    return {
      id,
      index: getIndexId({
        ais: props.contextValue,
        multiIndexContext: props.indexContextValue
      }),
      items: currentRefinement === null ? [] : [{
        label: "".concat(id, ": ").concat(currentRefinement),
        value: function value(nextState) {
          return _refine12(props, nextState, "", {
            ais: props.contextValue,
            multiIndexContext: props.indexContextValue
          });
        },
        currentRefinement
      }]
    };
  }
});

// ../node_modules/react-instantsearch-core/dist/es/index.js
var EXPERIMENTAL_connectDynamicWidgets = connectDynamicWidgets_default;

// ../node_modules/react-instantsearch-dom/dist/es/widgets/Breadcrumb.js
var import_react12 = __toESM(require_react());

// ../node_modules/react-instantsearch-dom/dist/es/components/PanelCallbackHandler.js
var import_react9 = __toESM(require_react());
var import_prop_types19 = __toESM(require_prop_types());

// ../node_modules/react-instantsearch-dom/dist/es/components/Panel.js
var import_react8 = __toESM(require_react());
var import_prop_types18 = __toESM(require_prop_types());
var import_classnames2 = __toESM(require_classnames());

// ../node_modules/react-instantsearch-dom/dist/es/core/utils.js
var import_classnames = __toESM(require_classnames());
function _toConsumableArray5(arr) {
  return _arrayWithoutHoles5(arr) || _iterableToArray5(arr) || _unsupportedIterableToArray6(arr) || _nonIterableSpread5();
}
function _nonIterableSpread5() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray6(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray6(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray6(o, minLen);
}
function _iterableToArray5(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _arrayWithoutHoles5(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray6(arr);
}
function _arrayLikeToArray6(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
var createClassNames = function createClassNames2(block) {
  var prefix = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "ais";
  return function() {
    for (var _len = arguments.length, elements = new Array(_len), _key = 0; _key < _len; _key++) {
      elements[_key] = arguments[_key];
    }
    var suitElements = elements.filter(function(element) {
      return element || element === "";
    }).map(function(element) {
      var baseClassName = "".concat(prefix, "-").concat(block);
      return element ? "".concat(baseClassName, "-").concat(element) : baseClassName;
    });
    return (0, import_classnames.default)(suitElements);
  };
};
var isSpecialClick = function isSpecialClick2(event) {
  var isMiddleClick = event.button === 1;
  return Boolean(isMiddleClick || event.altKey || event.ctrlKey || event.metaKey || event.shiftKey);
};
var capitalize = function capitalize2(key) {
  return key.length === 0 ? "" : "".concat(key[0].toUpperCase()).concat(key.slice(1));
};
function range(_ref7) {
  var _ref$start = _ref7.start, start = _ref$start === void 0 ? 0 : _ref$start, end = _ref7.end, _ref$step = _ref7.step, step = _ref$step === void 0 ? 1 : _ref$step;
  var limitStep = step === 0 ? 1 : step;
  var arrayLength = Math.round((end - start) / limitStep);
  return _toConsumableArray5(Array(arrayLength)).map(function(_, current) {
    return (start + current) * limitStep;
  });
}
function find2(array, comparator) {
  if (!Array.isArray(array)) {
    return void 0;
  }
  for (var i = 0; i < array.length; i++) {
    if (comparator(array[i])) {
      return array[i];
    }
  }
  return void 0;
}

// ../node_modules/react-instantsearch-dom/dist/es/components/Panel.js
function _typeof30(obj) {
  "@babel/helpers - typeof";
  return _typeof30 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof30(obj);
}
function _classCallCheck5(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties5(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey28(descriptor.key), descriptor);
  }
}
function _createClass5(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties5(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties5(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", { writable: false });
  return Constructor;
}
function _inherits5(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  Object.defineProperty(subClass, "prototype", { writable: false });
  if (superClass)
    _setPrototypeOf5(subClass, superClass);
}
function _setPrototypeOf5(o, p) {
  _setPrototypeOf5 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf28(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf5(o, p);
}
function _createSuper5(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct5();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf5(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf5(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn5(this, result);
  };
}
function _possibleConstructorReturn5(self, call) {
  if (call && (_typeof30(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized5(self);
}
function _assertThisInitialized5(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct5() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf5(o) {
  _getPrototypeOf5 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf28(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf5(o);
}
function _defineProperty28(obj, key, value) {
  key = _toPropertyKey28(key);
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey28(arg) {
  var key = _toPrimitive28(arg, "string");
  return _typeof30(key) === "symbol" ? key : String(key);
}
function _toPrimitive28(input, hint) {
  if (_typeof30(input) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof30(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
var cx2 = createClassNames("Panel");
var _createContext2 = (0, import_react8.createContext)(function setCanRefine() {
});
var PanelConsumer = _createContext2.Consumer;
var PanelProvider = _createContext2.Provider;
var Panel = function(_Component) {
  _inherits5(Panel2, _Component);
  var _super = _createSuper5(Panel2);
  function Panel2() {
    var _this;
    _classCallCheck5(this, Panel2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty28(_assertThisInitialized5(_this), "state", {
      canRefine: true
    });
    _defineProperty28(_assertThisInitialized5(_this), "setCanRefine", function(nextCanRefine) {
      _this.setState({
        canRefine: nextCanRefine
      });
    });
    return _this;
  }
  _createClass5(Panel2, [{
    key: "render",
    value: function render() {
      var _this$props = this.props, children = _this$props.children, className = _this$props.className, header = _this$props.header, footer = _this$props.footer;
      var canRefine = this.state.canRefine;
      return import_react8.default.createElement("div", {
        className: (0, import_classnames2.default)(cx2("", !canRefine && "-noRefinement"), className)
      }, header && import_react8.default.createElement("div", {
        className: cx2("header")
      }, header), import_react8.default.createElement("div", {
        className: cx2("body")
      }, import_react8.default.createElement(PanelProvider, {
        value: this.setCanRefine
      }, children)), footer && import_react8.default.createElement("div", {
        className: cx2("footer")
      }, footer));
    }
  }]);
  return Panel2;
}(import_react8.Component);
_defineProperty28(Panel, "propTypes", {
  children: import_prop_types18.default.node.isRequired,
  className: import_prop_types18.default.string,
  header: import_prop_types18.default.node,
  footer: import_prop_types18.default.node
});
_defineProperty28(Panel, "defaultProps", {
  className: "",
  header: null,
  footer: null
});
var Panel_default = Panel;

// ../node_modules/react-instantsearch-dom/dist/es/components/PanelCallbackHandler.js
function _typeof31(obj) {
  "@babel/helpers - typeof";
  return _typeof31 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof31(obj);
}
function _classCallCheck6(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties6(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey29(descriptor.key), descriptor);
  }
}
function _createClass6(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties6(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties6(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", { writable: false });
  return Constructor;
}
function _inherits6(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  Object.defineProperty(subClass, "prototype", { writable: false });
  if (superClass)
    _setPrototypeOf6(subClass, superClass);
}
function _setPrototypeOf6(o, p) {
  _setPrototypeOf6 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf28(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf6(o, p);
}
function _createSuper6(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct6();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf6(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf6(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn6(this, result);
  };
}
function _possibleConstructorReturn6(self, call) {
  if (call && (_typeof31(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized6(self);
}
function _assertThisInitialized6(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct6() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf6(o) {
  _getPrototypeOf6 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf28(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf6(o);
}
function _defineProperty29(obj, key, value) {
  key = _toPropertyKey29(key);
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey29(arg) {
  var key = _toPrimitive29(arg, "string");
  return _typeof31(key) === "symbol" ? key : String(key);
}
function _toPrimitive29(input, hint) {
  if (_typeof31(input) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof31(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
var PanelCallbackHandler = function(_Component) {
  _inherits6(PanelCallbackHandler2, _Component);
  var _super = _createSuper6(PanelCallbackHandler2);
  function PanelCallbackHandler2() {
    _classCallCheck6(this, PanelCallbackHandler2);
    return _super.apply(this, arguments);
  }
  _createClass6(PanelCallbackHandler2, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.props.setCanRefine(this.props.canRefine);
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (prevProps.canRefine !== this.props.canRefine) {
        this.props.setCanRefine(this.props.canRefine);
      }
    }
  }, {
    key: "render",
    value: function render() {
      return this.props.children;
    }
  }]);
  return PanelCallbackHandler2;
}(import_react9.Component);
_defineProperty29(PanelCallbackHandler, "propTypes", {
  children: import_prop_types19.default.node.isRequired,
  canRefine: import_prop_types19.default.bool.isRequired,
  setCanRefine: import_prop_types19.default.func.isRequired
});
var PanelWrapper = function PanelWrapper2(_ref7) {
  var canRefine = _ref7.canRefine, children = _ref7.children;
  return import_react9.default.createElement(PanelConsumer, null, function(setCanRefine2) {
    return import_react9.default.createElement(PanelCallbackHandler, {
      setCanRefine: setCanRefine2,
      canRefine
    }, children);
  });
};
PanelWrapper.propTypes = {
  canRefine: import_prop_types19.default.bool.isRequired,
  children: import_prop_types19.default.node.isRequired
};
var PanelCallbackHandler_default = PanelWrapper;

// ../node_modules/react-instantsearch-dom/dist/es/components/Breadcrumb.js
var import_react11 = __toESM(require_react());
var import_prop_types21 = __toESM(require_prop_types());
var import_classnames3 = __toESM(require_classnames());

// ../node_modules/react-instantsearch-dom/dist/es/components/Link.js
var import_react10 = __toESM(require_react());
var import_prop_types20 = __toESM(require_prop_types());
function _typeof32(obj) {
  "@babel/helpers - typeof";
  return _typeof32 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof32(obj);
}
function _extends4() {
  _extends4 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends4.apply(this, arguments);
}
function _classCallCheck7(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties7(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey30(descriptor.key), descriptor);
  }
}
function _createClass7(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties7(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties7(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", { writable: false });
  return Constructor;
}
function _inherits7(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  Object.defineProperty(subClass, "prototype", { writable: false });
  if (superClass)
    _setPrototypeOf7(subClass, superClass);
}
function _setPrototypeOf7(o, p) {
  _setPrototypeOf7 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf28(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf7(o, p);
}
function _createSuper7(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct7();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf7(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf7(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn7(this, result);
  };
}
function _possibleConstructorReturn7(self, call) {
  if (call && (_typeof32(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized7(self);
}
function _assertThisInitialized7(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct7() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf7(o) {
  _getPrototypeOf7 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf28(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf7(o);
}
function _defineProperty30(obj, key, value) {
  key = _toPropertyKey30(key);
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey30(arg) {
  var key = _toPrimitive30(arg, "string");
  return _typeof32(key) === "symbol" ? key : String(key);
}
function _toPrimitive30(input, hint) {
  if (_typeof32(input) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof32(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
var Link = function(_Component) {
  _inherits7(Link2, _Component);
  var _super = _createSuper7(Link2);
  function Link2() {
    var _this;
    _classCallCheck7(this, Link2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty30(_assertThisInitialized7(_this), "onClick", function(e) {
      if (isSpecialClick(e)) {
        return;
      }
      _this.props.onClick();
      e.preventDefault();
    });
    return _this;
  }
  _createClass7(Link2, [{
    key: "render",
    value: function render() {
      return import_react10.default.createElement("a", _extends4({}, this.props, {
        onClick: this.onClick
      }));
    }
  }]);
  return Link2;
}(import_react10.Component);
_defineProperty30(Link, "propTypes", {
  onClick: import_prop_types20.default.func.isRequired
});

// ../node_modules/react-instantsearch-dom/dist/es/components/Breadcrumb.js
function _typeof33(obj) {
  "@babel/helpers - typeof";
  return _typeof33 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof33(obj);
}
function _classCallCheck8(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties8(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey31(descriptor.key), descriptor);
  }
}
function _createClass8(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties8(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties8(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", { writable: false });
  return Constructor;
}
function _inherits8(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  Object.defineProperty(subClass, "prototype", { writable: false });
  if (superClass)
    _setPrototypeOf8(subClass, superClass);
}
function _setPrototypeOf8(o, p) {
  _setPrototypeOf8 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf28(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf8(o, p);
}
function _createSuper8(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct8();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf8(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf8(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn8(this, result);
  };
}
function _possibleConstructorReturn8(self, call) {
  if (call && (_typeof33(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized8(self);
}
function _assertThisInitialized8(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct8() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf8(o) {
  _getPrototypeOf8 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf28(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf8(o);
}
function _defineProperty31(obj, key, value) {
  key = _toPropertyKey31(key);
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey31(arg) {
  var key = _toPrimitive31(arg, "string");
  return _typeof33(key) === "symbol" ? key : String(key);
}
function _toPrimitive31(input, hint) {
  if (_typeof33(input) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof33(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
var cx3 = createClassNames("Breadcrumb");
var itemsPropType = import_prop_types21.default.arrayOf(import_prop_types21.default.shape({
  label: import_prop_types21.default.string.isRequired,
  value: import_prop_types21.default.string.isRequired
}));
var Breadcrumb = function(_Component) {
  _inherits8(Breadcrumb2, _Component);
  var _super = _createSuper8(Breadcrumb2);
  function Breadcrumb2() {
    _classCallCheck8(this, Breadcrumb2);
    return _super.apply(this, arguments);
  }
  _createClass8(Breadcrumb2, [{
    key: "render",
    value: function render() {
      var _this$props = this.props, canRefine = _this$props.canRefine, createURL = _this$props.createURL, items4 = _this$props.items, refine19 = _this$props.refine, rootURL = _this$props.rootURL, separator = _this$props.separator, translate = _this$props.translate, className = _this$props.className;
      var rootPath = canRefine ? import_react11.default.createElement("li", {
        className: cx3("item")
      }, import_react11.default.createElement(Link, {
        className: cx3("link"),
        onClick: function onClick() {
          return !rootURL ? refine19() : null;
        },
        href: rootURL ? rootURL : createURL()
      }, translate("rootLabel"))) : null;
      var breadcrumb = items4.map(function(item, idx) {
        var isLast = idx === items4.length - 1;
        return import_react11.default.createElement("li", {
          className: cx3("item", isLast && "item--selected"),
          key: idx
        }, import_react11.default.createElement("span", {
          className: cx3("separator")
        }, separator), !isLast ? import_react11.default.createElement(Link, {
          className: cx3("link"),
          onClick: function onClick() {
            return refine19(item.value);
          },
          href: createURL(item.value)
        }, item.label) : item.label);
      });
      return import_react11.default.createElement("div", {
        className: (0, import_classnames3.default)(cx3("", !canRefine && "-noRefinement"), className)
      }, import_react11.default.createElement("ul", {
        className: cx3("list")
      }, rootPath, breadcrumb));
    }
  }]);
  return Breadcrumb2;
}(import_react11.Component);
_defineProperty31(Breadcrumb, "propTypes", {
  canRefine: import_prop_types21.default.bool.isRequired,
  createURL: import_prop_types21.default.func.isRequired,
  items: itemsPropType,
  refine: import_prop_types21.default.func.isRequired,
  rootURL: import_prop_types21.default.string,
  separator: import_prop_types21.default.node,
  translate: import_prop_types21.default.func.isRequired,
  className: import_prop_types21.default.string
});
_defineProperty31(Breadcrumb, "defaultProps", {
  rootURL: null,
  separator: " > ",
  className: ""
});
var Breadcrumb_default = translatable({
  rootLabel: "Home"
})(Breadcrumb);

// ../node_modules/react-instantsearch-dom/dist/es/widgets/Breadcrumb.js
var BreadcrumbWidget = function BreadcrumbWidget2(props) {
  return import_react12.default.createElement(PanelCallbackHandler_default, props, import_react12.default.createElement(Breadcrumb_default, props));
};
var Breadcrumb_default2 = connectBreadcrumb_default(BreadcrumbWidget, {
  $$widgetType: "ais.breadcrumb"
});

// ../node_modules/react-instantsearch-dom/dist/es/widgets/ClearRefinements.js
var import_react14 = __toESM(require_react());

// ../node_modules/react-instantsearch-dom/dist/es/components/ClearRefinements.js
var import_prop_types22 = __toESM(require_prop_types());
var import_react13 = __toESM(require_react());
var import_classnames4 = __toESM(require_classnames());
function _typeof34(obj) {
  "@babel/helpers - typeof";
  return _typeof34 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof34(obj);
}
function _classCallCheck9(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties9(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey32(descriptor.key), descriptor);
  }
}
function _createClass9(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties9(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties9(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", { writable: false });
  return Constructor;
}
function _inherits9(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  Object.defineProperty(subClass, "prototype", { writable: false });
  if (superClass)
    _setPrototypeOf9(subClass, superClass);
}
function _setPrototypeOf9(o, p) {
  _setPrototypeOf9 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf28(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf9(o, p);
}
function _createSuper9(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct9();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf9(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf9(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn9(this, result);
  };
}
function _possibleConstructorReturn9(self, call) {
  if (call && (_typeof34(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized9(self);
}
function _assertThisInitialized9(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct9() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf9(o) {
  _getPrototypeOf9 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf28(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf9(o);
}
function _defineProperty32(obj, key, value) {
  key = _toPropertyKey32(key);
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey32(arg) {
  var key = _toPrimitive32(arg, "string");
  return _typeof34(key) === "symbol" ? key : String(key);
}
function _toPrimitive32(input, hint) {
  if (_typeof34(input) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof34(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
var cx4 = createClassNames("ClearRefinements");
var ClearRefinements = function(_Component) {
  _inherits9(ClearRefinements2, _Component);
  var _super = _createSuper9(ClearRefinements2);
  function ClearRefinements2() {
    _classCallCheck9(this, ClearRefinements2);
    return _super.apply(this, arguments);
  }
  _createClass9(ClearRefinements2, [{
    key: "render",
    value: function render() {
      var _this$props = this.props, items4 = _this$props.items, canRefine = _this$props.canRefine, refine19 = _this$props.refine, translate = _this$props.translate, className = _this$props.className;
      return import_react13.default.createElement("div", {
        className: (0, import_classnames4.default)(cx4(""), className)
      }, import_react13.default.createElement("button", {
        className: cx4("button", !canRefine && "button--disabled"),
        onClick: function onClick() {
          return refine19(items4);
        },
        disabled: !canRefine
      }, translate("reset")));
    }
  }]);
  return ClearRefinements2;
}(import_react13.Component);
_defineProperty32(ClearRefinements, "propTypes", {
  items: import_prop_types22.default.arrayOf(import_prop_types22.default.object).isRequired,
  canRefine: import_prop_types22.default.bool.isRequired,
  refine: import_prop_types22.default.func.isRequired,
  translate: import_prop_types22.default.func.isRequired,
  className: import_prop_types22.default.string
});
_defineProperty32(ClearRefinements, "defaultProps", {
  className: ""
});
var ClearRefinements_default = translatable({
  reset: "Clear all filters"
})(ClearRefinements);

// ../node_modules/react-instantsearch-dom/dist/es/widgets/ClearRefinements.js
var ClearRefinementsWidget = function ClearRefinementsWidget2(props) {
  return import_react14.default.createElement(PanelCallbackHandler_default, props, import_react14.default.createElement(ClearRefinements_default, props));
};
var ClearRefinements_default2 = connectCurrentRefinements_default(ClearRefinementsWidget, {
  $$widgetType: "ais.clearRefinements"
});

// ../node_modules/react-instantsearch-dom/dist/es/widgets/CurrentRefinements.js
var import_react16 = __toESM(require_react());

// ../node_modules/react-instantsearch-dom/dist/es/components/CurrentRefinements.js
var import_react15 = __toESM(require_react());
var import_prop_types23 = __toESM(require_prop_types());
var import_classnames5 = __toESM(require_classnames());
var cx5 = createClassNames("CurrentRefinements");
var CurrentRefinements = function CurrentRefinements2(_ref7) {
  var items4 = _ref7.items, canRefine = _ref7.canRefine, refine19 = _ref7.refine, translate = _ref7.translate, className = _ref7.className;
  return import_react15.default.createElement("div", {
    className: (0, import_classnames5.default)(cx5("", !canRefine && "-noRefinement"), className)
  }, import_react15.default.createElement("ul", {
    className: cx5("list", !canRefine && "list--noRefinement")
  }, items4.map(function(item) {
    return import_react15.default.createElement("li", {
      key: item.label,
      className: cx5("item")
    }, import_react15.default.createElement("span", {
      className: cx5("label")
    }, item.label), item.items ? item.items.map(function(nest) {
      return import_react15.default.createElement("span", {
        key: nest.label,
        className: cx5("category")
      }, import_react15.default.createElement("span", {
        className: cx5("categoryLabel")
      }, nest.label), import_react15.default.createElement("button", {
        className: cx5("delete"),
        onClick: function onClick() {
          return refine19(nest.value);
        }
      }, translate("clearFilter", nest)));
    }) : import_react15.default.createElement("span", {
      className: cx5("category")
    }, import_react15.default.createElement("button", {
      className: cx5("delete"),
      onClick: function onClick() {
        return refine19(item.value);
      }
    }, translate("clearFilter", item))));
  })));
};
var itemPropTypes = import_prop_types23.default.arrayOf(import_prop_types23.default.shape({
  label: import_prop_types23.default.string.isRequired,
  value: import_prop_types23.default.func.isRequired,
  items: function items() {
    return itemPropTypes.apply(void 0, arguments);
  }
}));
CurrentRefinements.propTypes = {
  items: itemPropTypes.isRequired,
  canRefine: import_prop_types23.default.bool.isRequired,
  refine: import_prop_types23.default.func.isRequired,
  translate: import_prop_types23.default.func.isRequired,
  className: import_prop_types23.default.string
};
CurrentRefinements.defaultProps = {
  className: ""
};
var CurrentRefinements_default = translatable({
  clearFilter: "✕"
})(CurrentRefinements);

// ../node_modules/react-instantsearch-dom/dist/es/widgets/CurrentRefinements.js
var CurrentRefinementsWidget = function CurrentRefinementsWidget2(props) {
  return import_react16.default.createElement(PanelCallbackHandler_default, props, import_react16.default.createElement(CurrentRefinements_default, props));
};
var CurrentRefinements_default2 = connectCurrentRefinements_default(CurrentRefinementsWidget, {
  $$widgetType: "ais.currentRefinements"
});

// ../node_modules/react-instantsearch-dom/dist/es/widgets/HierarchicalMenu.js
var import_react20 = __toESM(require_react());

// ../node_modules/react-instantsearch-dom/dist/es/components/HierarchicalMenu.js
var import_react19 = __toESM(require_react());
var import_prop_types26 = __toESM(require_prop_types());

// ../node_modules/react-instantsearch-dom/dist/es/components/List.js
var import_react18 = __toESM(require_react());
var import_prop_types25 = __toESM(require_prop_types());
var import_classnames7 = __toESM(require_classnames());

// ../node_modules/react-instantsearch-dom/dist/es/components/SearchBox.js
var import_react17 = __toESM(require_react());
var import_prop_types24 = __toESM(require_prop_types());
var import_classnames6 = __toESM(require_classnames());
function _typeof35(obj) {
  "@babel/helpers - typeof";
  return _typeof35 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof35(obj);
}
function _extends5() {
  _extends5 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends5.apply(this, arguments);
}
function ownKeys14(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread14(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys14(Object(source), true).forEach(function(key) {
      _defineProperty33(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys14(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _classCallCheck10(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties10(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey33(descriptor.key), descriptor);
  }
}
function _createClass10(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties10(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties10(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", { writable: false });
  return Constructor;
}
function _inherits10(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  Object.defineProperty(subClass, "prototype", { writable: false });
  if (superClass)
    _setPrototypeOf10(subClass, superClass);
}
function _setPrototypeOf10(o, p) {
  _setPrototypeOf10 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf28(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf10(o, p);
}
function _createSuper10(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct10();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf10(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf10(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn10(this, result);
  };
}
function _possibleConstructorReturn10(self, call) {
  if (call && (_typeof35(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized10(self);
}
function _assertThisInitialized10(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct10() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf10(o) {
  _getPrototypeOf10 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf28(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf10(o);
}
function _defineProperty33(obj, key, value) {
  key = _toPropertyKey33(key);
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey33(arg) {
  var key = _toPrimitive33(arg, "string");
  return _typeof35(key) === "symbol" ? key : String(key);
}
function _toPrimitive33(input, hint) {
  if (_typeof35(input) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof35(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
var cx6 = createClassNames("SearchBox");
var defaultLoadingIndicator = import_react17.default.createElement("svg", {
  width: "18",
  height: "18",
  viewBox: "0 0 38 38",
  xmlns: "http://www.w3.org/2000/svg",
  stroke: "#444",
  className: cx6("loadingIcon")
}, import_react17.default.createElement("g", {
  fill: "none",
  fillRule: "evenodd"
}, import_react17.default.createElement("g", {
  transform: "translate(1 1)",
  strokeWidth: "2"
}, import_react17.default.createElement("circle", {
  strokeOpacity: ".5",
  cx: "18",
  cy: "18",
  r: "18"
}), import_react17.default.createElement("path", {
  d: "M36 18c0-9.94-8.06-18-18-18"
}, import_react17.default.createElement("animateTransform", {
  attributeName: "transform",
  type: "rotate",
  from: "0 18 18",
  to: "360 18 18",
  dur: "1s",
  repeatCount: "indefinite"
})))));
var defaultReset = import_react17.default.createElement("svg", {
  className: cx6("resetIcon"),
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 20 20",
  width: "10",
  height: "10"
}, import_react17.default.createElement("path", {
  d: "M8.114 10L.944 2.83 0 1.885 1.886 0l.943.943L10 8.113l7.17-7.17.944-.943L20 1.886l-.943.943-7.17 7.17 7.17 7.17.943.944L18.114 20l-.943-.943-7.17-7.17-7.17 7.17-.944.943L0 18.114l.943-.943L8.113 10z"
}));
var defaultSubmit = import_react17.default.createElement("svg", {
  className: cx6("submitIcon"),
  xmlns: "http://www.w3.org/2000/svg",
  width: "10",
  height: "10",
  viewBox: "0 0 40 40"
}, import_react17.default.createElement("path", {
  d: "M26.804 29.01c-2.832 2.34-6.465 3.746-10.426 3.746C7.333 32.756 0 25.424 0 16.378 0 7.333 7.333 0 16.378 0c9.046 0 16.378 7.333 16.378 16.378 0 3.96-1.406 7.594-3.746 10.426l10.534 10.534c.607.607.61 1.59-.004 2.202-.61.61-1.597.61-2.202.004L26.804 29.01zm-10.426.627c7.323 0 13.26-5.936 13.26-13.26 0-7.32-5.937-13.257-13.26-13.257C9.056 3.12 3.12 9.056 3.12 16.378c0 7.323 5.936 13.26 13.258 13.26z"
}));
var SearchBox = function(_Component) {
  _inherits10(SearchBox2, _Component);
  var _super = _createSuper10(SearchBox2);
  function SearchBox2(props) {
    var _this;
    _classCallCheck10(this, SearchBox2);
    _this = _super.call(this);
    _defineProperty33(_assertThisInitialized10(_this), "getQuery", function() {
      return _this.props.searchAsYouType ? _this.props.currentRefinement : _this.state.query;
    });
    _defineProperty33(_assertThisInitialized10(_this), "onInputMount", function(input) {
      _this.input = input;
      if (!_this.props.inputRef)
        return;
      if (typeof _this.props.inputRef === "function") {
        _this.props.inputRef(input);
      } else {
        _this.props.inputRef.current = input;
      }
    });
    _defineProperty33(_assertThisInitialized10(_this), "onKeyDown", function(e) {
      if (!_this.props.focusShortcuts) {
        return;
      }
      var shortcuts = _this.props.focusShortcuts.map(function(key) {
        return typeof key === "string" ? key.toUpperCase().charCodeAt(0) : key;
      });
      var elt = e.target || e.srcElement;
      var tagName = elt.tagName;
      if (elt.isContentEditable || tagName === "INPUT" || tagName === "SELECT" || tagName === "TEXTAREA") {
        return;
      }
      var which = e.which || e.keyCode;
      if (shortcuts.indexOf(which) === -1) {
        return;
      }
      _this.input.focus();
      e.stopPropagation();
      e.preventDefault();
    });
    _defineProperty33(_assertThisInitialized10(_this), "onSubmit", function(e) {
      e.preventDefault();
      e.stopPropagation();
      _this.input.blur();
      var _this$props = _this.props, refine19 = _this$props.refine, searchAsYouType = _this$props.searchAsYouType;
      if (!searchAsYouType) {
        refine19(_this.getQuery());
      }
      return false;
    });
    _defineProperty33(_assertThisInitialized10(_this), "onChange", function(event) {
      var _this$props2 = _this.props, searchAsYouType = _this$props2.searchAsYouType, refine19 = _this$props2.refine, onChange = _this$props2.onChange;
      var value = event.target.value;
      if (searchAsYouType) {
        refine19(value);
      } else {
        _this.setState({
          query: value
        });
      }
      if (onChange) {
        onChange(event);
      }
    });
    _defineProperty33(_assertThisInitialized10(_this), "onReset", function(event) {
      var _this$props3 = _this.props, searchAsYouType = _this$props3.searchAsYouType, refine19 = _this$props3.refine, onReset = _this$props3.onReset;
      refine19("");
      _this.input.focus();
      if (!searchAsYouType) {
        _this.setState({
          query: ""
        });
      }
      if (onReset) {
        onReset(event);
      }
    });
    _this.state = {
      query: props.searchAsYouType ? null : props.currentRefinement
    };
    return _this;
  }
  _createClass10(SearchBox2, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      document.addEventListener("keydown", this.onKeyDown);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      document.removeEventListener("keydown", this.onKeyDown);
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (!this.props.searchAsYouType && prevProps.currentRefinement !== this.props.currentRefinement) {
        this.setState({
          query: this.props.currentRefinement
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;
      var _this$props4 = this.props, className = _this$props4.className, inputId = _this$props4.inputId, translate = _this$props4.translate, autoFocus = _this$props4.autoFocus, loadingIndicator = _this$props4.loadingIndicator, submit = _this$props4.submit, reset = _this$props4.reset;
      var query = this.getQuery();
      var searchInputEvents = Object.keys(this.props).reduce(function(props, prop) {
        if (["onsubmit", "onreset", "onchange"].indexOf(prop.toLowerCase()) === -1 && prop.indexOf("on") === 0) {
          return _objectSpread14(_objectSpread14({}, props), {}, _defineProperty33({}, prop, _this2.props[prop]));
        }
        return props;
      }, {});
      var isSearchStalled = this.props.showLoadingIndicator && this.props.isSearchStalled;
      return import_react17.default.createElement("div", {
        className: (0, import_classnames6.default)(cx6(""), className)
      }, import_react17.default.createElement("form", {
        ref: this.props.formRef,
        noValidate: true,
        onSubmit: this.props.onSubmit ? this.props.onSubmit : this.onSubmit,
        onReset: this.onReset,
        className: cx6("form", isSearchStalled && "form--stalledSearch"),
        action: "",
        role: "search"
      }, import_react17.default.createElement("input", _extends5({
        ref: this.onInputMount,
        id: inputId,
        type: "search",
        placeholder: translate("placeholder"),
        autoFocus,
        autoComplete: "off",
        autoCorrect: "off",
        autoCapitalize: "off",
        spellCheck: "false",
        required: true,
        maxLength: "512",
        value: query,
        onChange: this.onChange
      }, searchInputEvents, {
        className: cx6("input")
      })), import_react17.default.createElement("button", {
        type: "submit",
        title: translate("submitTitle"),
        className: cx6("submit")
      }, submit), import_react17.default.createElement("button", {
        type: "reset",
        title: translate("resetTitle"),
        className: cx6("reset"),
        hidden: !query || isSearchStalled
      }, reset), this.props.showLoadingIndicator && import_react17.default.createElement("span", {
        hidden: !isSearchStalled,
        className: cx6("loadingIndicator")
      }, loadingIndicator)));
    }
  }]);
  return SearchBox2;
}(import_react17.Component);
_defineProperty33(SearchBox, "propTypes", {
  currentRefinement: import_prop_types24.default.string,
  className: import_prop_types24.default.string,
  refine: import_prop_types24.default.func.isRequired,
  translate: import_prop_types24.default.func.isRequired,
  loadingIndicator: import_prop_types24.default.node,
  reset: import_prop_types24.default.node,
  submit: import_prop_types24.default.node,
  focusShortcuts: import_prop_types24.default.arrayOf(import_prop_types24.default.oneOfType([import_prop_types24.default.string, import_prop_types24.default.number])),
  autoFocus: import_prop_types24.default.bool,
  searchAsYouType: import_prop_types24.default.bool,
  onSubmit: import_prop_types24.default.func,
  onReset: import_prop_types24.default.func,
  onChange: import_prop_types24.default.func,
  isSearchStalled: import_prop_types24.default.bool,
  showLoadingIndicator: import_prop_types24.default.bool,
  formRef: import_prop_types24.default.oneOfType([import_prop_types24.default.func, import_prop_types24.default.exact({
    current: import_prop_types24.default.object
  })]),
  inputRef: import_prop_types24.default.oneOfType([import_prop_types24.default.func, import_prop_types24.default.exact({
    current: import_prop_types24.default.object
  })]),
  inputId: import_prop_types24.default.string
});
_defineProperty33(SearchBox, "defaultProps", {
  currentRefinement: "",
  className: "",
  focusShortcuts: ["s", "/"],
  autoFocus: false,
  searchAsYouType: true,
  showLoadingIndicator: false,
  isSearchStalled: false,
  loadingIndicator: defaultLoadingIndicator,
  reset: defaultReset,
  submit: defaultSubmit
});
var SearchBox_default = translatable({
  resetTitle: "Clear the search query.",
  submitTitle: "Submit your search query.",
  placeholder: "Search here…"
})(SearchBox);

// ../node_modules/react-instantsearch-dom/dist/es/components/List.js
function _typeof36(obj) {
  "@babel/helpers - typeof";
  return _typeof36 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof36(obj);
}
function _classCallCheck11(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties11(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey34(descriptor.key), descriptor);
  }
}
function _createClass11(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties11(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties11(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", { writable: false });
  return Constructor;
}
function _inherits11(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  Object.defineProperty(subClass, "prototype", { writable: false });
  if (superClass)
    _setPrototypeOf11(subClass, superClass);
}
function _setPrototypeOf11(o, p) {
  _setPrototypeOf11 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf28(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf11(o, p);
}
function _createSuper11(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct11();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf11(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf11(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn11(this, result);
  };
}
function _possibleConstructorReturn11(self, call) {
  if (call && (_typeof36(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized11(self);
}
function _assertThisInitialized11(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct11() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf11(o) {
  _getPrototypeOf11 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf28(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf11(o);
}
function _defineProperty34(obj, key, value) {
  key = _toPropertyKey34(key);
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey34(arg) {
  var key = _toPrimitive34(arg, "string");
  return _typeof36(key) === "symbol" ? key : String(key);
}
function _toPrimitive34(input, hint) {
  if (_typeof36(input) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof36(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
var itemsPropType2 = import_prop_types25.default.arrayOf(import_prop_types25.default.shape({
  value: import_prop_types25.default.any,
  label: import_prop_types25.default.node.isRequired,
  items: function items2() {
    return itemsPropType2.apply(void 0, arguments);
  }
}));
var List = function(_Component) {
  _inherits11(List2, _Component);
  var _super = _createSuper11(List2);
  function List2() {
    var _this;
    _classCallCheck11(this, List2);
    _this = _super.call(this);
    _defineProperty34(_assertThisInitialized11(_this), "onShowMoreClick", function() {
      _this.setState(function(state) {
        return {
          extended: !state.extended
        };
      });
    });
    _defineProperty34(_assertThisInitialized11(_this), "getLimit", function() {
      var _this$props = _this.props, limit = _this$props.limit, showMoreLimit = _this$props.showMoreLimit;
      var extended = _this.state.extended;
      return extended ? showMoreLimit : limit;
    });
    _defineProperty34(_assertThisInitialized11(_this), "resetQuery", function() {
      _this.setState({
        query: ""
      });
    });
    _defineProperty34(_assertThisInitialized11(_this), "renderItem", function(item, resetQuery) {
      var itemHasChildren = item.items && Boolean(item.items.length);
      return import_react18.default.createElement("li", {
        key: item.key || item.label,
        className: _this.props.cx("item", item.isRefined && "item--selected", item.noRefinement && "item--noRefinement", itemHasChildren && "item--parent")
      }, _this.props.renderItem(item, resetQuery), itemHasChildren && import_react18.default.createElement("ul", {
        className: _this.props.cx("list", "list--child")
      }, item.items.slice(0, _this.getLimit()).map(function(child) {
        return _this.renderItem(child, item);
      })));
    });
    _this.state = {
      extended: false,
      query: ""
    };
    return _this;
  }
  _createClass11(List2, [{
    key: "renderShowMore",
    value: function renderShowMore() {
      var _this$props2 = this.props, showMore4 = _this$props2.showMore, translate = _this$props2.translate, cx30 = _this$props2.cx;
      var extended = this.state.extended;
      var disabled = this.props.limit >= this.props.items.length;
      if (!showMore4) {
        return null;
      }
      return import_react18.default.createElement("button", {
        disabled,
        className: cx30("showMore", disabled && "showMore--disabled"),
        onClick: this.onShowMoreClick
      }, translate("showMore", extended));
    }
  }, {
    key: "renderSearchBox",
    value: function renderSearchBox() {
      var _this2 = this;
      var _this$props3 = this.props, cx30 = _this$props3.cx, searchForItems = _this$props3.searchForItems, isFromSearch = _this$props3.isFromSearch, translate = _this$props3.translate, items4 = _this$props3.items, selectItem = _this$props3.selectItem;
      var noResults = items4.length === 0 && this.state.query !== "" ? import_react18.default.createElement("div", {
        className: cx30("noResults")
      }, translate("noResults")) : null;
      return import_react18.default.createElement("div", {
        className: cx30("searchBox")
      }, import_react18.default.createElement(SearchBox_default, {
        currentRefinement: this.state.query,
        refine: function refine19(value) {
          _this2.setState({
            query: value
          });
          searchForItems(value);
        },
        focusShortcuts: [],
        translate,
        onSubmit: function onSubmit(e) {
          e.preventDefault();
          e.stopPropagation();
          if (isFromSearch && items4.length > 0) {
            selectItem(items4[0], _this2.resetQuery);
          }
        }
      }), noResults);
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;
      var _this$props4 = this.props, cx30 = _this$props4.cx, items4 = _this$props4.items, className = _this$props4.className, searchable = _this$props4.searchable, canRefine = _this$props4.canRefine;
      var searchBox = searchable ? this.renderSearchBox() : null;
      var rootClassName = (0, import_classnames7.default)(cx30("", !canRefine && "-noRefinement"), className);
      if (items4.length === 0) {
        return import_react18.default.createElement("div", {
          className: rootClassName
        }, searchBox);
      }
      return import_react18.default.createElement("div", {
        className: rootClassName
      }, searchBox, import_react18.default.createElement("ul", {
        className: cx30("list", !canRefine && "list--noRefinement")
      }, items4.slice(0, this.getLimit()).map(function(item) {
        return _this3.renderItem(item, _this3.resetQuery);
      })), this.renderShowMore());
    }
  }]);
  return List2;
}(import_react18.Component);
_defineProperty34(List, "propTypes", {
  cx: import_prop_types25.default.func.isRequired,
  // Only required with showMore.
  translate: import_prop_types25.default.func,
  items: itemsPropType2,
  renderItem: import_prop_types25.default.func.isRequired,
  selectItem: import_prop_types25.default.func,
  className: import_prop_types25.default.string,
  showMore: import_prop_types25.default.bool,
  limit: import_prop_types25.default.number,
  showMoreLimit: import_prop_types25.default.number,
  show: import_prop_types25.default.func,
  searchForItems: import_prop_types25.default.func,
  searchable: import_prop_types25.default.bool,
  isFromSearch: import_prop_types25.default.bool,
  canRefine: import_prop_types25.default.bool
});
_defineProperty34(List, "defaultProps", {
  className: "",
  isFromSearch: false
});
var List_default = List;

// ../node_modules/react-instantsearch-dom/dist/es/components/HierarchicalMenu.js
function _typeof37(obj) {
  "@babel/helpers - typeof";
  return _typeof37 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof37(obj);
}
function _classCallCheck12(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties12(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey35(descriptor.key), descriptor);
  }
}
function _createClass12(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties12(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties12(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", { writable: false });
  return Constructor;
}
function _inherits12(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  Object.defineProperty(subClass, "prototype", { writable: false });
  if (superClass)
    _setPrototypeOf12(subClass, superClass);
}
function _setPrototypeOf12(o, p) {
  _setPrototypeOf12 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf28(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf12(o, p);
}
function _createSuper12(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct12();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf12(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf12(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn12(this, result);
  };
}
function _possibleConstructorReturn12(self, call) {
  if (call && (_typeof37(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized12(self);
}
function _assertThisInitialized12(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct12() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf12(o) {
  _getPrototypeOf12 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf28(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf12(o);
}
function _defineProperty35(obj, key, value) {
  key = _toPropertyKey35(key);
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey35(arg) {
  var key = _toPrimitive35(arg, "string");
  return _typeof37(key) === "symbol" ? key : String(key);
}
function _toPrimitive35(input, hint) {
  if (_typeof37(input) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof37(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
var cx7 = createClassNames("HierarchicalMenu");
var itemsPropType3 = import_prop_types26.default.arrayOf(import_prop_types26.default.shape({
  label: import_prop_types26.default.string.isRequired,
  value: import_prop_types26.default.string,
  count: import_prop_types26.default.number.isRequired,
  items: function items3() {
    return itemsPropType3.apply(void 0, arguments);
  }
}));
var HierarchicalMenu = function(_Component) {
  _inherits12(HierarchicalMenu2, _Component);
  var _super = _createSuper12(HierarchicalMenu2);
  function HierarchicalMenu2() {
    var _this;
    _classCallCheck12(this, HierarchicalMenu2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty35(_assertThisInitialized12(_this), "renderItem", function(item) {
      var _this$props = _this.props, createURL = _this$props.createURL, refine19 = _this$props.refine;
      return import_react19.default.createElement(Link, {
        className: cx7("link", item.isRefined && "link--selected"),
        onClick: function onClick() {
          return refine19(item.value);
        },
        href: createURL(item.value)
      }, import_react19.default.createElement("span", {
        className: cx7("label")
      }, item.label), " ", import_react19.default.createElement("span", {
        className: cx7("count")
      }, item.count));
    });
    return _this;
  }
  _createClass12(HierarchicalMenu2, [{
    key: "render",
    value: function render() {
      var _this$props2 = this.props, translate = _this$props2.translate, items4 = _this$props2.items, showMore4 = _this$props2.showMore, limit = _this$props2.limit, showMoreLimit = _this$props2.showMoreLimit, canRefine = _this$props2.canRefine, className = _this$props2.className;
      return import_react19.default.createElement(List_default, {
        renderItem: this.renderItem,
        cx: cx7,
        translate,
        items: items4,
        showMore: showMore4,
        limit,
        showMoreLimit,
        canRefine,
        className
      });
    }
  }]);
  return HierarchicalMenu2;
}(import_react19.Component);
_defineProperty35(HierarchicalMenu, "propTypes", {
  translate: import_prop_types26.default.func.isRequired,
  refine: import_prop_types26.default.func.isRequired,
  createURL: import_prop_types26.default.func.isRequired,
  canRefine: import_prop_types26.default.bool.isRequired,
  items: itemsPropType3,
  showMore: import_prop_types26.default.bool,
  className: import_prop_types26.default.string,
  limit: import_prop_types26.default.number,
  showMoreLimit: import_prop_types26.default.number,
  transformItems: import_prop_types26.default.func
});
_defineProperty35(HierarchicalMenu, "defaultProps", {
  className: ""
});
var HierarchicalMenu_default = translatable({
  showMore: function showMore(extended) {
    return extended ? "Show less" : "Show more";
  }
})(HierarchicalMenu);

// ../node_modules/react-instantsearch-dom/dist/es/widgets/HierarchicalMenu.js
var HierarchicalMenuWidget = function HierarchicalMenuWidget2(props) {
  return import_react20.default.createElement(PanelCallbackHandler_default, props, import_react20.default.createElement(HierarchicalMenu_default, props));
};
var HierarchicalMenu_default2 = connectHierarchicalMenu_default(HierarchicalMenuWidget, {
  $$widgetType: "ais.hierarchicalMenu"
});

// ../node_modules/react-instantsearch-dom/dist/es/components/Highlight.js
var import_react22 = __toESM(require_react());

// ../node_modules/react-instantsearch-dom/dist/es/components/Highlighter.js
var import_react21 = __toESM(require_react());
var import_prop_types27 = __toESM(require_prop_types());
var import_classnames8 = __toESM(require_classnames());
var Highlight = function Highlight2(_ref7) {
  var cx30 = _ref7.cx, value = _ref7.value, highlightedTagName = _ref7.highlightedTagName, isHighlighted = _ref7.isHighlighted, nonHighlightedTagName = _ref7.nonHighlightedTagName;
  var TagName = isHighlighted ? highlightedTagName : nonHighlightedTagName;
  var className = isHighlighted ? "highlighted" : "nonHighlighted";
  return import_react21.default.createElement(TagName, {
    className: cx30(className)
  }, value);
};
Highlight.propTypes = {
  cx: import_prop_types27.default.func.isRequired,
  value: import_prop_types27.default.string.isRequired,
  isHighlighted: import_prop_types27.default.bool.isRequired,
  highlightedTagName: import_prop_types27.default.string.isRequired,
  nonHighlightedTagName: import_prop_types27.default.string.isRequired
};
var Highlighter = function Highlighter2(_ref23) {
  var cx30 = _ref23.cx, hit = _ref23.hit, attribute = _ref23.attribute, highlight3 = _ref23.highlight, highlightProperty = _ref23.highlightProperty, tagName = _ref23.tagName, nonHighlightedTagName = _ref23.nonHighlightedTagName, separator = _ref23.separator, className = _ref23.className;
  var parsedHighlightedValue = highlight3({
    hit,
    attribute,
    highlightProperty
  });
  return import_react21.default.createElement("span", {
    className: (0, import_classnames8.default)(cx30(""), className)
  }, parsedHighlightedValue.map(function(item, i) {
    if (Array.isArray(item)) {
      var isLast = i === parsedHighlightedValue.length - 1;
      return import_react21.default.createElement("span", {
        key: i
      }, item.map(function(element, index) {
        return import_react21.default.createElement(Highlight, {
          cx: cx30,
          key: index,
          value: element.value,
          highlightedTagName: tagName,
          nonHighlightedTagName,
          isHighlighted: element.isHighlighted
        });
      }), !isLast && import_react21.default.createElement("span", {
        className: cx30("separator")
      }, separator));
    }
    return import_react21.default.createElement(Highlight, {
      cx: cx30,
      key: i,
      value: item.value,
      highlightedTagName: tagName,
      nonHighlightedTagName,
      isHighlighted: item.isHighlighted
    });
  }));
};
Highlighter.propTypes = {
  cx: import_prop_types27.default.func.isRequired,
  hit: import_prop_types27.default.object.isRequired,
  attribute: import_prop_types27.default.oneOfType([import_prop_types27.default.arrayOf(import_prop_types27.default.string), import_prop_types27.default.string]).isRequired,
  highlight: import_prop_types27.default.func.isRequired,
  highlightProperty: import_prop_types27.default.string.isRequired,
  tagName: import_prop_types27.default.string,
  nonHighlightedTagName: import_prop_types27.default.string,
  className: import_prop_types27.default.string,
  separator: import_prop_types27.default.node
};
Highlighter.defaultProps = {
  tagName: "em",
  nonHighlightedTagName: "span",
  className: "",
  separator: ", "
};
var Highlighter_default = Highlighter;

// ../node_modules/react-instantsearch-dom/dist/es/components/Highlight.js
function _extends6() {
  _extends6 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends6.apply(this, arguments);
}
var cx8 = createClassNames("Highlight");
var Highlight3 = function Highlight4(props) {
  return import_react22.default.createElement(Highlighter_default, _extends6({}, props, {
    highlightProperty: "_highlightResult",
    cx: cx8
  }));
};
var Highlight_default = Highlight3;

// ../node_modules/react-instantsearch-dom/dist/es/widgets/Highlight.js
var Highlight_default2 = connectHighlight_default(Highlight_default, {
  $$widgetType: "ais.highlight"
});

// ../node_modules/react-instantsearch-dom/dist/es/components/Hits.js
var import_react23 = __toESM(require_react());
var import_prop_types28 = __toESM(require_prop_types());
var import_classnames9 = __toESM(require_classnames());
var cx9 = createClassNames("Hits");
var DefaultHitComponent = function DefaultHitComponent2(props) {
  return import_react23.default.createElement("div", {
    style: {
      borderBottom: "1px solid #bbb",
      paddingBottom: "5px",
      marginBottom: "5px",
      wordBreak: "break-all"
    }
  }, JSON.stringify(props).slice(0, 100), "...");
};
var Hits = function Hits2(_ref7) {
  var hits = _ref7.hits, _ref$className = _ref7.className, className = _ref$className === void 0 ? "" : _ref$className, _ref$hitComponent = _ref7.hitComponent, HitComponent = _ref$hitComponent === void 0 ? DefaultHitComponent : _ref$hitComponent;
  return import_react23.default.createElement("div", {
    className: (0, import_classnames9.default)(cx9(""), className)
  }, import_react23.default.createElement("ul", {
    className: cx9("list")
  }, hits.map(function(hit) {
    return import_react23.default.createElement("li", {
      className: cx9("item"),
      key: hit.objectID
    }, import_react23.default.createElement(HitComponent, {
      hit
    }));
  })));
};
var HitPropTypes = import_prop_types28.default.shape({
  objectID: import_prop_types28.default.oneOfType([import_prop_types28.default.string, import_prop_types28.default.number]).isRequired
});
Hits.propTypes = {
  hits: import_prop_types28.default.arrayOf(HitPropTypes.isRequired).isRequired,
  className: import_prop_types28.default.string,
  // this is actually PropTypes.elementType, but our prop-types version is outdated
  hitComponent: import_prop_types28.default.any
};
var Hits_default = Hits;

// ../node_modules/react-instantsearch-dom/dist/es/widgets/Hits.js
var Hits_default2 = connectHits_default(Hits_default, {
  $$widgetType: "ais.hits"
});

// ../node_modules/react-instantsearch-dom/dist/es/components/HitsPerPage.js
var import_react25 = __toESM(require_react());
var import_prop_types30 = __toESM(require_prop_types());
var import_classnames10 = __toESM(require_classnames());

// ../node_modules/react-instantsearch-dom/dist/es/components/Select.js
var import_react24 = __toESM(require_react());
var import_prop_types29 = __toESM(require_prop_types());
function _typeof38(obj) {
  "@babel/helpers - typeof";
  return _typeof38 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof38(obj);
}
function _classCallCheck13(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties13(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey36(descriptor.key), descriptor);
  }
}
function _createClass13(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties13(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties13(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", { writable: false });
  return Constructor;
}
function _inherits13(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  Object.defineProperty(subClass, "prototype", { writable: false });
  if (superClass)
    _setPrototypeOf13(subClass, superClass);
}
function _setPrototypeOf13(o, p) {
  _setPrototypeOf13 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf28(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf13(o, p);
}
function _createSuper13(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct13();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf13(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf13(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn13(this, result);
  };
}
function _possibleConstructorReturn13(self, call) {
  if (call && (_typeof38(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized13(self);
}
function _assertThisInitialized13(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct13() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf13(o) {
  _getPrototypeOf13 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf28(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf13(o);
}
function _defineProperty36(obj, key, value) {
  key = _toPropertyKey36(key);
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey36(arg) {
  var key = _toPrimitive36(arg, "string");
  return _typeof38(key) === "symbol" ? key : String(key);
}
function _toPrimitive36(input, hint) {
  if (_typeof38(input) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof38(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
var Select = function(_Component) {
  _inherits13(Select2, _Component);
  var _super = _createSuper13(Select2);
  function Select2() {
    var _this;
    _classCallCheck13(this, Select2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty36(_assertThisInitialized13(_this), "onChange", function(e) {
      _this.props.onSelect(e.target.value);
    });
    return _this;
  }
  _createClass13(Select2, [{
    key: "render",
    value: function render() {
      var _this$props = this.props, cx30 = _this$props.cx, id = _this$props.id, items4 = _this$props.items, selectedItem = _this$props.selectedItem;
      return import_react24.default.createElement("select", {
        id,
        className: cx30("select"),
        value: selectedItem,
        onChange: this.onChange
      }, items4.map(function(item) {
        return import_react24.default.createElement("option", {
          className: cx30("option"),
          key: item.key === void 0 ? item.value : item.key,
          disabled: item.disabled,
          value: item.value
        }, item.label === void 0 ? item.value : item.label);
      }));
    }
  }]);
  return Select2;
}(import_react24.Component);
_defineProperty36(Select, "propTypes", {
  cx: import_prop_types29.default.func.isRequired,
  id: import_prop_types29.default.string,
  onSelect: import_prop_types29.default.func.isRequired,
  items: import_prop_types29.default.arrayOf(import_prop_types29.default.shape({
    value: import_prop_types29.default.oneOfType([import_prop_types29.default.string, import_prop_types29.default.number]).isRequired,
    key: import_prop_types29.default.oneOfType([import_prop_types29.default.string, import_prop_types29.default.number]),
    label: import_prop_types29.default.string,
    disabled: import_prop_types29.default.bool
  })).isRequired,
  selectedItem: import_prop_types29.default.oneOfType([import_prop_types29.default.string, import_prop_types29.default.number]).isRequired
});

// ../node_modules/react-instantsearch-dom/dist/es/components/HitsPerPage.js
function _typeof39(obj) {
  "@babel/helpers - typeof";
  return _typeof39 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof39(obj);
}
function _classCallCheck14(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties14(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey37(descriptor.key), descriptor);
  }
}
function _createClass14(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties14(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties14(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", { writable: false });
  return Constructor;
}
function _inherits14(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  Object.defineProperty(subClass, "prototype", { writable: false });
  if (superClass)
    _setPrototypeOf14(subClass, superClass);
}
function _setPrototypeOf14(o, p) {
  _setPrototypeOf14 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf28(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf14(o, p);
}
function _createSuper14(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct14();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf14(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf14(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn14(this, result);
  };
}
function _possibleConstructorReturn14(self, call) {
  if (call && (_typeof39(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized14(self);
}
function _assertThisInitialized14(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct14() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf14(o) {
  _getPrototypeOf14 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf28(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf14(o);
}
function _defineProperty37(obj, key, value) {
  key = _toPropertyKey37(key);
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey37(arg) {
  var key = _toPrimitive37(arg, "string");
  return _typeof39(key) === "symbol" ? key : String(key);
}
function _toPrimitive37(input, hint) {
  if (_typeof39(input) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof39(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
var cx10 = createClassNames("HitsPerPage");
var HitsPerPage = function(_Component) {
  _inherits14(HitsPerPage2, _Component);
  var _super = _createSuper14(HitsPerPage2);
  function HitsPerPage2() {
    _classCallCheck14(this, HitsPerPage2);
    return _super.apply(this, arguments);
  }
  _createClass14(HitsPerPage2, [{
    key: "render",
    value: function render() {
      var _this$props = this.props, id = _this$props.id, items4 = _this$props.items, currentRefinement = _this$props.currentRefinement, refine19 = _this$props.refine, className = _this$props.className;
      return import_react25.default.createElement("div", {
        className: (0, import_classnames10.default)(cx10(""), className)
      }, import_react25.default.createElement(Select, {
        id,
        onSelect: refine19,
        selectedItem: currentRefinement,
        items: items4,
        cx: cx10
      }));
    }
  }]);
  return HitsPerPage2;
}(import_react25.Component);
_defineProperty37(HitsPerPage, "propTypes", {
  id: import_prop_types30.default.string,
  items: import_prop_types30.default.arrayOf(import_prop_types30.default.shape({
    value: import_prop_types30.default.number.isRequired,
    label: import_prop_types30.default.string
  })).isRequired,
  currentRefinement: import_prop_types30.default.number.isRequired,
  refine: import_prop_types30.default.func.isRequired,
  className: import_prop_types30.default.string
});
_defineProperty37(HitsPerPage, "defaultProps", {
  className: ""
});
var HitsPerPage_default = HitsPerPage;

// ../node_modules/react-instantsearch-dom/dist/es/widgets/HitsPerPage.js
var HitsPerPage_default2 = connectHitsPerPage_default(HitsPerPage_default, {
  $$widgetType: "ais.hitsPerPage"
});

// ../node_modules/react-instantsearch-dom/dist/es/components/InfiniteHits.js
var import_react26 = __toESM(require_react());
var import_prop_types31 = __toESM(require_prop_types());
var import_classnames11 = __toESM(require_classnames());
function _typeof40(obj) {
  "@babel/helpers - typeof";
  return _typeof40 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof40(obj);
}
function _classCallCheck15(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties15(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey38(descriptor.key), descriptor);
  }
}
function _createClass15(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties15(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties15(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", { writable: false });
  return Constructor;
}
function _toPropertyKey38(arg) {
  var key = _toPrimitive38(arg, "string");
  return _typeof40(key) === "symbol" ? key : String(key);
}
function _toPrimitive38(input, hint) {
  if (_typeof40(input) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof40(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function _inherits15(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  Object.defineProperty(subClass, "prototype", { writable: false });
  if (superClass)
    _setPrototypeOf15(subClass, superClass);
}
function _setPrototypeOf15(o, p) {
  _setPrototypeOf15 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf28(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf15(o, p);
}
function _createSuper15(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct15();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf15(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf15(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn15(this, result);
  };
}
function _possibleConstructorReturn15(self, call) {
  if (call && (_typeof40(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized15(self);
}
function _assertThisInitialized15(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct15() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf15(o) {
  _getPrototypeOf15 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf28(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf15(o);
}
var cx11 = createClassNames("InfiniteHits");
var InfiniteHits = function(_Component) {
  _inherits15(InfiniteHits2, _Component);
  var _super = _createSuper15(InfiniteHits2);
  function InfiniteHits2() {
    _classCallCheck15(this, InfiniteHits2);
    return _super.apply(this, arguments);
  }
  _createClass15(InfiniteHits2, [{
    key: "render",
    value: function render() {
      var _this$props = this.props, HitComponent = _this$props.hitComponent, hits = _this$props.hits, showPrevious = _this$props.showPrevious, hasPrevious = _this$props.hasPrevious, hasMore = _this$props.hasMore, refinePrevious = _this$props.refinePrevious, refineNext = _this$props.refineNext, translate = _this$props.translate, className = _this$props.className;
      return import_react26.default.createElement("div", {
        className: (0, import_classnames11.default)(cx11(""), className)
      }, showPrevious && import_react26.default.createElement("button", {
        className: cx11("loadPrevious", !hasPrevious && "loadPrevious--disabled"),
        onClick: function onClick() {
          return refinePrevious();
        },
        disabled: !hasPrevious
      }, translate("loadPrevious")), import_react26.default.createElement("ul", {
        className: cx11("list")
      }, hits.map(function(hit) {
        return import_react26.default.createElement("li", {
          key: hit.objectID,
          className: cx11("item")
        }, import_react26.default.createElement(HitComponent, {
          hit
        }));
      })), import_react26.default.createElement("button", {
        className: cx11("loadMore", !hasMore && "loadMore--disabled"),
        onClick: function onClick() {
          return refineNext();
        },
        disabled: !hasMore
      }, translate("loadMore")));
    }
  }]);
  return InfiniteHits2;
}(import_react26.Component);
InfiniteHits.propTypes = {
  hits: import_prop_types31.default.arrayOf(import_prop_types31.default.object).isRequired,
  showPrevious: import_prop_types31.default.bool.isRequired,
  hasPrevious: import_prop_types31.default.bool.isRequired,
  hasMore: import_prop_types31.default.bool.isRequired,
  refinePrevious: import_prop_types31.default.func.isRequired,
  refineNext: import_prop_types31.default.func.isRequired,
  translate: import_prop_types31.default.func.isRequired,
  className: import_prop_types31.default.string,
  // this is actually PropTypes.elementType, but our prop-types version is outdated
  hitComponent: import_prop_types31.default.any
};
InfiniteHits.defaultProps = {
  className: "",
  showPrevious: false,
  hitComponent: function hitComponent(hit) {
    return import_react26.default.createElement("div", {
      style: {
        borderBottom: "1px solid #bbb",
        paddingBottom: "5px",
        marginBottom: "5px",
        wordBreak: "break-all"
      }
    }, JSON.stringify(hit).slice(0, 100), "...");
  }
};
var InfiniteHits_default = translatable({
  loadPrevious: "Load previous",
  loadMore: "Load more"
})(InfiniteHits);

// ../node_modules/react-instantsearch-dom/dist/es/widgets/InfiniteHits.js
var InfiniteHits_default2 = connectInfiniteHits_default(InfiniteHits_default, {
  $$widgetType: "ais.infiniteHits"
});

// ../node_modules/react-instantsearch-dom/dist/es/widgets/Menu.js
var import_react28 = __toESM(require_react());

// ../node_modules/react-instantsearch-dom/dist/es/components/Menu.js
var import_react27 = __toESM(require_react());
var import_prop_types32 = __toESM(require_prop_types());
function _typeof41(obj) {
  "@babel/helpers - typeof";
  return _typeof41 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof41(obj);
}
function _classCallCheck16(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties16(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey39(descriptor.key), descriptor);
  }
}
function _createClass16(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties16(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties16(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", { writable: false });
  return Constructor;
}
function _inherits16(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  Object.defineProperty(subClass, "prototype", { writable: false });
  if (superClass)
    _setPrototypeOf16(subClass, superClass);
}
function _setPrototypeOf16(o, p) {
  _setPrototypeOf16 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf28(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf16(o, p);
}
function _createSuper16(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct16();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf16(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf16(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn16(this, result);
  };
}
function _possibleConstructorReturn16(self, call) {
  if (call && (_typeof41(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized16(self);
}
function _assertThisInitialized16(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct16() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf16(o) {
  _getPrototypeOf16 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf28(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf16(o);
}
function _defineProperty38(obj, key, value) {
  key = _toPropertyKey39(key);
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey39(arg) {
  var key = _toPrimitive39(arg, "string");
  return _typeof41(key) === "symbol" ? key : String(key);
}
function _toPrimitive39(input, hint) {
  if (_typeof41(input) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof41(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
var cx12 = createClassNames("Menu");
var Menu = function(_Component) {
  _inherits16(Menu2, _Component);
  var _super = _createSuper16(Menu2);
  function Menu2() {
    var _this;
    _classCallCheck16(this, Menu2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty38(_assertThisInitialized16(_this), "renderItem", function(item, resetQuery) {
      var createURL = _this.props.createURL;
      var label = _this.props.isFromSearch ? import_react27.default.createElement(Highlight_default2, {
        attribute: "label",
        hit: item
      }) : item.label;
      return import_react27.default.createElement(Link, {
        className: cx12("link"),
        onClick: function onClick() {
          return _this.selectItem(item, resetQuery);
        },
        href: createURL(item.value)
      }, import_react27.default.createElement("span", {
        className: cx12("label")
      }, label), " ", import_react27.default.createElement("span", {
        className: cx12("count")
      }, item.count));
    });
    _defineProperty38(_assertThisInitialized16(_this), "selectItem", function(item, resetQuery) {
      resetQuery();
      _this.props.refine(item.value);
    });
    return _this;
  }
  _createClass16(Menu2, [{
    key: "render",
    value: function render() {
      var _this$props = this.props, translate = _this$props.translate, items4 = _this$props.items, showMore4 = _this$props.showMore, limit = _this$props.limit, showMoreLimit = _this$props.showMoreLimit, isFromSearch = _this$props.isFromSearch, searchForItems = _this$props.searchForItems, searchable = _this$props.searchable, canRefine = _this$props.canRefine, className = _this$props.className;
      return import_react27.default.createElement(List_default, {
        renderItem: this.renderItem,
        selectItem: this.selectItem,
        cx: cx12,
        translate,
        items: items4,
        showMore: showMore4,
        limit,
        showMoreLimit,
        isFromSearch,
        searchForItems,
        searchable,
        canRefine,
        className
      });
    }
  }]);
  return Menu2;
}(import_react27.Component);
_defineProperty38(Menu, "propTypes", {
  translate: import_prop_types32.default.func.isRequired,
  refine: import_prop_types32.default.func.isRequired,
  searchForItems: import_prop_types32.default.func.isRequired,
  searchable: import_prop_types32.default.bool,
  createURL: import_prop_types32.default.func.isRequired,
  items: import_prop_types32.default.arrayOf(import_prop_types32.default.shape({
    label: import_prop_types32.default.string.isRequired,
    value: import_prop_types32.default.string.isRequired,
    count: import_prop_types32.default.number.isRequired,
    isRefined: import_prop_types32.default.bool.isRequired
  })),
  isFromSearch: import_prop_types32.default.bool.isRequired,
  canRefine: import_prop_types32.default.bool.isRequired,
  showMore: import_prop_types32.default.bool,
  limit: import_prop_types32.default.number,
  showMoreLimit: import_prop_types32.default.number,
  transformItems: import_prop_types32.default.func,
  className: import_prop_types32.default.string
});
_defineProperty38(Menu, "defaultProps", {
  className: ""
});
var Menu_default = translatable({
  showMore: function showMore2(extended) {
    return extended ? "Show less" : "Show more";
  },
  noResults: "No results",
  submit: null,
  reset: null,
  resetTitle: "Clear the search query.",
  submitTitle: "Submit your search query.",
  placeholder: "Search here…"
})(Menu);

// ../node_modules/react-instantsearch-dom/dist/es/widgets/Menu.js
var MenuWidget = function MenuWidget2(props) {
  return import_react28.default.createElement(PanelCallbackHandler_default, props, import_react28.default.createElement(Menu_default, props));
};
var Menu_default2 = connectMenu_default(MenuWidget, {
  $$widgetType: "ais.menu"
});

// ../node_modules/react-instantsearch-dom/dist/es/widgets/MenuSelect.js
var import_react30 = __toESM(require_react());

// ../node_modules/react-instantsearch-dom/dist/es/components/MenuSelect.js
var import_react29 = __toESM(require_react());
var import_prop_types33 = __toESM(require_prop_types());
var import_classnames12 = __toESM(require_classnames());
function _typeof42(obj) {
  "@babel/helpers - typeof";
  return _typeof42 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof42(obj);
}
function _classCallCheck17(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties17(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey40(descriptor.key), descriptor);
  }
}
function _createClass17(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties17(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties17(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", { writable: false });
  return Constructor;
}
function _inherits17(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  Object.defineProperty(subClass, "prototype", { writable: false });
  if (superClass)
    _setPrototypeOf17(subClass, superClass);
}
function _setPrototypeOf17(o, p) {
  _setPrototypeOf17 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf28(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf17(o, p);
}
function _createSuper17(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct17();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf17(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf17(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn17(this, result);
  };
}
function _possibleConstructorReturn17(self, call) {
  if (call && (_typeof42(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized17(self);
}
function _assertThisInitialized17(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct17() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf17(o) {
  _getPrototypeOf17 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf28(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf17(o);
}
function _defineProperty39(obj, key, value) {
  key = _toPropertyKey40(key);
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey40(arg) {
  var key = _toPrimitive40(arg, "string");
  return _typeof42(key) === "symbol" ? key : String(key);
}
function _toPrimitive40(input, hint) {
  if (_typeof42(input) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof42(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
var cx13 = createClassNames("MenuSelect");
var MenuSelect = function(_Component) {
  _inherits17(MenuSelect2, _Component);
  var _super = _createSuper17(MenuSelect2);
  function MenuSelect2() {
    var _this;
    _classCallCheck17(this, MenuSelect2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty39(_assertThisInitialized17(_this), "handleSelectChange", function(_ref7) {
      var value = _ref7.target.value;
      _this.props.refine(value === "ais__see__all__option" ? "" : value);
    });
    return _this;
  }
  _createClass17(MenuSelect2, [{
    key: "selectedValue",
    get: function get() {
      var _ref23 = find2(this.props.items, function(item) {
        return item.isRefined === true;
      }) || {
        value: "ais__see__all__option"
      }, value = _ref23.value;
      return value;
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props, id = _this$props.id, items4 = _this$props.items, canRefine = _this$props.canRefine, translate = _this$props.translate, className = _this$props.className;
      return import_react29.default.createElement("div", {
        className: (0, import_classnames12.default)(cx13("", !canRefine && "-noRefinement"), className)
      }, import_react29.default.createElement("select", {
        id,
        value: this.selectedValue,
        onChange: this.handleSelectChange,
        className: cx13("select")
      }, import_react29.default.createElement("option", {
        value: "ais__see__all__option",
        className: cx13("option")
      }, translate("seeAllOption")), items4.map(function(item) {
        return import_react29.default.createElement("option", {
          key: item.value,
          value: item.value,
          className: cx13("option")
        }, item.label, " (", item.count, ")");
      })));
    }
  }]);
  return MenuSelect2;
}(import_react29.Component);
_defineProperty39(MenuSelect, "propTypes", {
  id: import_prop_types33.default.string,
  items: import_prop_types33.default.arrayOf(import_prop_types33.default.shape({
    label: import_prop_types33.default.string.isRequired,
    value: import_prop_types33.default.string.isRequired,
    count: import_prop_types33.default.oneOfType([import_prop_types33.default.number.isRequired, import_prop_types33.default.string.isRequired]),
    isRefined: import_prop_types33.default.bool.isRequired
  })).isRequired,
  canRefine: import_prop_types33.default.bool.isRequired,
  refine: import_prop_types33.default.func.isRequired,
  translate: import_prop_types33.default.func.isRequired,
  className: import_prop_types33.default.string
});
_defineProperty39(MenuSelect, "defaultProps", {
  className: ""
});
var MenuSelect_default = translatable({
  seeAllOption: "See all"
})(MenuSelect);

// ../node_modules/react-instantsearch-dom/dist/es/widgets/MenuSelect.js
var MenuSelectWidget = function MenuSelectWidget2(props) {
  return import_react30.default.createElement(PanelCallbackHandler_default, props, import_react30.default.createElement(MenuSelect_default, props));
};
var MenuSelect_default2 = connectMenu_default(MenuSelectWidget, {
  $$widgetType: "ais.menuSelect"
});

// ../node_modules/react-instantsearch-dom/dist/es/widgets/NumericMenu.js
var import_react32 = __toESM(require_react());

// ../node_modules/react-instantsearch-dom/dist/es/components/NumericMenu.js
var import_react31 = __toESM(require_react());
var import_prop_types34 = __toESM(require_prop_types());
function _typeof43(obj) {
  "@babel/helpers - typeof";
  return _typeof43 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof43(obj);
}
function ownKeys15(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread15(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys15(Object(source), true).forEach(function(key) {
      _defineProperty40(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys15(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _classCallCheck18(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties18(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey41(descriptor.key), descriptor);
  }
}
function _createClass18(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties18(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties18(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", { writable: false });
  return Constructor;
}
function _inherits18(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  Object.defineProperty(subClass, "prototype", { writable: false });
  if (superClass)
    _setPrototypeOf18(subClass, superClass);
}
function _setPrototypeOf18(o, p) {
  _setPrototypeOf18 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf28(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf18(o, p);
}
function _createSuper18(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct18();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf18(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf18(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn18(this, result);
  };
}
function _possibleConstructorReturn18(self, call) {
  if (call && (_typeof43(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized18(self);
}
function _assertThisInitialized18(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct18() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf18(o) {
  _getPrototypeOf18 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf28(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf18(o);
}
function _defineProperty40(obj, key, value) {
  key = _toPropertyKey41(key);
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey41(arg) {
  var key = _toPrimitive41(arg, "string");
  return _typeof43(key) === "symbol" ? key : String(key);
}
function _toPrimitive41(input, hint) {
  if (_typeof43(input) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof43(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
var cx14 = createClassNames("NumericMenu");
var NumericMenu = function(_Component) {
  _inherits18(NumericMenu2, _Component);
  var _super = _createSuper18(NumericMenu2);
  function NumericMenu2() {
    var _this;
    _classCallCheck18(this, NumericMenu2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty40(_assertThisInitialized18(_this), "renderItem", function(item) {
      var _this$props = _this.props, refine19 = _this$props.refine, translate = _this$props.translate;
      return import_react31.default.createElement("label", {
        className: cx14("label")
      }, import_react31.default.createElement("input", {
        className: cx14("radio"),
        type: "radio",
        checked: item.isRefined,
        disabled: item.noRefinement,
        onChange: function onChange() {
          return refine19(item.value);
        }
      }), import_react31.default.createElement("span", {
        className: cx14("labelText")
      }, item.value === "" ? translate("all") : item.label));
    });
    return _this;
  }
  _createClass18(NumericMenu2, [{
    key: "render",
    value: function render() {
      var _this$props2 = this.props, items4 = _this$props2.items, canRefine = _this$props2.canRefine, className = _this$props2.className;
      return import_react31.default.createElement(List_default, {
        renderItem: this.renderItem,
        showMore: false,
        canRefine,
        cx: cx14,
        items: items4.map(function(item) {
          return _objectSpread15(_objectSpread15({}, item), {}, {
            key: item.value
          });
        }),
        className
      });
    }
  }]);
  return NumericMenu2;
}(import_react31.Component);
_defineProperty40(NumericMenu, "propTypes", {
  items: import_prop_types34.default.arrayOf(import_prop_types34.default.shape({
    label: import_prop_types34.default.node.isRequired,
    value: import_prop_types34.default.string.isRequired,
    isRefined: import_prop_types34.default.bool.isRequired,
    noRefinement: import_prop_types34.default.bool.isRequired
  })).isRequired,
  canRefine: import_prop_types34.default.bool.isRequired,
  refine: import_prop_types34.default.func.isRequired,
  translate: import_prop_types34.default.func.isRequired,
  className: import_prop_types34.default.string
});
_defineProperty40(NumericMenu, "defaultProps", {
  className: ""
});
var NumericMenu_default = translatable({
  all: "All"
})(NumericMenu);

// ../node_modules/react-instantsearch-dom/dist/es/widgets/NumericMenu.js
var NumericMenuWidget = function NumericMenuWidget2(props) {
  return import_react32.default.createElement(PanelCallbackHandler_default, props, import_react32.default.createElement(NumericMenu_default, props));
};
var NumericMenu_default2 = connectNumericMenu_default(NumericMenuWidget, {
  $$widgetType: "ais.numericMenu"
});

// ../node_modules/react-instantsearch-dom/dist/es/widgets/Pagination.js
var import_react35 = __toESM(require_react());

// ../node_modules/react-instantsearch-dom/dist/es/components/Pagination.js
var import_react34 = __toESM(require_react());
var import_prop_types36 = __toESM(require_prop_types());
var import_classnames13 = __toESM(require_classnames());

// ../node_modules/react-instantsearch-dom/dist/es/components/LinkList.js
var import_react33 = __toESM(require_react());
var import_prop_types35 = __toESM(require_prop_types());
function _typeof44(obj) {
  "@babel/helpers - typeof";
  return _typeof44 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof44(obj);
}
function _classCallCheck19(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties19(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey42(descriptor.key), descriptor);
  }
}
function _createClass19(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties19(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties19(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", { writable: false });
  return Constructor;
}
function _inherits19(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  Object.defineProperty(subClass, "prototype", { writable: false });
  if (superClass)
    _setPrototypeOf19(subClass, superClass);
}
function _setPrototypeOf19(o, p) {
  _setPrototypeOf19 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf28(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf19(o, p);
}
function _createSuper19(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct19();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf19(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf19(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn19(this, result);
  };
}
function _possibleConstructorReturn19(self, call) {
  if (call && (_typeof44(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized19(self);
}
function _assertThisInitialized19(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct19() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf19(o) {
  _getPrototypeOf19 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf28(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf19(o);
}
function _defineProperty41(obj, key, value) {
  key = _toPropertyKey42(key);
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey42(arg) {
  var key = _toPrimitive42(arg, "string");
  return _typeof44(key) === "symbol" ? key : String(key);
}
function _toPrimitive42(input, hint) {
  if (_typeof44(input) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof44(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
var LinkList = function(_Component) {
  _inherits19(LinkList2, _Component);
  var _super = _createSuper19(LinkList2);
  function LinkList2() {
    _classCallCheck19(this, LinkList2);
    return _super.apply(this, arguments);
  }
  _createClass19(LinkList2, [{
    key: "render",
    value: function render() {
      var _this$props = this.props, cx30 = _this$props.cx, createURL = _this$props.createURL, items4 = _this$props.items, onSelect = _this$props.onSelect, canRefine = _this$props.canRefine;
      return import_react33.default.createElement("ul", {
        className: cx30("list", !canRefine && "list--noRefinement")
      }, items4.map(function(item) {
        return import_react33.default.createElement("li", {
          key: item.key === void 0 ? item.value : item.key,
          className: cx30("item", item.selected && !item.disabled && "item--selected", item.disabled && "item--disabled", item.modifier)
        }, item.disabled ? import_react33.default.createElement("span", {
          className: cx30("link")
        }, item.label === void 0 ? item.value : item.label) : import_react33.default.createElement(Link, {
          className: cx30("link", item.selected && "link--selected"),
          "aria-label": item.ariaLabel,
          href: createURL(item.value),
          onClick: function onClick() {
            return onSelect(item.value);
          }
        }, item.label === void 0 ? item.value : item.label));
      }));
    }
  }]);
  return LinkList2;
}(import_react33.Component);
_defineProperty41(LinkList, "propTypes", {
  cx: import_prop_types35.default.func.isRequired,
  createURL: import_prop_types35.default.func.isRequired,
  items: import_prop_types35.default.arrayOf(import_prop_types35.default.shape({
    value: import_prop_types35.default.oneOfType([import_prop_types35.default.string, import_prop_types35.default.number, import_prop_types35.default.object]).isRequired,
    key: import_prop_types35.default.oneOfType([import_prop_types35.default.string, import_prop_types35.default.number]),
    label: import_prop_types35.default.node,
    modifier: import_prop_types35.default.string,
    ariaLabel: import_prop_types35.default.string,
    disabled: import_prop_types35.default.bool
  })),
  onSelect: import_prop_types35.default.func.isRequired,
  canRefine: import_prop_types35.default.bool.isRequired
});

// ../node_modules/react-instantsearch-dom/dist/es/components/Pagination.js
var _excluded6 = ["listComponent", "nbPages", "totalPages", "currentRefinement", "padding", "showFirst", "showPrevious", "showNext", "showLast", "refine", "createURL", "canRefine", "translate", "className"];
function _typeof45(obj) {
  "@babel/helpers - typeof";
  return _typeof45 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof45(obj);
}
function _extends7() {
  _extends7 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends7.apply(this, arguments);
}
function _objectWithoutProperties6(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose6(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose6(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function _classCallCheck20(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties20(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey43(descriptor.key), descriptor);
  }
}
function _createClass20(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties20(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties20(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", { writable: false });
  return Constructor;
}
function _inherits20(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  Object.defineProperty(subClass, "prototype", { writable: false });
  if (superClass)
    _setPrototypeOf20(subClass, superClass);
}
function _setPrototypeOf20(o, p) {
  _setPrototypeOf20 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf28(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf20(o, p);
}
function _createSuper20(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct20();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf20(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf20(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn20(this, result);
  };
}
function _possibleConstructorReturn20(self, call) {
  if (call && (_typeof45(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized20(self);
}
function _assertThisInitialized20(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct20() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf20(o) {
  _getPrototypeOf20 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf28(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf20(o);
}
function _defineProperty42(obj, key, value) {
  key = _toPropertyKey43(key);
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey43(arg) {
  var key = _toPrimitive43(arg, "string");
  return _typeof45(key) === "symbol" ? key : String(key);
}
function _toPrimitive43(input, hint) {
  if (_typeof45(input) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof45(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
var cx15 = createClassNames("Pagination");
function calculateSize(padding, maxPages) {
  return Math.min(2 * padding + 1, maxPages);
}
function calculatePaddingLeft(currentPage, padding, maxPages, size) {
  if (currentPage <= padding) {
    return currentPage;
  }
  if (currentPage >= maxPages - padding) {
    return size - (maxPages - currentPage);
  }
  return padding + 1;
}
function getPages(currentPage, maxPages, padding) {
  var size = calculateSize(padding, maxPages);
  if (size === maxPages)
    return range({
      start: 1,
      end: maxPages + 1
    });
  var paddingLeft = calculatePaddingLeft(currentPage, padding, maxPages, size);
  var paddingRight = size - paddingLeft;
  var first = currentPage - paddingLeft;
  var last = currentPage + paddingRight;
  return range({
    start: first + 1,
    end: last + 1
  });
}
var Pagination = function(_Component) {
  _inherits20(Pagination2, _Component);
  var _super = _createSuper20(Pagination2);
  function Pagination2() {
    _classCallCheck20(this, Pagination2);
    return _super.apply(this, arguments);
  }
  _createClass20(Pagination2, [{
    key: "getItem",
    value: function getItem(modifier, translationKey, value) {
      var _this$props = this.props, nbPages = _this$props.nbPages, totalPages = _this$props.totalPages, translate = _this$props.translate;
      return {
        key: "".concat(modifier, ".").concat(value),
        modifier,
        disabled: value < 1 || value >= Math.min(totalPages, nbPages),
        label: translate(translationKey, value),
        value,
        ariaLabel: translate("aria".concat(capitalize(translationKey)), value)
      };
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props, ListComponent = _this$props2.listComponent, nbPages = _this$props2.nbPages, totalPages = _this$props2.totalPages, currentRefinement = _this$props2.currentRefinement, padding = _this$props2.padding, showFirst = _this$props2.showFirst, showPrevious = _this$props2.showPrevious, showNext = _this$props2.showNext, showLast = _this$props2.showLast, refine19 = _this$props2.refine, createURL = _this$props2.createURL, canRefine = _this$props2.canRefine, translate = _this$props2.translate, className = _this$props2.className, otherProps = _objectWithoutProperties6(_this$props2, _excluded6);
      var maxPages = Math.min(nbPages, totalPages);
      var lastPage = maxPages;
      var items4 = [];
      if (showFirst) {
        items4.push({
          key: "first",
          modifier: "item--firstPage",
          disabled: currentRefinement === 1,
          label: translate("first"),
          value: 1,
          ariaLabel: translate("ariaFirst")
        });
      }
      if (showPrevious) {
        items4.push({
          key: "previous",
          modifier: "item--previousPage",
          disabled: currentRefinement === 1,
          label: translate("previous"),
          value: currentRefinement - 1,
          ariaLabel: translate("ariaPrevious")
        });
      }
      items4 = items4.concat(getPages(currentRefinement, maxPages, padding).map(function(value) {
        return {
          key: value,
          modifier: "item--page",
          label: translate("page", value),
          value,
          selected: value === currentRefinement,
          ariaLabel: translate("ariaPage", value)
        };
      }));
      if (showNext) {
        items4.push({
          key: "next",
          modifier: "item--nextPage",
          disabled: currentRefinement === lastPage || lastPage <= 1,
          label: translate("next"),
          value: currentRefinement + 1,
          ariaLabel: translate("ariaNext")
        });
      }
      if (showLast) {
        items4.push({
          key: "last",
          modifier: "item--lastPage",
          disabled: currentRefinement === lastPage || lastPage <= 1,
          label: translate("last"),
          value: lastPage,
          ariaLabel: translate("ariaLast")
        });
      }
      return import_react34.default.createElement("div", {
        className: (0, import_classnames13.default)(cx15("", !canRefine && "-noRefinement"), className)
      }, import_react34.default.createElement(ListComponent, _extends7({}, otherProps, {
        cx: cx15,
        items: items4,
        onSelect: refine19,
        createURL,
        canRefine
      })));
    }
  }]);
  return Pagination2;
}(import_react34.Component);
_defineProperty42(Pagination, "propTypes", {
  nbPages: import_prop_types36.default.number.isRequired,
  currentRefinement: import_prop_types36.default.number.isRequired,
  refine: import_prop_types36.default.func.isRequired,
  createURL: import_prop_types36.default.func.isRequired,
  canRefine: import_prop_types36.default.bool.isRequired,
  translate: import_prop_types36.default.func.isRequired,
  listComponent: import_prop_types36.default.func,
  showFirst: import_prop_types36.default.bool,
  showPrevious: import_prop_types36.default.bool,
  showNext: import_prop_types36.default.bool,
  showLast: import_prop_types36.default.bool,
  padding: import_prop_types36.default.number,
  totalPages: import_prop_types36.default.number,
  className: import_prop_types36.default.string
});
_defineProperty42(Pagination, "defaultProps", {
  listComponent: LinkList,
  showFirst: true,
  showPrevious: true,
  showNext: true,
  showLast: false,
  padding: 3,
  totalPages: Infinity,
  className: ""
});
var Pagination_default = translatable({
  previous: "‹",
  next: "›",
  first: "«",
  last: "»",
  page: function page(currentRefinement) {
    return currentRefinement.toString();
  },
  ariaPrevious: "Previous page",
  ariaNext: "Next page",
  ariaFirst: "First page",
  ariaLast: "Last page",
  ariaPage: function ariaPage(currentRefinement) {
    return "Page ".concat(currentRefinement.toString());
  }
})(Pagination);

// ../node_modules/react-instantsearch-dom/dist/es/widgets/Pagination.js
var PaginationWidget = function PaginationWidget2(props) {
  return import_react35.default.createElement(PanelCallbackHandler_default, props, import_react35.default.createElement(Pagination_default, props));
};
var Pagination_default2 = connectPagination_default(PaginationWidget, {
  $$widgetType: "ais.pagination"
});

// ../node_modules/react-instantsearch-dom/dist/es/widgets/Panel.js
var Panel_default2 = Panel_default;

// ../node_modules/react-instantsearch-dom/dist/es/components/PoweredBy.js
var import_react36 = __toESM(require_react());
var import_prop_types37 = __toESM(require_prop_types());
var import_classnames14 = __toESM(require_classnames());
function _typeof46(obj) {
  "@babel/helpers - typeof";
  return _typeof46 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof46(obj);
}
function _classCallCheck21(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties21(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey44(descriptor.key), descriptor);
  }
}
function _createClass21(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties21(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties21(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", { writable: false });
  return Constructor;
}
function _inherits21(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  Object.defineProperty(subClass, "prototype", { writable: false });
  if (superClass)
    _setPrototypeOf21(subClass, superClass);
}
function _setPrototypeOf21(o, p) {
  _setPrototypeOf21 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf28(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf21(o, p);
}
function _createSuper21(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct21();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf21(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf21(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn21(this, result);
  };
}
function _possibleConstructorReturn21(self, call) {
  if (call && (_typeof46(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized21(self);
}
function _assertThisInitialized21(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct21() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf21(o) {
  _getPrototypeOf21 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf28(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf21(o);
}
function _defineProperty43(obj, key, value) {
  key = _toPropertyKey44(key);
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey44(arg) {
  var key = _toPrimitive44(arg, "string");
  return _typeof46(key) === "symbol" ? key : String(key);
}
function _toPrimitive44(input, hint) {
  if (_typeof46(input) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof46(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
var cx16 = createClassNames("PoweredBy");
var _ref = import_react36.default.createElement("path", {
  fill: "#003DFF",
  d: "M249.5 64.2V1.4c0-.9-.7-1.5-1.6-1.4L236.2 2a1.4 1.4 0 0 0-1.2 1.3V67c0 3 0 21.6 22.4 22.3a1.4 1.4 0 0 0 1.5-1.4v-9.5c0-.7-.6-1.3-1.2-1.4-8.2-.9-8.2-11-8.2-12.7ZM443.5 24.4h-11.8c-.8 0-1.4.6-1.4 1.4v62c0 .8.6 1.4 1.4 1.4h11.8c.8 0 1.4-.6 1.4-1.4v-62c0-.8-.6-1.4-1.4-1.4ZM431.7 16.6h11.8c.8 0 1.4-.6 1.4-1.3v-14c0-.8-.7-1.4-1.6-1.3L431.5 2a1.4 1.4 0 0 0-1.2 1.3v12c0 .8.6 1.4 1.4 1.4Zm-20.5 47.6V1.4c0-.9-.7-1.5-1.5-1.4L397.9 2a1.4 1.4 0 0 0-1.2 1.3V67c0 3 0 21.6 22.4 22.3a1.4 1.4 0 0 0 1.5-1.4v-9.5c0-.7-.5-1.3-1.2-1.4-8.2-.9-8.2-11-8.2-12.7Zm-30.7-31c-2.6-2.8-5.8-5-9.6-6.5a31.7 31.7 0 0 0-12-2.3c-4.5 0-8.5.7-12.2 2.3A27.9 27.9 0 0 0 331 43.5a39.6 39.6 0 0 0 0 26.3c1.5 4 3.6 7.5 6.2 10.3 2.6 2.9 5.8 5 9.5 6.7a38 38 0 0 0 12.2 2.4c2.8 0 8.6-.9 12.3-2.4a27 27 0 0 0 9.5-6.7 35.1 35.1 0 0 0 8.3-23c0-4.9-.8-9.6-2.4-13.6-1.5-4-3.5-7.4-6.1-10.2ZM370 71.5a13.1 13.1 0 0 1-11.2 5.6 13 13 0 0 1-11.2-5.6c-2.7-3.6-4-7.9-4-14.2 0-6.3 1.3-11.5 4-15.1a13 13 0 0 1 11.1-5.5 13 13 0 0 1 11.3 5.5c2.6 3.6 4 8.8 4 15 0 6.4-1.3 10.6-4 14.3Zm-161.6-47H197a32 32 0 0 0-27 15 33.8 33.8 0 0 0 8.9 45.9 18.8 18.8 0 0 0 11.2 3.1H191.2l.6-.2h.2a21 21 0 0 0 16.5-14.6V87c0 .8.6 1.4 1.4 1.4h11.7c.8 0 1.4-.6 1.4-1.4V25.8c0-.8-.6-1.4-1.4-1.4h-13Zm0 48.3a17.8 17.8 0 0 1-10.4 3.5h-.2a12.5 12.5 0 0 1-.7 0A18.4 18.4 0 0 1 180.4 51c2.7-6.8 9-11.6 16.6-11.6h11.5v33.3Zm289-48.3H486a32 32 0 0 0-27 15 33.8 33.8 0 0 0 8.8 45.9 18.8 18.8 0 0 0 11.3 3.1h1.1l.6-.2h.2a21 21 0 0 0 16.5-14.6V87c0 .8.6 1.4 1.4 1.4h11.7c.8 0 1.4-.6 1.4-1.4V25.8c0-.8-.6-1.4-1.4-1.4h-13.1Zm0 48.3a17.8 17.8 0 0 1-10.5 3.5h-.9A18.4 18.4 0 0 1 469.4 51c2.6-6.8 9-11.6 16.6-11.6h11.5v33.3ZM306.3 24.4h-11.5a32 32 0 0 0-27 15 33.7 33.7 0 0 0-5.1 14.6 34.6 34.6 0 0 0 0 7.6c1 8.9 5.4 16.7 11.8 22a19.5 19.5 0 0 0 2.2 1.7 18.8 18.8 0 0 0 21.6-.6c3.8-2.7 6.7-6.7 8-11.1V87.9c0 5-1.3 8.9-4 11.5-2.7 2.6-7.3 3.9-13.6 3.9-2.6 0-6.7-.2-10.9-.6a1.4 1.4 0 0 0-1.4 1l-3 10a1.4 1.4 0 0 0 1.1 1.8c5 .7 10 1 12.8 1 11.4 0 19.8-2.4 25.3-7.4 5-4.6 7.8-11.4 8.2-20.7V25.8c0-.8-.6-1.4-1.3-1.4h-13.2Zm0 15s.2 32.4 0 33.4a17.5 17.5 0 0 1-10 3.4h-.2a13.6 13.6 0 0 1-1.7 0A18.7 18.7 0 0 1 278.3 51c2.6-6.8 9-11.6 16.5-11.6h11.5ZM58.2 0A58.3 58.3 0 1 0 86 109.5c.9-.5 1-1.6.3-2.2l-5.5-4.9a3.8 3.8 0 0 0-4-.6A47 47 0 0 1 11 57.5 47.3 47.3 0 0 1 58.2 11h47.3v84L78.7 71.2a2 2 0 0 0-3 .3 22 22 0 1 1 4.4-15.2 4 4 0 0 0 1.3 2.6l7 6.2c.8.7 2 .3 2.3-.8a33 33 0 0 0-30.4-39 33 33 0 0 0-35 32 33.3 33.3 0 0 0 32.2 33.9 32.8 32.8 0 0 0 20-6.3l35.1 31c1.5 1.4 3.9.3 3.9-1.7V2.2a2.2 2.2 0 0 0-2.2-2.2h-56Z"
});
var AlgoliaLogo = function AlgoliaLogo2() {
  return import_react36.default.createElement("svg", {
    viewBox: "0 0 512 117",
    width: "118",
    height: "27",
    className: cx16("logo")
  }, _ref);
};
var _ref2 = import_react36.default.createElement(AlgoliaLogo, null);
var PoweredBy = function(_Component) {
  _inherits21(PoweredBy2, _Component);
  var _super = _createSuper21(PoweredBy2);
  function PoweredBy2() {
    _classCallCheck21(this, PoweredBy2);
    return _super.apply(this, arguments);
  }
  _createClass21(PoweredBy2, [{
    key: "render",
    value: function render() {
      var _this$props = this.props, url = _this$props.url, translate = _this$props.translate, className = _this$props.className;
      return import_react36.default.createElement("div", {
        className: (0, import_classnames14.default)(cx16(""), className)
      }, import_react36.default.createElement("span", {
        className: cx16("text")
      }, translate("searchBy")), " ", import_react36.default.createElement("a", {
        href: url,
        target: "_blank",
        className: cx16("link"),
        "aria-label": "Algolia",
        rel: "noopener noreferrer"
      }, _ref2));
    }
  }]);
  return PoweredBy2;
}(import_react36.Component);
_defineProperty43(PoweredBy, "propTypes", {
  url: import_prop_types37.default.string.isRequired,
  translate: import_prop_types37.default.func.isRequired,
  className: import_prop_types37.default.string
});
var PoweredBy_default = translatable({
  searchBy: "Search by"
})(PoweredBy);

// ../node_modules/react-instantsearch-dom/dist/es/widgets/PoweredBy.js
var PoweredBy_default2 = connectPoweredBy_default(PoweredBy_default, {
  $$widgetType: "ais.poweredBy"
});

// ../node_modules/react-instantsearch-dom/dist/es/widgets/RangeInput.js
var import_react38 = __toESM(require_react());

// ../node_modules/react-instantsearch-dom/dist/es/components/RangeInput.js
var import_react37 = __toESM(require_react());
var import_prop_types38 = __toESM(require_prop_types());
var import_classnames15 = __toESM(require_classnames());
function _typeof47(obj) {
  "@babel/helpers - typeof";
  return _typeof47 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof47(obj);
}
function _classCallCheck22(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties22(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey45(descriptor.key), descriptor);
  }
}
function _createClass22(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties22(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties22(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", { writable: false });
  return Constructor;
}
function _inherits22(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  Object.defineProperty(subClass, "prototype", { writable: false });
  if (superClass)
    _setPrototypeOf22(subClass, superClass);
}
function _setPrototypeOf22(o, p) {
  _setPrototypeOf22 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf28(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf22(o, p);
}
function _createSuper22(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct22();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf22(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf22(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn22(this, result);
  };
}
function _possibleConstructorReturn22(self, call) {
  if (call && (_typeof47(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized22(self);
}
function _assertThisInitialized22(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct22() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf22(o) {
  _getPrototypeOf22 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf28(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf22(o);
}
function _defineProperty44(obj, key, value) {
  key = _toPropertyKey45(key);
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey45(arg) {
  var key = _toPrimitive45(arg, "string");
  return _typeof47(key) === "symbol" ? key : String(key);
}
function _toPrimitive45(input, hint) {
  if (_typeof47(input) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof47(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
var cx17 = createClassNames("RangeInput");
var RawRangeInput = function(_Component) {
  _inherits22(RawRangeInput2, _Component);
  var _super = _createSuper22(RawRangeInput2);
  function RawRangeInput2(props) {
    var _this;
    _classCallCheck22(this, RawRangeInput2);
    _this = _super.call(this, props);
    _defineProperty44(_assertThisInitialized22(_this), "onSubmit", function(e) {
      e.preventDefault();
      _this.props.refine({
        min: _this.state.from,
        max: _this.state.to
      });
    });
    _this.state = _this.normalizeStateForRendering(props);
    return _this;
  }
  _createClass22(RawRangeInput2, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (this.props.canRefine && (prevProps.currentRefinement.min !== this.props.currentRefinement.min || prevProps.currentRefinement.max !== this.props.currentRefinement.max)) {
        this.setState(this.normalizeStateForRendering(this.props));
      }
    }
  }, {
    key: "normalizeStateForRendering",
    value: function normalizeStateForRendering(props) {
      var canRefine = props.canRefine, rangeMin = props.min, rangeMax = props.max;
      var _props$currentRefinem = props.currentRefinement, valueMin = _props$currentRefinem.min, valueMax = _props$currentRefinem.max;
      return {
        from: canRefine && valueMin !== void 0 && valueMin !== rangeMin ? valueMin : "",
        to: canRefine && valueMax !== void 0 && valueMax !== rangeMax ? valueMax : ""
      };
    }
  }, {
    key: "normalizeRangeForRendering",
    value: function normalizeRangeForRendering(_ref7) {
      var canRefine = _ref7.canRefine, min = _ref7.min, max = _ref7.max;
      var hasMin = min !== void 0;
      var hasMax = max !== void 0;
      return {
        min: canRefine && hasMin && hasMax ? min : "",
        max: canRefine && hasMin && hasMax ? max : ""
      };
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;
      var _this$state = this.state, from = _this$state.from, to = _this$state.to;
      var _this$props = this.props, precision = _this$props.precision, translate = _this$props.translate, canRefine = _this$props.canRefine, className = _this$props.className;
      var _this$normalizeRangeF = this.normalizeRangeForRendering(this.props), min = _this$normalizeRangeF.min, max = _this$normalizeRangeF.max;
      var step = 1 / Math.pow(10, precision);
      return import_react37.default.createElement("div", {
        className: (0, import_classnames15.default)(cx17("", !canRefine && "-noRefinement"), className)
      }, import_react37.default.createElement("form", {
        className: cx17("form"),
        onSubmit: this.onSubmit
      }, import_react37.default.createElement("input", {
        className: cx17("input", "input--min"),
        type: "number",
        min,
        max,
        value: from,
        step,
        placeholder: min,
        disabled: !canRefine,
        onChange: function onChange(e) {
          return _this2.setState({
            from: e.currentTarget.value
          });
        }
      }), import_react37.default.createElement("span", {
        className: cx17("separator")
      }, translate("separator")), import_react37.default.createElement("input", {
        className: cx17("input", "input--max"),
        type: "number",
        min,
        max,
        value: to,
        step,
        placeholder: max,
        disabled: !canRefine,
        onChange: function onChange(e) {
          return _this2.setState({
            to: e.currentTarget.value
          });
        }
      }), import_react37.default.createElement("button", {
        className: cx17("submit"),
        type: "submit"
      }, translate("submit"))));
    }
  }]);
  return RawRangeInput2;
}(import_react37.Component);
_defineProperty44(RawRangeInput, "propTypes", {
  canRefine: import_prop_types38.default.bool.isRequired,
  precision: import_prop_types38.default.number.isRequired,
  translate: import_prop_types38.default.func.isRequired,
  refine: import_prop_types38.default.func.isRequired,
  min: import_prop_types38.default.number,
  max: import_prop_types38.default.number,
  currentRefinement: import_prop_types38.default.shape({
    min: import_prop_types38.default.number,
    max: import_prop_types38.default.number
  }),
  className: import_prop_types38.default.string
});
_defineProperty44(RawRangeInput, "defaultProps", {
  currentRefinement: {},
  className: ""
});
var RangeInput_default = translatable({
  submit: "ok",
  separator: "to"
})(RawRangeInput);

// ../node_modules/react-instantsearch-dom/dist/es/widgets/RangeInput.js
var RangeInputWidget = function RangeInputWidget2(props) {
  return import_react38.default.createElement(PanelCallbackHandler_default, props, import_react38.default.createElement(RangeInput_default, props));
};
var RangeInput_default2 = connectRange_default(RangeInputWidget, {
  $$widgetType: "ais.rangeInput"
});

// ../node_modules/react-instantsearch-dom/dist/es/widgets/RangeSlider.js
var import_react39 = __toESM(require_react());
var _ref3 = import_react39.default.createElement("div", null, "We do not provide any Slider, see the documentation to learn how to connect one easily:", import_react39.default.createElement("a", {
  target: "_blank",
  rel: "noopener noreferrer",
  href: "https://www.algolia.com/doc/api-reference/widgets/range-slider/react/"
}, "https://www.algolia.com/doc/api-reference/widgets/range-slider/react/"));
var RangeSlider_default = function() {
  return _ref3;
};

// ../node_modules/react-instantsearch-dom/dist/es/widgets/RatingMenu.js
var import_react41 = __toESM(require_react());

// ../node_modules/react-instantsearch-dom/dist/es/components/RatingMenu.js
var import_react40 = __toESM(require_react());
var import_prop_types39 = __toESM(require_prop_types());
var import_classnames16 = __toESM(require_classnames());
function _typeof48(obj) {
  "@babel/helpers - typeof";
  return _typeof48 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof48(obj);
}
function ownKeys16(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread16(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys16(Object(source), true).forEach(function(key) {
      _defineProperty45(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys16(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _extends8() {
  _extends8 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends8.apply(this, arguments);
}
function _classCallCheck23(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties23(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey46(descriptor.key), descriptor);
  }
}
function _createClass23(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties23(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties23(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", { writable: false });
  return Constructor;
}
function _inherits23(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  Object.defineProperty(subClass, "prototype", { writable: false });
  if (superClass)
    _setPrototypeOf23(subClass, superClass);
}
function _setPrototypeOf23(o, p) {
  _setPrototypeOf23 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf28(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf23(o, p);
}
function _createSuper23(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct23();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf23(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf23(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn23(this, result);
  };
}
function _possibleConstructorReturn23(self, call) {
  if (call && (_typeof48(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized23(self);
}
function _assertThisInitialized23(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct23() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf23(o) {
  _getPrototypeOf23 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf28(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf23(o);
}
function _defineProperty45(obj, key, value) {
  key = _toPropertyKey46(key);
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey46(arg) {
  var key = _toPrimitive46(arg, "string");
  return _typeof48(key) === "symbol" ? key : String(key);
}
function _toPrimitive46(input, hint) {
  if (_typeof48(input) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof48(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
var cx18 = createClassNames("RatingMenu");
var _ref22 = import_react40.default.createElement("path", {
  d: "M12 .288l2.833 8.718h9.167l-7.417 5.389 2.833 8.718-7.416-5.388-7.417 5.388 2.833-8.718-7.416-5.389h9.167z"
});
var _ref32 = import_react40.default.createElement("path", {
  d: "M12 6.76l1.379 4.246h4.465l-3.612 2.625 1.379 4.246-3.611-2.625-3.612 2.625 1.379-4.246-3.612-2.625h4.465l1.38-4.246zm0-6.472l-2.833 8.718h-9.167l7.416 5.389-2.833 8.718 7.417-5.388 7.416 5.388-2.833-8.718 7.417-5.389h-9.167l-2.833-8.718z"
});
var RatingMenu = function(_Component) {
  _inherits23(RatingMenu2, _Component);
  var _super = _createSuper23(RatingMenu2);
  function RatingMenu2() {
    _classCallCheck23(this, RatingMenu2);
    return _super.apply(this, arguments);
  }
  _createClass23(RatingMenu2, [{
    key: "onClick",
    value: function onClick(min, max, e) {
      e.preventDefault();
      e.stopPropagation();
      if (min === this.props.currentRefinement.min && max === this.props.currentRefinement.max) {
        this.props.refine({
          min: this.props.min,
          max: this.props.max
        });
      } else {
        this.props.refine({
          min,
          max
        });
      }
    }
  }, {
    key: "buildItem",
    value: function buildItem(_ref7) {
      var max = _ref7.max, lowerBound = _ref7.lowerBound, count = _ref7.count, translate = _ref7.translate, createURL = _ref7.createURL, isLastSelectableItem = _ref7.isLastSelectableItem;
      var disabled = !count;
      var isCurrentMinLower = this.props.currentRefinement.min < lowerBound;
      var selected = isLastSelectableItem && isCurrentMinLower || !disabled && lowerBound === this.props.currentRefinement.min && max === this.props.currentRefinement.max;
      var icons = [];
      var rating = 0;
      for (var icon = 0; icon < max; icon++) {
        if (icon < lowerBound) {
          rating++;
        }
        icons.push([import_react40.default.createElement("svg", {
          key: icon,
          className: cx18("starIcon", icon >= lowerBound ? "starIcon--empty" : "starIcon--full"),
          "aria-hidden": "true",
          width: "24",
          height: "24"
        }, import_react40.default.createElement("use", {
          xlinkHref: "#".concat(cx18(icon >= lowerBound ? "starEmptySymbol" : "starSymbol"))
        })), " "]);
      }
      var isLastAndSelect = isLastSelectableItem && selected;
      var onClickHandler = disabled || isLastAndSelect ? {} : {
        href: createURL({
          min: lowerBound,
          max
        }),
        onClick: this.onClick.bind(this, lowerBound, max)
      };
      return import_react40.default.createElement("li", {
        key: lowerBound,
        className: cx18("item", selected && "item--selected", disabled && "item--disabled")
      }, import_react40.default.createElement("a", _extends8({
        className: cx18("link"),
        "aria-label": "".concat(rating).concat(translate("ratingLabel"))
      }, onClickHandler), icons, import_react40.default.createElement("span", {
        className: cx18("label"),
        "aria-hidden": "true"
      }, translate("ratingLabel")), " ", import_react40.default.createElement("span", {
        className: cx18("count")
      }, count)));
    }
  }, {
    key: "render",
    value: function render() {
      var _this = this;
      var _this$props = this.props, min = _this$props.min, max = _this$props.max, translate = _this$props.translate, count = _this$props.count, createURL = _this$props.createURL, canRefine = _this$props.canRefine, className = _this$props.className;
      var limitMin = min !== void 0 && min >= 0 ? min : 1;
      var limitMax = max !== void 0 && max >= 0 ? max : 0;
      var inclusiveLength = limitMax - limitMin + 1;
      var values = count.map(function(item) {
        return _objectSpread16(_objectSpread16({}, item), {}, {
          value: parseFloat(item.value)
        });
      }).filter(function(item) {
        return item.value >= limitMin && item.value <= limitMax;
      });
      var items4 = range({
        start: 0,
        end: Math.max(inclusiveLength, 0)
      }).map(function(index) {
        var element = find2(values, function(item) {
          return item.value === limitMax - index;
        });
        var placeholder = {
          value: limitMax - index,
          count: 0,
          total: 0
        };
        return element || placeholder;
      }).reduce(function(acc, item, index) {
        return acc.concat(_objectSpread16(_objectSpread16({}, item), {}, {
          total: index === 0 ? item.count : acc[index - 1].total + item.count
        }));
      }, []).map(function(item, index, arr) {
        return _this.buildItem({
          lowerBound: item.value,
          count: item.total,
          isLastSelectableItem: arr.length - 1 === index,
          max: limitMax,
          translate,
          createURL
        });
      });
      return import_react40.default.createElement("div", {
        className: (0, import_classnames16.default)(cx18("", !canRefine && "-noRefinement"), className)
      }, import_react40.default.createElement("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        style: {
          display: "none"
        }
      }, import_react40.default.createElement("symbol", {
        id: cx18("starSymbol"),
        viewBox: "0 0 24 24"
      }, _ref22), import_react40.default.createElement("symbol", {
        id: cx18("starEmptySymbol"),
        viewBox: "0 0 24 24"
      }, _ref32)), import_react40.default.createElement("ul", {
        className: cx18("list", !canRefine && "list--noRefinement")
      }, items4));
    }
  }]);
  return RatingMenu2;
}(import_react40.Component);
_defineProperty45(RatingMenu, "propTypes", {
  translate: import_prop_types39.default.func.isRequired,
  refine: import_prop_types39.default.func.isRequired,
  createURL: import_prop_types39.default.func.isRequired,
  min: import_prop_types39.default.number,
  max: import_prop_types39.default.number,
  currentRefinement: import_prop_types39.default.shape({
    min: import_prop_types39.default.number,
    max: import_prop_types39.default.number
  }),
  count: import_prop_types39.default.arrayOf(import_prop_types39.default.shape({
    value: import_prop_types39.default.string,
    count: import_prop_types39.default.number
  })),
  canRefine: import_prop_types39.default.bool.isRequired,
  className: import_prop_types39.default.string
});
_defineProperty45(RatingMenu, "defaultProps", {
  className: ""
});
var RatingMenu_default = translatable({
  ratingLabel: " & Up"
})(RatingMenu);

// ../node_modules/react-instantsearch-dom/dist/es/widgets/RatingMenu.js
var RatingMenuWidget = function RatingMenuWidget2(props) {
  return import_react41.default.createElement(PanelCallbackHandler_default, props, import_react41.default.createElement(RatingMenu_default, props));
};
var RatingMenu_default2 = connectRange_default(RatingMenuWidget, {
  $$widgetType: "ais.ratingMenu"
});

// ../node_modules/react-instantsearch-dom/dist/es/widgets/RefinementList.js
var import_react43 = __toESM(require_react());

// ../node_modules/react-instantsearch-dom/dist/es/components/RefinementList.js
var import_react42 = __toESM(require_react());
var import_prop_types40 = __toESM(require_prop_types());
function _typeof49(obj) {
  "@babel/helpers - typeof";
  return _typeof49 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof49(obj);
}
function _classCallCheck24(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties24(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey47(descriptor.key), descriptor);
  }
}
function _createClass24(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties24(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties24(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", { writable: false });
  return Constructor;
}
function _inherits24(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  Object.defineProperty(subClass, "prototype", { writable: false });
  if (superClass)
    _setPrototypeOf24(subClass, superClass);
}
function _setPrototypeOf24(o, p) {
  _setPrototypeOf24 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf28(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf24(o, p);
}
function _createSuper24(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct24();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf24(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf24(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn24(this, result);
  };
}
function _possibleConstructorReturn24(self, call) {
  if (call && (_typeof49(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized24(self);
}
function _assertThisInitialized24(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct24() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf24(o) {
  _getPrototypeOf24 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf28(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf24(o);
}
function _defineProperty46(obj, key, value) {
  key = _toPropertyKey47(key);
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey47(arg) {
  var key = _toPrimitive47(arg, "string");
  return _typeof49(key) === "symbol" ? key : String(key);
}
function _toPrimitive47(input, hint) {
  if (_typeof49(input) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof49(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
var cx19 = createClassNames("RefinementList");
var RefinementList = function(_Component) {
  _inherits24(RefinementList2, _Component);
  var _super = _createSuper24(RefinementList2);
  function RefinementList2() {
    var _this;
    _classCallCheck24(this, RefinementList2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty46(_assertThisInitialized24(_this), "state", {
      query: ""
    });
    _defineProperty46(_assertThisInitialized24(_this), "selectItem", function(item, resetQuery) {
      resetQuery();
      _this.props.refine(item.value);
    });
    _defineProperty46(_assertThisInitialized24(_this), "renderItem", function(item, resetQuery) {
      var label = _this.props.isFromSearch ? import_react42.default.createElement(Highlight_default2, {
        attribute: "label",
        hit: item
      }) : item.label;
      return import_react42.default.createElement("label", {
        className: cx19("label")
      }, import_react42.default.createElement("input", {
        className: cx19("checkbox"),
        type: "checkbox",
        checked: item.isRefined,
        onChange: function onChange() {
          return _this.selectItem(item, resetQuery);
        }
      }), import_react42.default.createElement("span", {
        className: cx19("labelText")
      }, label), " ", import_react42.default.createElement("span", {
        className: cx19("count")
      }, item.count.toLocaleString()));
    });
    return _this;
  }
  _createClass24(RefinementList2, [{
    key: "render",
    value: function render() {
      var _this$props = this.props, translate = _this$props.translate, items4 = _this$props.items, showMore4 = _this$props.showMore, limit = _this$props.limit, showMoreLimit = _this$props.showMoreLimit, isFromSearch = _this$props.isFromSearch, searchForItems = _this$props.searchForItems, searchable = _this$props.searchable, canRefine = _this$props.canRefine, className = _this$props.className;
      return import_react42.default.createElement(List_default, {
        renderItem: this.renderItem,
        selectItem: this.selectItem,
        cx: cx19,
        translate,
        items: items4,
        showMore: showMore4,
        limit,
        showMoreLimit,
        isFromSearch,
        searchForItems,
        searchable,
        canRefine,
        className,
        query: this.state.query
      });
    }
  }]);
  return RefinementList2;
}(import_react42.Component);
_defineProperty46(RefinementList, "propTypes", {
  translate: import_prop_types40.default.func.isRequired,
  refine: import_prop_types40.default.func.isRequired,
  searchForItems: import_prop_types40.default.func.isRequired,
  searchable: import_prop_types40.default.bool,
  createURL: import_prop_types40.default.func.isRequired,
  items: import_prop_types40.default.arrayOf(import_prop_types40.default.shape({
    label: import_prop_types40.default.string.isRequired,
    value: import_prop_types40.default.arrayOf(import_prop_types40.default.string).isRequired,
    count: import_prop_types40.default.number.isRequired,
    isRefined: import_prop_types40.default.bool.isRequired
  })),
  isFromSearch: import_prop_types40.default.bool.isRequired,
  canRefine: import_prop_types40.default.bool.isRequired,
  showMore: import_prop_types40.default.bool,
  limit: import_prop_types40.default.number,
  showMoreLimit: import_prop_types40.default.number,
  transformItems: import_prop_types40.default.func,
  className: import_prop_types40.default.string
});
_defineProperty46(RefinementList, "defaultProps", {
  className: ""
});
var RefinementList_default = translatable({
  showMore: function showMore3(extended) {
    return extended ? "Show less" : "Show more";
  },
  noResults: "No results",
  submit: null,
  reset: null,
  resetTitle: "Clear the search query.",
  submitTitle: "Submit your search query.",
  placeholder: "Search here…"
})(RefinementList);

// ../node_modules/react-instantsearch-dom/dist/es/widgets/RefinementList.js
var RefinementListWidget = function RefinementListWidget2(props) {
  return import_react43.default.createElement(PanelCallbackHandler_default, props, import_react43.default.createElement(RefinementList_default, props));
};
var RefinementList_default2 = connectRefinementList_default(RefinementListWidget, {
  $$widgetType: "ais.refinementList"
});

// ../node_modules/react-instantsearch-dom/dist/es/components/ScrollTo.js
var import_react44 = __toESM(require_react());
var import_prop_types41 = __toESM(require_prop_types());
function _typeof50(obj) {
  "@babel/helpers - typeof";
  return _typeof50 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof50(obj);
}
function _classCallCheck25(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties25(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey48(descriptor.key), descriptor);
  }
}
function _createClass25(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties25(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties25(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", { writable: false });
  return Constructor;
}
function _inherits25(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  Object.defineProperty(subClass, "prototype", { writable: false });
  if (superClass)
    _setPrototypeOf25(subClass, superClass);
}
function _setPrototypeOf25(o, p) {
  _setPrototypeOf25 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf28(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf25(o, p);
}
function _createSuper25(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct25();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf25(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf25(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn25(this, result);
  };
}
function _possibleConstructorReturn25(self, call) {
  if (call && (_typeof50(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized25(self);
}
function _assertThisInitialized25(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct25() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf25(o) {
  _getPrototypeOf25 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf28(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf25(o);
}
function _defineProperty47(obj, key, value) {
  key = _toPropertyKey48(key);
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey48(arg) {
  var key = _toPrimitive48(arg, "string");
  return _typeof50(key) === "symbol" ? key : String(key);
}
function _toPrimitive48(input, hint) {
  if (_typeof50(input) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof50(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
var cx20 = createClassNames("ScrollTo");
var ScrollTo = function(_Component) {
  _inherits25(ScrollTo2, _Component);
  var _super = _createSuper25(ScrollTo2);
  function ScrollTo2() {
    _classCallCheck25(this, ScrollTo2);
    return _super.apply(this, arguments);
  }
  _createClass25(ScrollTo2, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var _this$props = this.props, value = _this$props.value, hasNotChanged = _this$props.hasNotChanged;
      if (value !== prevProps.value && hasNotChanged) {
        this.el.scrollIntoView();
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this = this;
      return import_react44.default.createElement("div", {
        ref: function ref(_ref7) {
          return _this.el = _ref7;
        },
        className: cx20("")
      }, this.props.children);
    }
  }]);
  return ScrollTo2;
}(import_react44.Component);
_defineProperty47(ScrollTo, "propTypes", {
  value: import_prop_types41.default.any,
  children: import_prop_types41.default.node,
  hasNotChanged: import_prop_types41.default.bool
});
var ScrollTo_default = ScrollTo;

// ../node_modules/react-instantsearch-dom/dist/es/widgets/ScrollTo.js
var ScrollTo_default2 = connectScrollTo_default(ScrollTo_default, {
  $$widgetType: "ais.scrollTo"
});

// ../node_modules/react-instantsearch-dom/dist/es/widgets/SearchBox.js
var SearchBox_default2 = connectSearchBox_default(SearchBox_default, {
  $$widgetType: "ais.searchBox"
});

// ../node_modules/react-instantsearch-dom/dist/es/components/Snippet.js
var import_react45 = __toESM(require_react());
function _extends9() {
  _extends9 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends9.apply(this, arguments);
}
var cx21 = createClassNames("Snippet");
var Snippet = function Snippet2(props) {
  return import_react45.default.createElement(Highlighter_default, _extends9({}, props, {
    highlightProperty: "_snippetResult",
    cx: cx21
  }));
};
var Snippet_default = Snippet;

// ../node_modules/react-instantsearch-dom/dist/es/widgets/Snippet.js
var Snippet_default2 = connectHighlight_default(Snippet_default, {
  $$widgetType: "ais.snippet"
});

// ../node_modules/react-instantsearch-dom/dist/es/components/RelevantSort.js
var import_react46 = __toESM(require_react());
var import_prop_types42 = __toESM(require_prop_types());
var import_classnames17 = __toESM(require_classnames());
var cx22 = createClassNames("RelevantSort");
var DefaultButtonTextComponent = function DefaultButtonTextComponent2(_ref7) {
  var isRelevantSorted = _ref7.isRelevantSorted;
  return import_react46.default.createElement("span", null, isRelevantSorted ? "See all results" : "See relevant results");
};
var RelevantSort = function RelevantSort2(_ref23) {
  var _ref2$className = _ref23.className, className = _ref2$className === void 0 ? "" : _ref2$className, isVirtualReplica = _ref23.isVirtualReplica, isRelevantSorted = _ref23.isRelevantSorted, _ref2$buttonTextCompo = _ref23.buttonTextComponent, ButtonTextComponent = _ref2$buttonTextCompo === void 0 ? DefaultButtonTextComponent : _ref2$buttonTextCompo, TextComponent = _ref23.textComponent, refine19 = _ref23.refine;
  return !isVirtualReplica ? null : import_react46.default.createElement("div", {
    className: (0, import_classnames17.default)(cx22(""), className)
  }, import_react46.default.createElement("div", {
    className: cx22("text")
  }, TextComponent && import_react46.default.createElement(TextComponent, {
    isRelevantSorted
  })), import_react46.default.createElement("button", {
    className: cx22("button"),
    onClick: function onClick() {
      return refine19(isRelevantSorted ? 0 : void 0);
    }
  }, import_react46.default.createElement(ButtonTextComponent, {
    isRelevantSorted
  })));
};
RelevantSort.propTypes = {
  buttonTextComponent: import_prop_types42.default.func,
  className: import_prop_types42.default.string,
  isVirtualReplica: import_prop_types42.default.bool.isRequired,
  isRelevantSorted: import_prop_types42.default.bool.isRequired,
  refine: import_prop_types42.default.func.isRequired,
  textComponent: import_prop_types42.default.func
};
var RelevantSort_default = RelevantSort;

// ../node_modules/react-instantsearch-dom/dist/es/widgets/RelevantSort.js
var RelevantSort_default2 = connectRelevantSort_default(RelevantSort_default, {
  $$widgetType: "ais.relevantSort"
});

// ../node_modules/react-instantsearch-dom/dist/es/components/SortBy.js
var import_react47 = __toESM(require_react());
var import_prop_types43 = __toESM(require_prop_types());
var import_classnames18 = __toESM(require_classnames());
function _typeof51(obj) {
  "@babel/helpers - typeof";
  return _typeof51 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof51(obj);
}
function _classCallCheck26(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties26(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey49(descriptor.key), descriptor);
  }
}
function _createClass26(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties26(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties26(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", { writable: false });
  return Constructor;
}
function _inherits26(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  Object.defineProperty(subClass, "prototype", { writable: false });
  if (superClass)
    _setPrototypeOf26(subClass, superClass);
}
function _setPrototypeOf26(o, p) {
  _setPrototypeOf26 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf28(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf26(o, p);
}
function _createSuper26(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct26();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf26(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf26(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn26(this, result);
  };
}
function _possibleConstructorReturn26(self, call) {
  if (call && (_typeof51(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized26(self);
}
function _assertThisInitialized26(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct26() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf26(o) {
  _getPrototypeOf26 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf28(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf26(o);
}
function _defineProperty48(obj, key, value) {
  key = _toPropertyKey49(key);
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey49(arg) {
  var key = _toPrimitive49(arg, "string");
  return _typeof51(key) === "symbol" ? key : String(key);
}
function _toPrimitive49(input, hint) {
  if (_typeof51(input) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof51(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
var cx23 = createClassNames("SortBy");
var SortBy = function(_Component) {
  _inherits26(SortBy2, _Component);
  var _super = _createSuper26(SortBy2);
  function SortBy2() {
    _classCallCheck26(this, SortBy2);
    return _super.apply(this, arguments);
  }
  _createClass26(SortBy2, [{
    key: "render",
    value: function render() {
      var _this$props = this.props, id = _this$props.id, items4 = _this$props.items, currentRefinement = _this$props.currentRefinement, refine19 = _this$props.refine, className = _this$props.className;
      return import_react47.default.createElement("div", {
        className: (0, import_classnames18.default)(cx23(""), className)
      }, import_react47.default.createElement(Select, {
        id,
        cx: cx23,
        items: items4,
        selectedItem: currentRefinement,
        onSelect: refine19
      }));
    }
  }]);
  return SortBy2;
}(import_react47.Component);
_defineProperty48(SortBy, "propTypes", {
  id: import_prop_types43.default.string,
  items: import_prop_types43.default.arrayOf(import_prop_types43.default.shape({
    label: import_prop_types43.default.string,
    value: import_prop_types43.default.string.isRequired
  })).isRequired,
  currentRefinement: import_prop_types43.default.string.isRequired,
  refine: import_prop_types43.default.func.isRequired,
  className: import_prop_types43.default.string
});
_defineProperty48(SortBy, "defaultProps", {
  className: ""
});
var SortBy_default = SortBy;

// ../node_modules/react-instantsearch-dom/dist/es/widgets/SortBy.js
var SortBy_default2 = connectSortBy_default(SortBy_default, {
  $$widgetType: "ais.sortBy"
});

// ../node_modules/react-instantsearch-dom/dist/es/components/Stats.js
var import_react48 = __toESM(require_react());
var import_prop_types44 = __toESM(require_prop_types());
var import_classnames19 = __toESM(require_classnames());
var cx24 = createClassNames("Stats");
var Stats = function Stats2(_ref7) {
  var _ref$className = _ref7.className, className = _ref$className === void 0 ? "" : _ref$className, areHitsSorted = _ref7.areHitsSorted, nbHits = _ref7.nbHits, nbSortedHits = _ref7.nbSortedHits, processingTimeMS = _ref7.processingTimeMS, translate = _ref7.translate;
  return import_react48.default.createElement("div", {
    className: (0, import_classnames19.default)(cx24(""), className)
  }, import_react48.default.createElement("span", {
    className: cx24("text")
  }, translate("stats", nbHits, processingTimeMS, nbSortedHits, areHitsSorted)));
};
Stats.propTypes = {
  className: import_prop_types44.default.string,
  areHitsSorted: import_prop_types44.default.bool.isRequired,
  nbHits: import_prop_types44.default.number.isRequired,
  nbSortedHits: import_prop_types44.default.number,
  processingTimeMS: import_prop_types44.default.number.isRequired,
  translate: import_prop_types44.default.func.isRequired
};
var Stats_default = translatable({
  stats: function stats(n, ms, nSorted, areHitsSorted) {
    return areHitsSorted && n !== nSorted ? "".concat(nSorted.toLocaleString(), " relevant results sorted out of ").concat(n.toLocaleString(), " found in ").concat(ms.toLocaleString(), "ms") : "".concat(n.toLocaleString(), " results found in ").concat(ms.toLocaleString(), "ms");
  }
})(Stats);

// ../node_modules/react-instantsearch-dom/dist/es/widgets/Stats.js
var Stats_default2 = connectStats_default(Stats_default, {
  $$widgetType: "ais.stats"
});

// ../node_modules/react-instantsearch-dom/dist/es/components/ToggleRefinement.js
var import_react49 = __toESM(require_react());
var import_prop_types45 = __toESM(require_prop_types());
var import_classnames20 = __toESM(require_classnames());
var cx25 = createClassNames("ToggleRefinement");
var ToggleRefinement = function ToggleRefinement2(_ref7) {
  var currentRefinement = _ref7.currentRefinement, label = _ref7.label, canRefine = _ref7.canRefine, refine19 = _ref7.refine, className = _ref7.className;
  return import_react49.default.createElement("div", {
    className: (0, import_classnames20.default)(cx25("", !canRefine && "-noRefinement"), className)
  }, import_react49.default.createElement("label", {
    className: cx25("label")
  }, import_react49.default.createElement("input", {
    className: cx25("checkbox"),
    type: "checkbox",
    checked: currentRefinement,
    onChange: function onChange(event) {
      return refine19(event.target.checked);
    }
  }), import_react49.default.createElement("span", {
    className: cx25("labelText")
  }, label)));
};
ToggleRefinement.propTypes = {
  currentRefinement: import_prop_types45.default.bool.isRequired,
  label: import_prop_types45.default.string.isRequired,
  canRefine: import_prop_types45.default.bool.isRequired,
  refine: import_prop_types45.default.func.isRequired,
  className: import_prop_types45.default.string
};
ToggleRefinement.defaultProps = {
  className: ""
};
var ToggleRefinement_default = ToggleRefinement;

// ../node_modules/react-instantsearch-dom/dist/es/widgets/ToggleRefinement.js
var ToggleRefinement_default2 = connectToggleRefinement_default(ToggleRefinement_default, {
  $$widgetType: "ais.toggleRefinement"
});

// ../node_modules/react-instantsearch-dom/dist/es/components/VoiceSearch.js
var import_react50 = __toESM(require_react());

// ../node_modules/react-instantsearch-dom/dist/es/lib/voiceSearchHelper/index.js
function _typeof52(obj) {
  "@babel/helpers - typeof";
  return _typeof52 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof52(obj);
}
function ownKeys17(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread17(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys17(Object(source), true).forEach(function(key) {
      _defineProperty49(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys17(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty49(obj, key, value) {
  key = _toPropertyKey50(key);
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey50(arg) {
  var key = _toPrimitive50(arg, "string");
  return _typeof52(key) === "symbol" ? key : String(key);
}
function _toPrimitive50(input, hint) {
  if (_typeof52(input) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof52(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function createVoiceSearchHelper(_ref7) {
  var searchAsYouSpeak = _ref7.searchAsYouSpeak, language = _ref7.language, onQueryChange = _ref7.onQueryChange, onStateChange = _ref7.onStateChange;
  var SpeechRecognitionAPI = window.webkitSpeechRecognition || window.SpeechRecognition;
  var getDefaultState = function getDefaultState2(status) {
    return {
      status,
      transcript: "",
      isSpeechFinal: false,
      errorCode: void 0
    };
  };
  var state = getDefaultState("initial");
  var recognition;
  var isBrowserSupported = function isBrowserSupported2() {
    return Boolean(SpeechRecognitionAPI);
  };
  var isListening = function isListening2() {
    return state.status === "askingPermission" || state.status === "waiting" || state.status === "recognizing";
  };
  var setState = function setState2() {
    var newState = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    state = _objectSpread17(_objectSpread17({}, state), newState);
    onStateChange();
  };
  var getState = function getState2() {
    return state;
  };
  var resetState = function resetState2() {
    var status = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "initial";
    setState(getDefaultState(status));
  };
  var onStart = function onStart2() {
    setState({
      status: "waiting"
    });
  };
  var onError = function onError2(event) {
    setState({
      status: "error",
      errorCode: event.error
    });
  };
  var onResult = function onResult2(event) {
    setState({
      status: "recognizing",
      transcript: event.results[0] && event.results[0][0] && event.results[0][0].transcript || "",
      isSpeechFinal: event.results[0] && event.results[0].isFinal
    });
    if (searchAsYouSpeak && state.transcript) {
      onQueryChange(state.transcript);
    }
  };
  var onEnd = function onEnd2() {
    if (!state.errorCode && state.transcript && !searchAsYouSpeak) {
      onQueryChange(state.transcript);
    }
    if (state.status !== "error") {
      setState({
        status: "finished"
      });
    }
  };
  var start = function start2() {
    recognition = new SpeechRecognitionAPI();
    if (!recognition) {
      return;
    }
    resetState("askingPermission");
    recognition.interimResults = true;
    if (language) {
      recognition.lang = language;
    }
    recognition.addEventListener("start", onStart);
    recognition.addEventListener("error", onError);
    recognition.addEventListener("result", onResult);
    recognition.addEventListener("end", onEnd);
    recognition.start();
  };
  var dispose = function dispose2() {
    if (!recognition) {
      return;
    }
    recognition.stop();
    recognition.removeEventListener("start", onStart);
    recognition.removeEventListener("error", onError);
    recognition.removeEventListener("result", onResult);
    recognition.removeEventListener("end", onEnd);
    recognition = void 0;
  };
  var stop = function stop2() {
    dispose();
    resetState("finished");
  };
  var toggleListening = function toggleListening2() {
    if (!isBrowserSupported()) {
      return;
    }
    if (isListening()) {
      stop();
    } else {
      start();
    }
  };
  return {
    getState,
    isBrowserSupported,
    isListening,
    toggleListening,
    dispose
  };
}

// ../node_modules/react-instantsearch-dom/dist/es/components/VoiceSearch.js
function _typeof53(obj) {
  "@babel/helpers - typeof";
  return _typeof53 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof53(obj);
}
function _classCallCheck27(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties27(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey51(descriptor.key), descriptor);
  }
}
function _createClass27(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties27(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties27(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", { writable: false });
  return Constructor;
}
function _inherits27(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  Object.defineProperty(subClass, "prototype", { writable: false });
  if (superClass)
    _setPrototypeOf27(subClass, superClass);
}
function _setPrototypeOf27(o, p) {
  _setPrototypeOf27 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf28(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf27(o, p);
}
function _createSuper27(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct27();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf27(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf27(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn27(this, result);
  };
}
function _possibleConstructorReturn27(self, call) {
  if (call && (_typeof53(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized27(self);
}
function _assertThisInitialized27(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct27() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf27(o) {
  _getPrototypeOf27 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf28(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf27(o);
}
function _defineProperty50(obj, key, value) {
  key = _toPropertyKey51(key);
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey51(arg) {
  var key = _toPrimitive51(arg, "string");
  return _typeof53(key) === "symbol" ? key : String(key);
}
function _toPrimitive51(input, hint) {
  if (_typeof53(input) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof53(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
var cx26 = createClassNames("VoiceSearch");
var ButtonSvg = function ButtonSvg2(_ref7) {
  var children = _ref7.children;
  return import_react50.default.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    width: "16",
    height: "16",
    viewBox: "0 0 24 24",
    fill: "none",
    stroke: "currentColor",
    strokeWidth: "2",
    strokeLinecap: "round",
    strokeLinejoin: "round"
  }, children);
};
var _ref33 = import_react50.default.createElement(ButtonSvg, null, import_react50.default.createElement("line", {
  x1: "1",
  y1: "1",
  x2: "23",
  y2: "23"
}), import_react50.default.createElement("path", {
  d: "M9 9v3a3 3 0 0 0 5.12 2.12M15 9.34V4a3 3 0 0 0-5.94-.6"
}), import_react50.default.createElement("path", {
  d: "M17 16.95A7 7 0 0 1 5 12v-2m14 0v2a7 7 0 0 1-.11 1.23"
}), import_react50.default.createElement("line", {
  x1: "12",
  y1: "19",
  x2: "12",
  y2: "23"
}), import_react50.default.createElement("line", {
  x1: "8",
  y1: "23",
  x2: "16",
  y2: "23"
}));
var _ref4 = import_react50.default.createElement("path", {
  d: "M19 10v2a7 7 0 0 1-14 0v-2"
});
var _ref5 = import_react50.default.createElement("line", {
  x1: "12",
  y1: "19",
  x2: "12",
  y2: "23"
});
var _ref6 = import_react50.default.createElement("line", {
  x1: "8",
  y1: "23",
  x2: "16",
  y2: "23"
});
var DefaultButtonText = function DefaultButtonText2(_ref23) {
  var status = _ref23.status, errorCode = _ref23.errorCode, isListening = _ref23.isListening;
  return status === "error" && errorCode === "not-allowed" ? _ref33 : import_react50.default.createElement(ButtonSvg, null, import_react50.default.createElement("path", {
    d: "M12 1a3 3 0 0 0-3 3v8a3 3 0 0 0 6 0V4a3 3 0 0 0-3-3z",
    fill: isListening ? "currentColor" : ""
  }), _ref4, _ref5, _ref6);
};
var DefaultStatus = function DefaultStatus2(_ref7) {
  var transcript = _ref7.transcript;
  return import_react50.default.createElement("p", null, transcript);
};
var VoiceSearch = function(_Component) {
  _inherits27(VoiceSearch2, _Component);
  var _super = _createSuper27(VoiceSearch2);
  function VoiceSearch2() {
    var _this;
    _classCallCheck27(this, VoiceSearch2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty50(_assertThisInitialized27(_this), "voiceSearchHelper", void 0);
    _defineProperty50(_assertThisInitialized27(_this), "onClick", function(event) {
      if (!_this.voiceSearchHelper) {
        return;
      }
      event.currentTarget.blur();
      var toggleListening = _this.voiceSearchHelper.toggleListening;
      toggleListening();
    });
    return _this;
  }
  _createClass27(VoiceSearch2, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;
      var _this$props = this.props, _this$props$searchAsY = _this$props.searchAsYouSpeak, searchAsYouSpeak = _this$props$searchAsY === void 0 ? false : _this$props$searchAsY, language = _this$props.language, refine19 = _this$props.refine;
      this.voiceSearchHelper = createVoiceSearchHelper({
        searchAsYouSpeak,
        language,
        onQueryChange: function onQueryChange(query) {
          return refine19(query);
        },
        onStateChange: function onStateChange() {
          _this2.setState(_this2.voiceSearchHelper.getState());
        }
      });
      this.setState(this.voiceSearchHelper.getState());
    }
  }, {
    key: "render",
    value: function render() {
      if (!this.voiceSearchHelper) {
        return null;
      }
      var _this$state = this.state, status = _this$state.status, transcript = _this$state.transcript, isSpeechFinal = _this$state.isSpeechFinal, errorCode = _this$state.errorCode;
      var _this$voiceSearchHelp = this.voiceSearchHelper, isListening = _this$voiceSearchHelp.isListening, isBrowserSupported = _this$voiceSearchHelp.isBrowserSupported;
      var _this$props2 = this.props, translate = _this$props2.translate, ButtonTextComponent = _this$props2.buttonTextComponent, StatusComponent = _this$props2.statusComponent;
      var innerProps = {
        status,
        errorCode,
        isListening: isListening(),
        transcript,
        isSpeechFinal,
        isBrowserSupported: isBrowserSupported()
      };
      return import_react50.default.createElement("div", {
        className: cx26("")
      }, import_react50.default.createElement("button", {
        className: cx26("button"),
        type: "button",
        title: isBrowserSupported() ? translate("buttonTitle") : translate("disabledButtonTitle"),
        onClick: this.onClick,
        disabled: !isBrowserSupported()
      }, import_react50.default.createElement(ButtonTextComponent, innerProps)), import_react50.default.createElement("div", {
        className: cx26("status")
      }, import_react50.default.createElement(StatusComponent, innerProps)));
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.voiceSearchHelper) {
        this.voiceSearchHelper.dispose();
      }
    }
  }]);
  return VoiceSearch2;
}(import_react50.Component);
_defineProperty50(VoiceSearch, "defaultProps", {
  searchAsYouSpeak: false,
  buttonTextComponent: DefaultButtonText,
  statusComponent: DefaultStatus
});
var VoiceSearch_default = translatable({
  buttonTitle: "Search by voice",
  disabledButtonTitle: "Search by voice (not supported on this browser)"
})(VoiceSearch);

// ../node_modules/react-instantsearch-dom/dist/es/widgets/VoiceSearch.js
var VoiceSearch_default2 = connectVoiceSearch_default(VoiceSearch_default, {
  $$widgetType: "ais.voiceSearch"
});

// ../node_modules/react-instantsearch-dom/dist/es/widgets/QueryRuleCustomData.js
var import_react52 = __toESM(require_react());

// ../node_modules/react-instantsearch-dom/dist/es/components/QueryRuleCustomData.js
var import_react51 = __toESM(require_react());
var import_prop_types46 = __toESM(require_prop_types());
var import_classnames21 = __toESM(require_classnames());
var cx27 = createClassNames("QueryRuleCustomData");
var QueryRuleCustomData = function QueryRuleCustomData2(_ref7) {
  var items4 = _ref7.items, className = _ref7.className, children = _ref7.children;
  return import_react51.default.createElement("div", {
    className: (0, import_classnames21.default)(cx27(""), className)
  }, children({
    items: items4
  }));
};
QueryRuleCustomData.propTypes = {
  items: import_prop_types46.default.arrayOf(import_prop_types46.default.object).isRequired,
  className: import_prop_types46.default.string,
  children: import_prop_types46.default.func.isRequired
};
var QueryRuleCustomData_default = QueryRuleCustomData;

// ../node_modules/react-instantsearch-dom/dist/es/widgets/QueryRuleCustomData.js
var QueryRuleCustomDataWidget = function QueryRuleCustomDataWidget2(props) {
  return import_react52.default.createElement(PanelCallbackHandler_default, props, import_react52.default.createElement(QueryRuleCustomData_default, props));
};
var QueryRuleCustomData_default2 = connectQueryRules_default(QueryRuleCustomDataWidget, {
  $$widgetType: "ais.queryRuleCustomData"
});

// ../node_modules/react-instantsearch-dom/dist/es/widgets/Answers.js
var import_react54 = __toESM(require_react());

// ../node_modules/react-instantsearch-dom/dist/es/hooks/useAnswers.js
var import_react53 = __toESM(require_react());

// ../node_modules/react-instantsearch-dom/dist/es/lib/createConcurrentSafePromise.js
function createConcurrentSafePromise() {
  var basePromiseId = -1;
  var latestResolvedId = -1;
  var latestResolvedValue = void 0;
  return function runConcurrentSafePromise(promise) {
    basePromiseId++;
    var currentPromiseId = basePromiseId;
    return Promise.resolve(promise).then(function(x) {
      if (latestResolvedValue && currentPromiseId < latestResolvedId) {
        return latestResolvedValue;
      }
      latestResolvedId = currentPromiseId;
      latestResolvedValue = x;
      return x;
    });
  };
}

// ../node_modules/react-instantsearch-dom/dist/es/lib/debounce.js
function debounce(func, wait) {
  var lastTimeout = null;
  return function() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    var that = this;
    return new Promise(function(resolve, reject) {
      if (lastTimeout) {
        clearTimeout(lastTimeout);
      }
      lastTimeout = setTimeout(function() {
        lastTimeout = null;
        Promise.resolve(func.apply(that, args)).then(resolve).catch(reject);
      }, wait);
    });
  };
}

// ../node_modules/react-instantsearch-dom/dist/es/hooks/useAnswers.js
function _typeof54(obj) {
  "@babel/helpers - typeof";
  return _typeof54 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof54(obj);
}
var _excluded7 = ["searchClient", "queryLanguages", "attributesForPrediction", "nbHits", "renderDebounceTime", "searchDebounceTime"];
function ownKeys18(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread18(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys18(Object(source), true).forEach(function(key) {
      _defineProperty51(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys18(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty51(obj, key, value) {
  key = _toPropertyKey52(key);
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey52(arg) {
  var key = _toPrimitive52(arg, "string");
  return _typeof54(key) === "symbol" ? key : String(key);
}
function _toPrimitive52(input, hint) {
  if (_typeof54(input) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof54(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function _objectWithoutProperties7(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose7(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose7(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function _slicedToArray2(arr, i) {
  return _arrayWithHoles2(arr) || _iterableToArrayLimit2(arr, i) || _unsupportedIterableToArray7(arr, i) || _nonIterableRest2();
}
function _nonIterableRest2() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray7(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray7(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray7(o, minLen);
}
function _arrayLikeToArray7(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
function _iterableToArrayLimit2(arr, i) {
  var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];
  if (null != _i) {
    var _s, _e, _x, _r, _arr = [], _n = true, _d = false;
    try {
      if (_x = (_i = _i.call(arr)).next, 0 === i) {
        if (Object(_i) !== _i)
          return;
        _n = false;
      } else
        for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = true)
          ;
    } catch (err) {
      _d = true, _e = err;
    } finally {
      try {
        if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r))
          return;
      } finally {
        if (_d)
          throw _e;
      }
    }
    return _arr;
  }
}
function _arrayWithHoles2(arr) {
  if (Array.isArray(arr))
    return arr;
}
function hasReactHooks() {
  var _React$version$split$ = import_react53.default.version.split(".").map(Number), _React$version$split$2 = _slicedToArray2(_React$version$split$, 2), major = _React$version$split$2[0], minor = _React$version$split$2[1];
  return major >= 17 || major === 16 && minor >= 8;
}
function useAnswers(_ref7) {
  var searchClient = _ref7.searchClient, queryLanguages = _ref7.queryLanguages, attributesForPrediction = _ref7.attributesForPrediction, nbHits = _ref7.nbHits, _ref$renderDebounceTi = _ref7.renderDebounceTime, renderDebounceTime = _ref$renderDebounceTi === void 0 ? 100 : _ref$renderDebounceTi, _ref$searchDebounceTi = _ref7.searchDebounceTime, searchDebounceTime = _ref$searchDebounceTi === void 0 ? 100 : _ref$searchDebounceTi, extraParameters = _objectWithoutProperties7(_ref7, _excluded7);
  if (!hasReactHooks()) {
    throw new Error("`Answers` component and `useAnswers` hook require all React packages to be 16.8.0 or higher.");
  }
  var context = (0, import_react53.useContext)(instantSearchContext);
  var _useState = (0, import_react53.useState)(context.store.getState().widgets.query), _useState2 = _slicedToArray2(_useState, 2), query = _useState2[0], setQuery = _useState2[1];
  var _useState3 = (0, import_react53.useState)(context.mainTargetedIndex), _useState4 = _slicedToArray2(_useState3, 2), index = _useState4[0], setIndex = _useState4[1];
  var _useState5 = (0, import_react53.useState)(false), _useState6 = _slicedToArray2(_useState5, 2), isLoading = _useState6[0], setIsLoading = _useState6[1];
  var _useState7 = (0, import_react53.useState)([]), _useState8 = _slicedToArray2(_useState7, 2), hits = _useState8[0], setHits = _useState8[1];
  var runConcurrentSafePromise = (0, import_react53.useMemo)(function() {
    return createConcurrentSafePromise();
  }, []);
  var searchIndex = (0, import_react53.useMemo)(function() {
    return searchClient.initIndex(index);
  }, [searchClient, index]);
  if (!searchIndex.findAnswers) {
    throw new Error("`Answers` component and `useAnswers` hook require `algoliasearch` to be 4.8.0 or higher.");
  }
  var debouncedSearch = (0, import_react53.useMemo)(function() {
    return debounce(searchIndex.findAnswers, searchDebounceTime);
  }, [searchIndex]);
  (0, import_react53.useEffect)(function() {
    setIndex(context.mainTargetedIndex);
    return context.store.subscribe(function() {
      var _context$store$getSta = context.store.getState(), widgets = _context$store$getSta.widgets;
      setQuery(widgets.query);
    });
  }, [context]);
  var setDebouncedResult = (0, import_react53.useMemo)(
    function() {
      return debounce(function(result) {
        setIsLoading(false);
        setHits(result.hits);
      }, renderDebounceTime);
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [setIsLoading, setHits]
  );
  var fetchAnswers = function fetchAnswers2() {
    if (!query) {
      setIsLoading(false);
      setHits([]);
      return;
    }
    setIsLoading(true);
    runConcurrentSafePromise(debouncedSearch(query, queryLanguages, _objectSpread18(_objectSpread18({}, extraParameters), {}, {
      nbHits,
      attributesForPrediction
    }))).then(function(result) {
      if (!result) {
        return;
      }
      setDebouncedResult(result);
    });
  };
  (0, import_react53.useEffect)(function() {
    fetchAnswers();
  }, [query]);
  return {
    hits,
    isLoading
  };
}

// ../node_modules/react-instantsearch-dom/dist/es/widgets/Answers.js
function _typeof55(obj) {
  "@babel/helpers - typeof";
  return _typeof55 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof55(obj);
}
var _excluded8 = ["searchClient", "queryLanguages", "attributesForPrediction", "nbHits", "renderDebounceTime", "searchDebounceTime", "answersComponent"];
function ownKeys19(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread19(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys19(Object(source), true).forEach(function(key) {
      _defineProperty52(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys19(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty52(obj, key, value) {
  key = _toPropertyKey53(key);
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey53(arg) {
  var key = _toPrimitive53(arg, "string");
  return _typeof55(key) === "symbol" ? key : String(key);
}
function _toPrimitive53(input, hint) {
  if (_typeof55(input) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof55(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function _objectWithoutProperties8(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose8(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose8(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var cx28 = createClassNames("Answers");
function DefaultAnswersComponent(_ref7) {
  var isLoading = _ref7.isLoading, hits = _ref7.hits;
  return import_react54.default.createElement("div", {
    className: cx28("", hits.length === 0 && "-empty")
  }, import_react54.default.createElement("div", {
    className: cx28("header")
  }), isLoading ? import_react54.default.createElement("div", {
    className: cx28("loader")
  }) : import_react54.default.createElement("ul", {
    className: cx28("list")
  }, hits.map(function(hit, index) {
    return import_react54.default.createElement("li", {
      key: index,
      className: cx28("item")
    }, JSON.stringify(hit));
  })));
}
function Answers(_ref23) {
  var searchClient = _ref23.searchClient, queryLanguages = _ref23.queryLanguages, attributesForPrediction = _ref23.attributesForPrediction, _ref2$nbHits = _ref23.nbHits, nbHits = _ref2$nbHits === void 0 ? 1 : _ref2$nbHits, renderDebounceTime = _ref23.renderDebounceTime, searchDebounceTime = _ref23.searchDebounceTime, _ref2$answersComponen = _ref23.answersComponent, AnswersComponent = _ref2$answersComponen === void 0 ? DefaultAnswersComponent : _ref2$answersComponen, extraParameters = _objectWithoutProperties8(_ref23, _excluded8);
  var _useAnswers = useAnswers(_objectSpread19({
    searchClient,
    queryLanguages,
    attributesForPrediction,
    nbHits,
    renderDebounceTime,
    searchDebounceTime
  }, extraParameters)), hits = _useAnswers.hits, isLoading = _useAnswers.isLoading;
  return import_react54.default.createElement(AnswersComponent, {
    hits,
    isLoading
  });
}

// ../node_modules/react-instantsearch-dom/dist/es/widgets/DynamicWidgets.js
var import_react55 = __toESM(require_react());
var import_classnames22 = __toESM(require_classnames());
var _excluded9 = ["children", "className"];
function _objectWithoutProperties9(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose9(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose9(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var cx29 = createClassNames("DynamicWidgets");
function DynamicWidgets2(_ref7) {
  var children = _ref7.children, className = _ref7.className, props = _objectWithoutProperties9(_ref7, _excluded9);
  return import_react55.default.createElement("div", {
    className: (0, import_classnames22.default)(cx29(""), className)
  }, import_react55.default.createElement(DynamicWidgets_default, props, children));
}

// ../node_modules/react-instantsearch-dom/dist/es/core/getInsightsAnonymousUserToken.js
var ANONYMOUS_TOKEN_COOKIE_KEY = "_ALGOLIA";
function getCookie(name) {
  var prefix = "".concat(name, "=");
  var cookies = document.cookie.split(";");
  for (var i = 0; i < cookies.length; i++) {
    var cookie = cookies[i];
    while (cookie.charAt(0) === " ") {
      cookie = cookie.substring(1);
    }
    if (cookie.indexOf(prefix) === 0) {
      return cookie.substring(prefix.length, cookie.length);
    }
  }
  return void 0;
}
function getInsightsAnonymousUserToken() {
  return getCookie(ANONYMOUS_TOKEN_COOKIE_KEY);
}

// ../node_modules/react-instantsearch-dom/dist/es/lib/infiniteHitsCache/sessionStorage.js
var import_react_fast_compare4 = __toESM(require_react_fast_compare());
var _excluded10 = ["page"];
function _objectWithoutProperties10(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose10(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose10(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function getStateWithoutPage2(state) {
  var _ref7 = state || {}, page2 = _ref7.page, rest = _objectWithoutProperties10(_ref7, _excluded10);
  return rest;
}
var KEY = "ais.infiniteHits";
function hasSessionStorage() {
  return typeof window !== "undefined" && typeof window.sessionStorage !== "undefined";
}
function createInfiniteHitsSessionStorageCache() {
  return {
    read: function read(_ref23) {
      var state = _ref23.state;
      if (!hasSessionStorage()) {
        return null;
      }
      try {
        var cache = JSON.parse(window.sessionStorage.getItem(KEY));
        return cache && (0, import_react_fast_compare4.default)(cache.state, getStateWithoutPage2(state)) ? cache.hits : null;
      } catch (error) {
        if (error instanceof SyntaxError) {
          try {
            window.sessionStorage.removeItem(KEY);
          } catch (err) {
          }
        }
        return null;
      }
    },
    write: function write(_ref34) {
      var state = _ref34.state, hits = _ref34.hits;
      if (!hasSessionStorage()) {
        return;
      }
      try {
        window.sessionStorage.setItem(KEY, JSON.stringify({
          state: getStateWithoutPage2(state),
          hits
        }));
      } catch (error) {
      }
    }
  };
}

// ../node_modules/react-instantsearch-dom/dist/es/index.js
var ExperimentalDynamicWidgets = DynamicWidgets2;
export {
  Breadcrumb_default2 as Breadcrumb,
  ClearRefinements_default2 as ClearRefinements,
  Configure_default as Configure,
  CurrentRefinements_default2 as CurrentRefinements,
  DynamicWidgets2 as DynamicWidgets,
  Answers as EXPERIMENTAL_Answers,
  connectConfigureRelatedItems_default as EXPERIMENTAL_connectConfigureRelatedItems,
  EXPERIMENTAL_connectDynamicWidgets,
  useAnswers as EXPERIMENTAL_useAnswers,
  ConfigureRelatedItems_default as ExperimentalConfigureRelatedItems,
  ExperimentalDynamicWidgets,
  HIGHLIGHT_TAGS,
  HierarchicalMenu_default2 as HierarchicalMenu,
  Highlight_default2 as Highlight,
  Hits_default2 as Hits,
  HitsPerPage_default2 as HitsPerPage,
  Index_default as Index,
  InfiniteHits_default2 as InfiniteHits,
  InstantSearch_default as InstantSearch,
  Menu_default2 as Menu,
  MenuSelect_default2 as MenuSelect,
  NumericMenu_default2 as NumericMenu,
  Pagination_default2 as Pagination,
  Panel_default2 as Panel,
  PoweredBy_default2 as PoweredBy,
  QueryRuleContext_default as QueryRuleContext,
  QueryRuleCustomData_default2 as QueryRuleCustomData,
  RangeInput_default2 as RangeInput,
  RangeSlider_default as RangeSlider,
  RatingMenu_default2 as RatingMenu,
  RefinementList_default2 as RefinementList,
  RelevantSort_default2 as RelevantSort,
  ScrollTo_default2 as ScrollTo,
  SearchBox_default2 as SearchBox,
  Snippet_default2 as Snippet,
  SortBy_default2 as SortBy,
  Stats_default2 as Stats,
  ToggleRefinement_default2 as ToggleRefinement,
  VoiceSearch_default2 as VoiceSearch,
  connectAutoComplete_default as connectAutoComplete,
  connectBreadcrumb_default as connectBreadcrumb,
  connectConfigure_default as connectConfigure,
  connectCurrentRefinements_default as connectCurrentRefinements,
  connectDynamicWidgets_default as connectDynamicWidgets,
  connectGeoSearch_default as connectGeoSearch,
  connectHierarchicalMenu_default as connectHierarchicalMenu,
  connectHighlight_default as connectHighlight,
  connectHitInsights_default as connectHitInsights,
  connectHits_default as connectHits,
  connectHitsPerPage_default as connectHitsPerPage,
  connectInfiniteHits_default as connectInfiniteHits,
  connectMenu_default as connectMenu,
  connectNumericMenu_default as connectNumericMenu,
  connectPagination_default as connectPagination,
  connectPoweredBy_default as connectPoweredBy,
  connectQueryRules_default as connectQueryRules,
  connectRange_default as connectRange,
  connectRefinementList_default as connectRefinementList,
  connectRelevantSort_default as connectRelevantSort,
  connectScrollTo_default as connectScrollTo,
  connectSearchBox_default as connectSearchBox,
  connectSortBy_default as connectSortBy,
  connectStateResults_default as connectStateResults,
  connectStats_default as connectStats,
  connectToggleRefinement_default as connectToggleRefinement,
  createClassNames,
  createConnector_default as createConnector,
  createInfiniteHitsSessionStorageCache,
  createVoiceSearchHelper,
  getInsightsAnonymousUserToken,
  translatable
};
//# sourceMappingURL=react-instantsearch-dom.js.map
