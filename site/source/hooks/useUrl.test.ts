/**
 * @vitest-environment jsdom
 * Sans cette directive, on ne peut pas appeler `renderHook` car Vitest tourne par
 * d√©faut dans un environnement Node alors que `renderHook` a besoin d'un
 * environnement DOM.
 */

import { renderHook } from '@testing-library/react'
import { describe, expect, it, vi } from 'vitest'

import Salari√©Simulation from '@/pages/simulateurs/salari√©/Salari√©'

import {
	MergedSimulatorDataValues,
	useCurrentSimulatorData,
} from './useCurrentSimulatorData'
import { useSearchParamsForSituation } from './useSearchParamsForSituation'
import { useSiteUrl } from './useSiteUrl'
import { useUrl } from './useUrl'

vi.mock('@/hooks/useSiteUrl', () => ({
	useSiteUrl: vi.fn(),
}))
vi.mock('@/hooks/useCurrentSimulatorData', () => ({
	useCurrentSimulatorData: vi.fn(),
}))
vi.mock('@/hooks/useSearchParamsForSituation', () => ({
	useSearchParamsForSituation: vi.fn(),
}))
vi.mock('@/pages/simulateurs/salari√©/Salari√©', () => ({
	default: () => null,
}))

describe('useUrl hook', () => {
	it('retourne l‚ÄôURL avec le chemin du simulateur actuel et les param√®tres de la situation actuelle lorsqu‚Äôil est appel√© sans param√®tres', () => {
		vi.mocked(useSiteUrl).mockReturnValue('https://mon-entreprise.urssaf.fr')

		vi.mocked(useCurrentSimulatorData).mockReturnValue({
			key: 'salari√©',
			currentSimulatorData: {
				id: 'salari√©',
				tracking: 'salari√©',
				ic√¥ne: 'ü§ù',
				title: 'Simulateur salari√©',
				iframePath: 'simulateur-embauche',
				meta: {
					title: 'meta title',
					description: 'meta description',
				},
				pathId: 'simulateurs.salari√©',
				shortName: 'salari√©',
				path: '/simulateurs/salaire-brut-net',
				component: vi.mocked(Salari√©Simulation),
			},
		})
		vi.mocked(useSearchParamsForSituation).mockReturnValue(
			'salari%C3%A9+.+contrat=CDD&unit%C3%A9=%E2%82%AC%2Fmois'
		)

		const { result } = renderHook(() => useUrl())

		expect(useSearchParamsForSituation).toHaveBeenCalledWith(undefined)

		expect(result.current).toEqual(
			'https://mon-entreprise.urssaf.fr/simulateurs/salaire-brut-net?salari%C3%A9+.+contrat=CDD&unit%C3%A9=%E2%82%AC%2Fmois'
		)
	})

	it('retourne l‚ÄôURL avec le chemin donn√© et les param√®tres de la situation actuelle lorsqu‚Äôil est appel√© avec le param√®tre `path`', () => {
		vi.mocked(useSiteUrl).mockReturnValue('https://mon-entreprise.urssaf.fr')

		vi.mocked(useCurrentSimulatorData).mockReturnValue({
			key: 'salari√©',
			currentSimulatorData: {
				id: 'salari√©',
				tracking: 'salari√©',
				ic√¥ne: 'ü§ù',
				title: 'Simulateur salari√©',
				iframePath: 'simulateur-embauche',
				meta: {
					title: 'meta title',
					description: 'meta description',
				},
				pathId: 'simulateurs.salari√©',
				shortName: 'salari√©',
				path: '/simulateurs/salaire-brut-net',
				component: vi.mocked(Salari√©Simulation),
			},
		})
		vi.mocked(useSearchParamsForSituation).mockReturnValue(
			'salari%C3%A9+.+contrat=CDD&unit%C3%A9=%E2%82%AC%2Fmois'
		)

		const { result } = renderHook(() =>
			useUrl({
				path: '/simulateurs/auto-entrepreneur' as Partial<MergedSimulatorDataValues>,
			})
		)

		expect(useSearchParamsForSituation).toHaveBeenCalledWith(undefined)

		expect(result.current).toEqual(
			'https://mon-entreprise.urssaf.fr/simulateurs/auto-entrepreneur?salari%C3%A9+.+contrat=CDD&unit%C3%A9=%E2%82%AC%2Fmois'
		)
	})

	it('retourne l‚ÄôURL avec le chemin du simulateur actuel et les param√®tres de la situation donn√©e lorsqu‚Äôil est appel√© avec le param√®tre `situation`', () => {
		vi.mocked(useSiteUrl).mockReturnValue('https://mon-entreprise.urssaf.fr')

		vi.mocked(useCurrentSimulatorData).mockReturnValue({
			key: 'salari√©',
			currentSimulatorData: {
				id: 'salari√©',
				tracking: 'salari√©',
				ic√¥ne: 'ü§ù',
				title: 'Simulateur salari√©',
				iframePath: 'simulateur-embauche',
				meta: {
					title: 'meta title',
					description: 'meta description',
				},
				pathId: 'simulateurs.salari√©',
				shortName: 'salari√©',
				path: '/simulateurs/salaire-brut-net',
				component: vi.mocked(Salari√©Simulation),
			},
		})
		vi.mocked(useSearchParamsForSituation).mockReturnValue(
			'salari%C3%A9+.+contrat=CDD&unit%C3%A9=%E2%82%AC%2Fmois'
		)

		const { result } = renderHook(() =>
			useUrl({
				situation: {
					'salari√© . contrat': 'CDD',
				},
			})
		)

		expect(useSearchParamsForSituation).toHaveBeenCalledWith({
			'salari√© . contrat': 'CDD',
		})

		expect(result.current).toEqual(
			'https://mon-entreprise.urssaf.fr/simulateurs/salaire-brut-net?salari%C3%A9+.+contrat=CDD&unit%C3%A9=%E2%82%AC%2Fmois'
		)
	})

	it('retourne l‚ÄôURL avec le chemin donn√© et les param√®tres de la situation donn√©e lorsqu‚Äôil est appel√© avec les param√®tres `path` et `situation`', () => {
		vi.mocked(useSiteUrl).mockReturnValue('https://mon-entreprise.urssaf.fr')

		vi.mocked(useCurrentSimulatorData).mockReturnValue({
			key: 'salari√©',
			currentSimulatorData: {
				id: 'salari√©',
				tracking: 'salari√©',
				ic√¥ne: 'ü§ù',
				title: 'Simulateur salari√©',
				iframePath: 'simulateur-embauche',
				meta: {
					title: 'meta title',
					description: 'meta description',
				},
				pathId: 'simulateurs.salari√©',
				shortName: 'salari√©',
				path: '/simulateurs/salaire-brut-net',
				component: vi.mocked(Salari√©Simulation),
			},
		})
		vi.mocked(useSearchParamsForSituation).mockReturnValue(
			'salari%C3%A9+.+contrat=CDD&unit%C3%A9=%E2%82%AC%2Fmois'
		)

		const { result } = renderHook(() =>
			useUrl({
				path: '/simulateurs/auto-entrepreneur' as Partial<MergedSimulatorDataValues>,
				situation: {
					'salari√© . contrat': 'CDD',
				},
			})
		)

		expect(useSearchParamsForSituation).toHaveBeenCalledWith({
			'salari√© . contrat': 'CDD',
		})

		expect(result.current).toEqual(
			'https://mon-entreprise.urssaf.fr/simulateurs/auto-entrepreneur?salari%C3%A9+.+contrat=CDD&unit%C3%A9=%E2%82%AC%2Fmois'
		)
	})
})
