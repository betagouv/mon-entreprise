{
  "version": 3,
  "sources": ["../../../../node_modules/markdown-to-jsx/index.tsx"],
  "sourcesContent": ["/* @jsx h */\n/**\n * markdown-to-jsx is a fork of [simple-markdown v0.2.2](https://github.com/Khan/simple-markdown)\n * from Khan Academy. Thank you Khan devs for making such an awesome and extensible\n * parsing infra... without it, half of the optimizations here wouldn't be feasible. üôèüèº\n */\nimport * as React from 'react'\n\nexport namespace MarkdownToJSX {\n  /**\n   * RequireAtLeastOne<{ ... }> <- only requires at least one key\n   */\n  type RequireAtLeastOne<T, Keys extends keyof T = keyof T> = Pick<\n    T,\n    Exclude<keyof T, Keys>\n  > &\n    {\n      [K in Keys]-?: Required<Pick<T, K>> & Partial<Pick<T, Exclude<Keys, K>>>\n    }[Keys]\n\n  export type CreateElement = typeof React.createElement\n\n  export type HTMLTags = keyof JSX.IntrinsicElements\n\n  export type State = {\n    _inAnchor?: boolean\n    _inline?: boolean\n    _inTable?: boolean\n    _key?: React.Key\n    _list?: boolean\n    _simple?: boolean\n  }\n\n  export type ParserResult = {\n    [key: string]: any\n    type?: string\n  }\n\n  export type NestedParser = (\n    input: string,\n    state?: MarkdownToJSX.State\n  ) => MarkdownToJSX.ParserResult\n\n  export type Parser<ParserOutput> = (\n    capture: RegExpMatchArray,\n    nestedParse: NestedParser,\n    state?: MarkdownToJSX.State\n  ) => ParserOutput\n\n  export type RuleOutput = (\n    ast: MarkdownToJSX.ParserResult,\n    state: MarkdownToJSX.State\n  ) => JSX.Element\n\n  export type Rule<ParserOutput = MarkdownToJSX.ParserResult> = {\n    _match: (\n      source: string,\n      state: MarkdownToJSX.State,\n      prevCapturedString?: string\n    ) => RegExpMatchArray\n    _order: Priority\n    _parse: MarkdownToJSX.Parser<ParserOutput>\n    _react?: (\n      node: ParserOutput,\n      output: RuleOutput,\n      state?: MarkdownToJSX.State\n    ) => React.ReactChild\n  }\n\n  export type Rules = {\n    [key: string]: Rule\n  }\n\n  export type Override =\n    | RequireAtLeastOne<{\n        component: React.ElementType\n        props: Object\n      }>\n    | React.ElementType\n\n  export type Overrides = {\n    [tag in HTMLTags]?: Override\n  } & {\n    [customComponent: string]: Override\n  }\n\n  export type Options = Partial<{\n    /**\n     * Ultimate control over the output of all rendered JSX.\n     */\n    createElement: (\n      tag: Parameters<CreateElement>[0],\n      props: JSX.IntrinsicAttributes,\n      ...children: React.ReactChild[]\n    ) => JSX.Element\n\n    /**\n     * Disable the compiler's best-effort transcription of provided raw HTML\n     * into JSX-equivalent. This is the functionality that prevents the need to\n     * use `dangerouslySetInnerHTML` in React.\n     */\n    disableParsingRawHTML: boolean\n\n    /**\n     * Forces the compiler to always output content with a block-level wrapper\n     * (`<p>` or any block-level syntax your markdown already contains.)\n     */\n    forceBlock: boolean\n\n    /**\n     * Forces the compiler to always output content with an inline wrapper (`<span>`)\n     */\n    forceInline: boolean\n\n    /**\n     * Supply additional HTML entity: unicode replacement mappings.\n     *\n     * Pass only the inner part of the entity as the key,\n     * e.g. `&le;` -> `{ \"le\": \"\\u2264\" }`\n     *\n     * By default\n     * the following entities are replaced with their unicode equivalents:\n     *\n     * ```\n     * &amp;\n     * &apos;\n     * &gt;\n     * &lt;\n     * &nbsp;\n     * &quot;\n     * ```\n     */\n    namedCodesToUnicode: {\n      [key: string]: string\n    }\n\n    /**\n     * Selectively control the output of particular HTML tags as they would be\n     * emitted by the compiler.\n     */\n    overrides: Overrides\n\n    /**\n     * Declare the type of the wrapper to be used when there are multiple\n     * children to render. Set to `null` to get an array of children back\n     * without any wrapper, or use `React.Fragment` to get a React element\n     * that won't show up in the DOM.\n     */\n    wrapper: React.ElementType | null\n\n    /**\n     * Forces the compiler to wrap results, even if there is only a single\n     * child or no children.\n     */\n    forceWrapper: boolean\n\n    /**\n     * Override normalization of non-URI-safe characters for use in generating\n     * HTML IDs for anchor linking purposes.\n     */\n    slugify: (source: string) => string\n\n    /**\n     * Forces the compiler to have space between hash sign and the header text which\n     * is explicitly stated in the most of the markdown specs.\n     * https://github.github.com/gfm/#atx-heading\n     * `The opening sequence of # characters must be followed by a space or by the end of line.`\n     */\n    enforceAtxHeadings: boolean\n  }>\n}\n\n/** TODO: Drop for React 16? */\nconst ATTRIBUTE_TO_JSX_PROP_MAP = [\n  'allowFullScreen',\n  'allowTransparency',\n  'autoComplete',\n  'autoFocus',\n  'autoPlay',\n  'cellPadding',\n  'cellSpacing',\n  'charSet',\n  'className',\n  'classId',\n  'colSpan',\n  'contentEditable',\n  'contextMenu',\n  'crossOrigin',\n  'encType',\n  'formAction',\n  'formEncType',\n  'formMethod',\n  'formNoValidate',\n  'formTarget',\n  'frameBorder',\n  'hrefLang',\n  'inputMode',\n  'keyParams',\n  'keyType',\n  'marginHeight',\n  'marginWidth',\n  'maxLength',\n  'mediaGroup',\n  'minLength',\n  'noValidate',\n  'radioGroup',\n  'readOnly',\n  'rowSpan',\n  'spellCheck',\n  'srcDoc',\n  'srcLang',\n  'srcSet',\n  'tabIndex',\n  'useMap',\n].reduce(\n  (obj, x) => {\n    obj[x.toLowerCase()] = x\n    return obj\n  },\n  { for: 'htmlFor' }\n)\n\nconst namedCodesToUnicode = {\n  amp: '\\u0026',\n  apos: '\\u0027',\n  gt: '\\u003e',\n  lt: '\\u003c',\n  nbsp: '\\u00a0',\n  quot: '\\u201c',\n} as const\n\nconst DO_NOT_PROCESS_HTML_ELEMENTS = ['style', 'script']\n\n/**\n * the attribute extractor regex looks for a valid attribute name,\n * followed by an equal sign (whitespace around the equal sign is allowed), followed\n * by one of the following:\n *\n * 1. a single quote-bounded string, e.g. 'foo'\n * 2. a double quote-bounded string, e.g. \"bar\"\n * 3. an interpolation, e.g. {something}\n *\n * JSX can be be interpolated into itself and is passed through the compiler using\n * the same options and setup as the current run.\n *\n * <Something children={<SomeOtherThing />} />\n *                      ==================\n *                              ‚Ü≥ children: [<SomeOtherThing />]\n *\n * Otherwise, interpolations are handled as strings or simple booleans\n * unless HTML syntax is detected.\n *\n * <Something color={green} disabled={true} />\n *                   =====            ====\n *                     ‚Üì                ‚Ü≥ disabled: true\n *                     ‚Ü≥ color: \"green\"\n *\n * Numbers are not parsed at this time due to complexities around int, float,\n * and the upcoming bigint functionality that would make handling it unwieldy.\n * Parse the string in your component as desired.\n *\n * <Something someBigNumber={123456789123456789} />\n *                           ==================\n *                                   ‚Ü≥ someBigNumber: \"123456789123456789\"\n */\nconst ATTR_EXTRACTOR_R =\n  /([-A-Z0-9_:]+)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|(?:\\{((?:\\\\.|{[^}]*?}|[^}])*)\\})))?/gi\n\n/** TODO: Write explainers for each of these */\n\nconst AUTOLINK_MAILTO_CHECK_R = /mailto:/i\nconst BLOCK_END_R = /\\n{2,}$/\nconst BLOCKQUOTE_R = /^( *>[^\\n]+(\\n[^\\n]+)*\\n*)+\\n{2,}/\nconst BLOCKQUOTE_TRIM_LEFT_MULTILINE_R = /^ *> ?/gm\nconst BREAK_LINE_R = /^ {2,}\\n/\nconst BREAK_THEMATIC_R = /^(?:( *[-*_])){3,} *(?:\\n *)+\\n/\nconst CODE_BLOCK_FENCED_R =\n  /^\\s*(`{3,}|~{3,}) *(\\S+)?([^\\n]*?)?\\n([\\s\\S]+?)\\s*\\1 *(?:\\n *)*\\n?/\nconst CODE_BLOCK_R = /^(?: {4}[^\\n]+\\n*)+(?:\\n *)+\\n?/\nconst CODE_INLINE_R = /^(`+)\\s*([\\s\\S]*?[^`])\\s*\\1(?!`)/\nconst CONSECUTIVE_NEWLINE_R = /^(?:\\n *)*\\n/\nconst CR_NEWLINE_R = /\\r\\n?/g\nconst FOOTNOTE_R = /^\\[\\^([^\\]]+)](:.*)\\n/\nconst FOOTNOTE_REFERENCE_R = /^\\[\\^([^\\]]+)]/\nconst FORMFEED_R = /\\f/g\nconst GFM_TASK_R = /^\\s*?\\[(x|\\s)\\]/\nconst HEADING_R = /^ *(#{1,6}) *([^\\n]+?)(?: +#*)?(?:\\n *)*(?:\\n|$)/\nconst HEADING_ATX_COMPLIANT_R =\n  /^ *(#{1,6}) +([^\\n]+?)(?: +#*)?(?:\\n *)*(?:\\n|$)/\nconst HEADING_SETEXT_R = /^([^\\n]+)\\n *(=|-){3,} *(?:\\n *)+\\n/\n\n/**\n * Explanation:\n *\n * 1. Look for a starting tag, preceded by any amount of spaces\n *    ^ *<\n *\n * 2. Capture the tag name (capture 1)\n *    ([^ >/]+)\n *\n * 3. Ignore a space after the starting tag and capture the attribute portion of the tag (capture 2)\n *     ?([^>]*)\\/{0}>\n *\n * 4. Ensure a matching closing tag is present in the rest of the input string\n *    (?=[\\s\\S]*<\\/\\1>)\n *\n * 5. Capture everything until the matching closing tag -- this might include additional pairs\n *    of the same tag type found in step 2 (capture 3)\n *    ((?:[\\s\\S]*?(?:<\\1[^>]*>[\\s\\S]*?<\\/\\1>)*[\\s\\S]*?)*?)<\\/\\1>\n *\n * 6. Capture excess newlines afterward\n *    \\n*\n */\nconst HTML_BLOCK_ELEMENT_R =\n  /^ *(?!<[a-z][^ >/]* ?\\/>)<([a-z][^ >/]*) ?([^>]*)\\/{0}>\\n?(\\s*(?:<\\1[^>]*?>[\\s\\S]*?<\\/\\1>|(?!<\\1)[\\s\\S])*?)<\\/\\1>\\n*/i\n\nconst HTML_CHAR_CODE_R = /&([a-z0-9]+|#[0-9]{1,6}|#x[0-9a-fA-F]{1,6});/ig\n\nconst HTML_COMMENT_R = /^<!--[\\s\\S]*?(?:-->)/\n\n/**\n * borrowed from React 15(https://github.com/facebook/react/blob/894d20744cba99383ffd847dbd5b6e0800355a5c/src/renderers/dom/shared/HTMLDOMPropertyConfig.js)\n */\nconst HTML_CUSTOM_ATTR_R = /^(data|aria|x)-[a-z_][a-z\\d_.-]*$/\n\nconst HTML_SELF_CLOSING_ELEMENT_R =\n  /^ *<([a-z][a-z0-9:]*)(?:\\s+((?:<.*?>|[^>])*))?\\/?>(?!<\\/\\1>)(\\s*\\n)?/i\nconst INTERPOLATION_R = /^\\{.*\\}$/\nconst LINK_AUTOLINK_BARE_URL_R = /^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/\nconst LINK_AUTOLINK_MAILTO_R = /^<([^ >]+@[^ >]+)>/\nconst LINK_AUTOLINK_R = /^<([^ >]+:\\/[^ >]+)>/\nconst CAPTURE_LETTER_AFTER_HYPHEN = /-([a-z])?/gi\nconst NP_TABLE_R = /^(.*\\|?.*)\\n *(\\|? *[-:]+ *\\|[-| :]*)\\n((?:.*\\|.*\\n)*)\\n?/\nconst PARAGRAPH_R = /^[^\\n]+(?:  \\n|\\n{2,})/\nconst REFERENCE_IMAGE_OR_LINK = /^\\[([^\\]]*)\\]:\\s+<?([^\\s>]+)>?\\s*(\"([^\"]*)\")?/\nconst REFERENCE_IMAGE_R = /^!\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/\nconst REFERENCE_LINK_R = /^\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/\nconst SQUARE_BRACKETS_R = /(\\[|\\])/g\nconst SHOULD_RENDER_AS_BLOCK_R = /(\\n|^[-*]\\s|^#|^ {2,}|^-{2,}|^>\\s)/\nconst TAB_R = /\\t/g\nconst TABLE_SEPARATOR_R = /^ *\\| */\nconst TABLE_TRIM_PIPES = /(^ *\\||\\| *$)/g\nconst TABLE_CELL_END_TRIM = / *$/\nconst TABLE_CENTER_ALIGN = /^ *:-+: *$/\nconst TABLE_LEFT_ALIGN = /^ *:-+ *$/\nconst TABLE_RIGHT_ALIGN = /^ *-+: *$/\n\nconst TEXT_BOLD_R =\n  /^([*_])\\1((?:\\[.*?\\][([].*?[)\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~+.*?~+|.)*?)\\1\\1(?!\\1)/\nconst TEXT_EMPHASIZED_R =\n  /^([*_])((?:\\[.*?\\][([].*?[)\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~+.*?~+|.)*?)\\1(?!\\1|\\w)/\nconst TEXT_MARKED_R = /^==((?:\\[.*?\\]|<.*?>(?:.*?<.*?>)?|`.*?`|.)*?)==/\nconst TEXT_STRIKETHROUGHED_R = /^~~((?:\\[.*?\\]|<.*?>(?:.*?<.*?>)?|`.*?`|.)*?)~~/\n\nconst TEXT_ESCAPED_R = /^\\\\([^0-9A-Za-z\\s])/\nconst TEXT_PLAIN_R =\n  /^[\\s\\S]+?(?=[^0-9A-Z\\s\\u00c0-\\uffff&#;.()'\"]|\\d+\\.|\\n\\n| {2,}\\n|\\w+:\\S|$)/i\n\nconst TRIM_STARTING_NEWLINES = /^\\n+/\n\nconst HTML_LEFT_TRIM_AMOUNT_R = /^([ \\t]*)/\n\nconst UNESCAPE_URL_R = /\\\\([^\\\\])/g\n\ntype LIST_TYPE = 1 | 2\nconst ORDERED: LIST_TYPE = 1\nconst UNORDERED: LIST_TYPE = 2\n\nconst LIST_ITEM_END_R = / *\\n+$/\nconst LIST_LOOKBEHIND_R = /(?:^|\\n)( *)$/\n\n// recognize a `*` `-`, `+`, `1.`, `2.`... list bullet\nconst ORDERED_LIST_BULLET = '(?:\\\\d+\\\\.)'\nconst UNORDERED_LIST_BULLET = '(?:[*+-])'\n\nfunction generateListItemPrefix(type: LIST_TYPE) {\n  return (\n    '( *)(' +\n    (type === ORDERED ? ORDERED_LIST_BULLET : UNORDERED_LIST_BULLET) +\n    ') +'\n  )\n}\n\n// recognize the start of a list item:\n// leading space plus a bullet plus a space (`   * `)\nconst ORDERED_LIST_ITEM_PREFIX = generateListItemPrefix(ORDERED)\nconst UNORDERED_LIST_ITEM_PREFIX = generateListItemPrefix(UNORDERED)\n\nfunction generateListItemPrefixRegex(type: LIST_TYPE) {\n  return new RegExp(\n    '^' +\n      (type === ORDERED ? ORDERED_LIST_ITEM_PREFIX : UNORDERED_LIST_ITEM_PREFIX)\n  )\n}\n\nconst ORDERED_LIST_ITEM_PREFIX_R = generateListItemPrefixRegex(ORDERED)\nconst UNORDERED_LIST_ITEM_PREFIX_R = generateListItemPrefixRegex(UNORDERED)\n\nfunction generateListItemRegex(type: LIST_TYPE) {\n  // recognize an individual list item:\n  //  * hi\n  //    this is part of the same item\n  //\n  //    as is this, which is a new paragraph in the same item\n  //\n  //  * but this is not part of the same item\n  return new RegExp(\n    '^' +\n      (type === ORDERED\n        ? ORDERED_LIST_ITEM_PREFIX\n        : UNORDERED_LIST_ITEM_PREFIX) +\n      '[^\\\\n]*(?:\\\\n' +\n      '(?!\\\\1' +\n      (type === ORDERED ? ORDERED_LIST_BULLET : UNORDERED_LIST_BULLET) +\n      ' )[^\\\\n]*)*(\\\\n|$)',\n    'gm'\n  )\n}\n\nconst ORDERED_LIST_ITEM_R = generateListItemRegex(ORDERED)\nconst UNORDERED_LIST_ITEM_R = generateListItemRegex(UNORDERED)\n\n// check whether a list item has paragraphs: if it does,\n// we leave the newlines at the end\nfunction generateListRegex(type: LIST_TYPE) {\n  const bullet = type === ORDERED ? ORDERED_LIST_BULLET : UNORDERED_LIST_BULLET\n\n  return new RegExp(\n    '^( *)(' +\n      bullet +\n      ') ' +\n      '[\\\\s\\\\S]+?(?:\\\\n{2,}(?! )' +\n      '(?!\\\\1' +\n      bullet +\n      ' (?!' +\n      bullet +\n      ' ))\\\\n*' +\n      // the \\\\s*$ here is so that we can parse the inside of nested\n      // lists, where our content might end before we receive two `\\n`s\n      '|\\\\s*\\\\n*$)'\n  )\n}\n\nconst ORDERED_LIST_R = generateListRegex(ORDERED)\nconst UNORDERED_LIST_R = generateListRegex(UNORDERED)\n\nfunction generateListRule(h: any, type: LIST_TYPE) {\n  const ordered = type === ORDERED\n  const LIST_R = ordered ? ORDERED_LIST_R : UNORDERED_LIST_R\n  const LIST_ITEM_R = ordered ? ORDERED_LIST_ITEM_R : UNORDERED_LIST_ITEM_R\n  const LIST_ITEM_PREFIX_R = ordered\n    ? ORDERED_LIST_ITEM_PREFIX_R\n    : UNORDERED_LIST_ITEM_PREFIX_R\n\n  return {\n    _match(source, state, prevCapture) {\n      // We only want to break into a list if we are at the start of a\n      // line. This is to avoid parsing \"hi * there\" with \"* there\"\n      // becoming a part of a list.\n      // You might wonder, \"but that's inline, so of course it wouldn't\n      // start a list?\". You would be correct! Except that some of our\n      // lists can be inline, because they might be inside another list,\n      // in which case we can parse with inline scope, but need to allow\n      // nested lists inside this inline scope.\n      const isStartOfLine = LIST_LOOKBEHIND_R.exec(prevCapture)\n      const isListBlock = state._list || (!state._inline && !state._simple)\n\n      if (isStartOfLine && isListBlock) {\n        source = isStartOfLine[1] + source\n\n        return LIST_R.exec(source)\n      } else {\n        return null\n      }\n    },\n    _order: Priority.HIGH,\n    _parse(capture, parse, state) {\n      const bullet = capture[2]\n      const start = ordered ? +bullet : undefined\n      const items = capture[0]\n        // recognize the end of a paragraph block inside a list item:\n        // two or more newlines at end end of the item\n        .replace(BLOCK_END_R, '\\n')\n        .match(LIST_ITEM_R)\n\n      let lastItemWasAParagraph = false\n      const itemContent = items.map(function (item, i) {\n        // We need to see how far indented the item is:\n        const space = LIST_ITEM_PREFIX_R.exec(item)[0].length\n\n        // And then we construct a regex to \"unindent\" the subsequent\n        // lines of the items by that amount:\n        const spaceRegex = new RegExp('^ {1,' + space + '}', 'gm')\n\n        // Before processing the item, we need a couple things\n        const content = item\n          // remove indents on trailing lines:\n          .replace(spaceRegex, '')\n          // remove the bullet:\n          .replace(LIST_ITEM_PREFIX_R, '')\n\n        // Handling \"loose\" lists, like:\n        //\n        //  * this is wrapped in a paragraph\n        //\n        //  * as is this\n        //\n        //  * as is this\n        const isLastItem = i === items.length - 1\n        const containsBlocks = content.indexOf('\\n\\n') !== -1\n\n        // Any element in a list is a block if it contains multiple\n        // newlines. The last element in the list can also be a block\n        // if the previous item in the list was a block (this is\n        // because non-last items in the list can end with \\n\\n, but\n        // the last item can't, so we just \"inherit\" this property\n        // from our previous element).\n        const thisItemIsAParagraph =\n          containsBlocks || (isLastItem && lastItemWasAParagraph)\n        lastItemWasAParagraph = thisItemIsAParagraph\n\n        // backup our state for restoration afterwards. We're going to\n        // want to set state._list to true, and state._inline depending\n        // on our list's looseness.\n        const oldStateInline = state._inline\n        const oldStateList = state._list\n        state._list = true\n\n        // Parse inline if we're in a tight list, or block if we're in\n        // a loose list.\n        let adjustedContent\n        if (thisItemIsAParagraph) {\n          state._inline = false\n          adjustedContent = content.replace(LIST_ITEM_END_R, '\\n\\n')\n        } else {\n          state._inline = true\n          adjustedContent = content.replace(LIST_ITEM_END_R, '')\n        }\n\n        const result = parse(adjustedContent, state)\n\n        // Restore our state before returning\n        state._inline = oldStateInline\n        state._list = oldStateList\n\n        return result\n      })\n\n      return {\n        _items: itemContent,\n        _ordered: ordered,\n        _start: start,\n      }\n    },\n    _react(node, output, state) {\n      const Tag = node._ordered ? 'ol' : 'ul'\n\n      return (\n        <Tag key={state._key} start={node._start}>\n          {node._items.map(function generateListItem(item, i) {\n            return <li key={i}>{output(item, state)}</li>\n          })}\n        </Tag>\n      )\n    },\n  } as MarkdownToJSX.Rule<{\n    _items: MarkdownToJSX.ParserResult[]\n    _ordered: boolean\n    _start?: number\n  }>\n}\n\nconst LINK_R = /^\\[([^\\]]*)]\\( *((?:\\([^)]*\\)|[^() ])*) *\"?([^)\"]*)?\"?\\)/\nconst IMAGE_R = /^!\\[([^\\]]*)]\\( *((?:\\([^)]*\\)|[^() ])*) *\"?([^)\"]*)?\"?\\)/\n\nconst NON_PARAGRAPH_BLOCK_SYNTAXES = [\n  BLOCKQUOTE_R,\n  CODE_BLOCK_FENCED_R,\n  CODE_BLOCK_R,\n  HEADING_R,\n  HEADING_SETEXT_R,\n  HEADING_ATX_COMPLIANT_R,\n  HTML_COMMENT_R,\n  NP_TABLE_R,\n  ORDERED_LIST_ITEM_R,\n  ORDERED_LIST_R,\n  UNORDERED_LIST_ITEM_R,\n  UNORDERED_LIST_R,\n]\n\nconst BLOCK_SYNTAXES = [\n  ...NON_PARAGRAPH_BLOCK_SYNTAXES,\n  PARAGRAPH_R,\n  HTML_BLOCK_ELEMENT_R,\n  HTML_SELF_CLOSING_ELEMENT_R,\n]\n\nfunction containsBlockSyntax(input: string) {\n  return BLOCK_SYNTAXES.some(r => r.test(input))\n}\n\n/** Remove symmetrical leading and trailing quotes */\nfunction unquote(str: string) {\n  const first = str[0]\n  if (\n    (first === '\"' || first === \"'\") &&\n    str.length >= 2 &&\n    str[str.length - 1] === first\n  ) {\n    return str.slice(1, -1)\n  }\n  return str\n}\n\n// based on https://stackoverflow.com/a/18123682/1141611\n// not complete, but probably good enough\nfunction slugify(str: string) {\n  return str\n    .replace(/[√Ä√Å√Ç√É√Ñ√Ö√†√°√¢√£√§√•√¶√Ü]/g, 'a')\n    .replace(/[√ß√á]/g, 'c')\n    .replace(/[√∞√ê]/g, 'd')\n    .replace(/[√à√â√ä√ã√©√®√™√´]/g, 'e')\n    .replace(/[√è√Ø√é√Æ√ç√≠√å√¨]/g, 'i')\n    .replace(/[√ë√±]/g, 'n')\n    .replace(/[√∏√ò≈ì≈í√ï√µ√î√¥√ì√≥√í√≤]/g, 'o')\n    .replace(/[√ú√º√õ√ª√ö√∫√ô√π]/g, 'u')\n    .replace(/[≈∏√ø√ù√Ω]/g, 'y')\n    .replace(/[^a-z0-9- ]/gi, '')\n    .replace(/ /gi, '-')\n    .toLowerCase()\n}\n\nfunction parseTableAlignCapture(alignCapture: string) {\n  if (TABLE_RIGHT_ALIGN.test(alignCapture)) {\n    return 'right'\n  } else if (TABLE_CENTER_ALIGN.test(alignCapture)) {\n    return 'center'\n  } else if (TABLE_LEFT_ALIGN.test(alignCapture)) {\n    return 'left'\n  }\n\n  return null\n}\n\nfunction parseTableRow(\n  source: string,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n) {\n  const prevInTable = state._inTable\n  state._inTable = true\n  const tableRow = parse(source.trim(), state)\n  state._inTable = prevInTable\n\n  let cells = [[]]\n  tableRow.forEach(function (node, i) {\n    if (node.type === 'tableSeparator') {\n      // Filter out empty table separators at the start/end:\n      if (i !== 0 && i !== tableRow.length - 1) {\n        // Split the current row:\n        cells.push([])\n      }\n    } else {\n      if (\n        node.type === 'text' &&\n        (tableRow[i + 1] == null || tableRow[i + 1].type === 'tableSeparator')\n      ) {\n        node._content = node._content.replace(TABLE_CELL_END_TRIM, '')\n      }\n      cells[cells.length - 1].push(node)\n    }\n  })\n  return cells\n}\n\nfunction parseTableAlign(source: string /*, parse, state*/) {\n  const alignText = source.replace(TABLE_TRIM_PIPES, '').split('|')\n\n  return alignText.map(parseTableAlignCapture)\n}\n\nfunction parseTableCells(\n  source: string,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n) {\n  const rowsText = source.trim().split('\\n')\n\n  return rowsText.map(function (rowText) {\n    return parseTableRow(rowText, parse, state)\n  })\n}\n\nfunction parseTable(\n  capture: RegExpMatchArray,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n) {\n  state._inline = true\n  const header = parseTableRow(capture[1], parse, state)\n  const align = parseTableAlign(capture[2])\n  const cells = parseTableCells(capture[3], parse, state)\n  state._inline = false\n\n  return {\n    _align: align,\n    _cells: cells,\n    _header: header,\n    type: 'table',\n  }\n}\n\nfunction getTableStyle(node, colIndex) {\n  return node._align[colIndex] == null\n    ? {}\n    : {\n        textAlign: node._align[colIndex],\n      }\n}\n\n/** TODO: remove for react 16 */\nfunction normalizeAttributeKey(key) {\n  const hyphenIndex = key.indexOf('-')\n\n  if (hyphenIndex !== -1 && key.match(HTML_CUSTOM_ATTR_R) === null) {\n    key = key.replace(CAPTURE_LETTER_AFTER_HYPHEN, function (_, letter) {\n      return letter.toUpperCase()\n    })\n  }\n\n  return key\n}\n\nfunction attributeValueToJSXPropValue(\n  key: keyof React.AllHTMLAttributes<Element>,\n  value: string\n): any {\n  if (key === 'style') {\n    return value.split(/;\\s?/).reduce(function (styles, kvPair) {\n      const key = kvPair.slice(0, kvPair.indexOf(':'))\n\n      // snake-case to camelCase\n      // also handles PascalCasing vendor prefixes\n      const camelCasedKey = key.replace(/(-[a-z])/g, substr =>\n        substr[1].toUpperCase()\n      )\n\n      // key.length + 1 to skip over the colon\n      styles[camelCasedKey] = kvPair.slice(key.length + 1).trim()\n\n      return styles\n    }, {})\n  } else if (key === 'href') {\n    return sanitizeUrl(value)\n  } else if (value.match(INTERPOLATION_R)) {\n    // return as a string and let the consumer decide what to do with it\n    value = value.slice(1, value.length - 1)\n  }\n\n  if (value === 'true') {\n    return true\n  } else if (value === 'false') {\n    return false\n  }\n\n  return value\n}\n\nfunction normalizeWhitespace(source: string): string {\n  return source\n    .replace(CR_NEWLINE_R, '\\n')\n    .replace(FORMFEED_R, '')\n    .replace(TAB_R, '    ')\n}\n\n/**\n * Creates a parser for a given set of rules, with the precedence\n * specified as a list of rules.\n *\n * @rules: an object containing\n * rule type -> {match, order, parse} objects\n * (lower order is higher precedence)\n * (Note: `order` is added to defaultRules after creation so that\n *  the `order` of defaultRules in the source matches the `order`\n *  of defaultRules in terms of `order` fields.)\n *\n * @returns The resulting parse function, with the following parameters:\n *   @source: the input source string to be parsed\n *   @state: an optional object to be threaded through parse\n *     calls. Allows clients to add stateful operations to\n *     parsing, such as keeping track of how many levels deep\n *     some nesting is. For an example use-case, see passage-ref\n *     parsing in src/widgets/passage/passage-markdown.jsx\n */\nfunction parserFor(\n  rules: MarkdownToJSX.Rules\n): (\n  source: string,\n  state: MarkdownToJSX.State\n) => ReturnType<MarkdownToJSX.NestedParser> {\n  // Sorts rules in order of increasing order, then\n  // ascending rule name in case of ties.\n  let ruleList = Object.keys(rules)\n\n  /* istanbul ignore next */\n  if (process.env.NODE_ENV !== 'production') {\n    ruleList.forEach(function (type) {\n      let order = rules[type]._order\n      if (\n        process.env.NODE_ENV !== 'production' &&\n        (typeof order !== 'number' || !isFinite(order))\n      ) {\n        console.warn(\n          'markdown-to-jsx: Invalid order for rule `' + type + '`: ' + order\n        )\n      }\n    })\n  }\n\n  ruleList.sort(function (typeA, typeB) {\n    let orderA = rules[typeA]._order\n    let orderB = rules[typeB]._order\n\n    // First sort based on increasing order\n    if (orderA !== orderB) {\n      return orderA - orderB\n\n      // Then based on increasing unicode lexicographic ordering\n    } else if (typeA < typeB) {\n      return -1\n    }\n\n    return 1\n  })\n\n  function nestedParse(\n    source: string,\n    state: MarkdownToJSX.State\n  ): MarkdownToJSX.ParserResult[] {\n    let result = []\n\n    // We store the previous capture so that match functions can\n    // use some limited amount of lookbehind. Lists use this to\n    // ensure they don't match arbitrary '- ' or '* ' in inline\n    // text (see the list rule for more information).\n    let prevCapture = ''\n    while (source) {\n      let i = 0\n      while (i < ruleList.length) {\n        const ruleType = ruleList[i]\n        const rule = rules[ruleType]\n        const capture = rule._match(source, state, prevCapture)\n\n        if (capture) {\n          const currCaptureString = capture[0]\n          source = source.substring(currCaptureString.length)\n          const parsed = rule._parse(capture, nestedParse, state)\n\n          // We also let rules override the default type of\n          // their parsed node if they would like to, so that\n          // there can be a single output function for all links,\n          // even if there are several rules to parse them.\n          if (parsed.type == null) {\n            parsed.type = ruleType\n          }\n\n          result.push(parsed)\n\n          prevCapture = currCaptureString\n          break\n        }\n\n        i++\n      }\n    }\n\n    return result\n  }\n\n  return function outerParse(source, state) {\n    return nestedParse(normalizeWhitespace(source), state)\n  }\n}\n\n// Creates a match function for an inline scoped or simple element from a regex\nfunction inlineRegex(regex: RegExp) {\n  return function match(source, state: MarkdownToJSX.State) {\n    if (state._inline) {\n      return regex.exec(source)\n    } else {\n      return null\n    }\n  }\n}\n\n// basically any inline element except links\nfunction simpleInlineRegex(regex: RegExp) {\n  return function match(source: string, state: MarkdownToJSX.State) {\n    if (state._inline || state._simple) {\n      return regex.exec(source)\n    } else {\n      return null\n    }\n  }\n}\n\n// Creates a match function for a block scoped element from a regex\nfunction blockRegex(regex: RegExp) {\n  return function match(source: string, state: MarkdownToJSX.State) {\n    if (state._inline || state._simple) {\n      return null\n    } else {\n      return regex.exec(source)\n    }\n  }\n}\n\n// Creates a match function from a regex, ignoring block/inline scope\nfunction anyScopeRegex(regex: RegExp) {\n  return function match(source: string /*, state*/) {\n    return regex.exec(source)\n  }\n}\n\nfunction matchParagraph(\n  source: string,\n  state: MarkdownToJSX.State,\n  prevCapturedString?: string\n) {\n  if (state._inline || state._simple) {\n    return null\n  }\n\n  if (prevCapturedString && !prevCapturedString.endsWith('\\n')) {\n    // don't match continuation of a line\n    return null\n  }\n\n  let match = ''\n\n  source.split('\\n').every(line => {\n    // bail out on first sign of non-paragraph block\n    if (NON_PARAGRAPH_BLOCK_SYNTAXES.some(regex => regex.test(line))) {\n      return false\n    }\n    match += line + '\\n'\n    return line.trim()\n  })\n\n  const captured = match.trimEnd()\n  if (captured == '') {\n    return null\n  }\n\n  return [match, captured]\n}\n\nfunction reactFor(outputFunc) {\n  return function nestedReactOutput(\n    ast: MarkdownToJSX.ParserResult | MarkdownToJSX.ParserResult[],\n    state: MarkdownToJSX.State = {}\n  ): React.ReactChild[] {\n    if (Array.isArray(ast)) {\n      const oldKey = state._key\n      const result = []\n\n      // map nestedOutput over the ast, except group any text\n      // nodes together into a single string output.\n      let lastWasString = false\n\n      for (let i = 0; i < ast.length; i++) {\n        state._key = i\n\n        const nodeOut = nestedReactOutput(ast[i], state)\n        const isString = typeof nodeOut === 'string'\n\n        if (isString && lastWasString) {\n          result[result.length - 1] += nodeOut\n        } else if (nodeOut !== null) {\n          result.push(nodeOut)\n        }\n\n        lastWasString = isString\n      }\n\n      state._key = oldKey\n\n      return result\n    }\n\n    return outputFunc(ast, nestedReactOutput, state)\n  }\n}\n\nfunction sanitizeUrl(url: string): string | undefined {\n  try {\n    const decoded = decodeURIComponent(url).replace(/[^A-Za-z0-9/:]/g, '')\n\n    if (decoded.match(/^\\s*(javascript|vbscript|data(?!:image)):/i)) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.warn(\n          'Anchor URL contains an unsafe JavaScript/VBScript/data expression, it will not be rendered.',\n          decoded\n        )\n      }\n\n      return undefined\n    }\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn(\n        'Anchor URL could not be decoded due to malformed syntax or characters, it will not be rendered.',\n        url\n      )\n    }\n\n    // decodeURIComponent sometimes throws a URIError\n    // See `decodeURIComponent('a%AFc');`\n    // http://stackoverflow.com/questions/9064536/javascript-decodeuricomponent-malformed-uri-exception\n    return null\n  }\n\n  return url\n}\n\nfunction unescapeUrl(rawUrlString: string): string {\n  return rawUrlString.replace(UNESCAPE_URL_R, '$1')\n}\n\n/**\n * Everything inline, including links.\n */\nfunction parseInline(\n  parse: MarkdownToJSX.NestedParser,\n  content: string,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult {\n  const isCurrentlyInline = state._inline || false\n  const isCurrentlySimple = state._simple || false\n  state._inline = true\n  state._simple = true\n  const result = parse(content, state)\n  state._inline = isCurrentlyInline\n  state._simple = isCurrentlySimple\n  return result\n}\n\n/**\n * Anything inline that isn't a link.\n */\nfunction parseSimpleInline(\n  parse: MarkdownToJSX.NestedParser,\n  content: string,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult {\n  const isCurrentlyInline = state._inline || false\n  const isCurrentlySimple = state._simple || false\n  state._inline = false\n  state._simple = true\n  const result = parse(content, state)\n  state._inline = isCurrentlyInline\n  state._simple = isCurrentlySimple\n  return result\n}\n\nfunction parseBlock(\n  parse,\n  content,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult {\n  state._inline = false\n  return parse(content, state)\n}\n\nconst parseCaptureInline: MarkdownToJSX.Parser<\n  ReturnType<typeof parseInline>\n> = (capture, parse, state: MarkdownToJSX.State) => {\n  return {\n    _content: parseInline(parse, capture[1], state),\n  }\n}\n\nfunction captureNothing() {\n  return {}\n}\n\nfunction renderNothing() {\n  return null\n}\n\nfunction ruleOutput(rules: MarkdownToJSX.Rules) {\n  return function nestedRuleOutput(\n    ast: MarkdownToJSX.ParserResult,\n    outputFunc: MarkdownToJSX.RuleOutput,\n    state: MarkdownToJSX.State\n  ): React.ReactChild {\n    return rules[ast.type]._react(ast, outputFunc, state)\n  }\n}\n\nfunction cx(...args) {\n  return args.filter(Boolean).join(' ')\n}\n\nfunction get(src: Object, path: string, fb?: any) {\n  let ptr = src\n  const frags = path.split('.')\n\n  while (frags.length) {\n    ptr = ptr[frags[0]]\n\n    if (ptr === undefined) break\n    else frags.shift()\n  }\n\n  return ptr || fb\n}\n\nfunction getTag(tag: string, overrides: MarkdownToJSX.Overrides) {\n  const override = get(overrides, tag)\n\n  if (!override) return tag\n\n  return typeof override === 'function' ||\n    (typeof override === 'object' && 'render' in override)\n    ? override\n    : get(overrides, `${tag}.component`, tag)\n}\n\nenum Priority {\n  /**\n   * anything that must scan the tree before everything else\n   */\n  MAX,\n  /**\n   * scans for block-level constructs\n   */\n  HIGH,\n  /**\n   * inline w/ more priority than other inline\n   */\n  MED,\n  /**\n   * inline elements\n   */\n  LOW,\n  /**\n   * bare text and stuff that is considered leftovers\n   */\n  MIN,\n}\n\nexport function compiler(\n  markdown: string,\n  options: MarkdownToJSX.Options = {}\n) {\n  options.overrides = options.overrides || {}\n  options.slugify = options.slugify || slugify\n  options.namedCodesToUnicode = options.namedCodesToUnicode\n    ? { ...namedCodesToUnicode, ...options.namedCodesToUnicode }\n    : namedCodesToUnicode\n\n  const createElementFn = options.createElement || React.createElement\n\n  // JSX custom pragma\n  // eslint-disable-next-line no-unused-vars\n  function h(\n    // locally we always will render a known string tag\n    tag: MarkdownToJSX.HTMLTags,\n    props: Parameters<MarkdownToJSX.CreateElement>[1] & {\n      className?: string\n      id?: string\n    },\n    ...children\n  ) {\n    const overrideProps = get(options.overrides, `${tag}.props`, {})\n\n    return createElementFn(\n      getTag(tag, options.overrides),\n      {\n        ...props,\n        ...overrideProps,\n        className: cx(props?.className, overrideProps.className) || undefined,\n      },\n      ...children\n    )\n  }\n\n  function compile(input: string): JSX.Element {\n    let _inline = false\n\n    if (options.forceInline) {\n      _inline = true\n    } else if (!options.forceBlock) {\n      /**\n       * should not contain any block-level markdown like newlines, lists, headings,\n       * thematic breaks, blockquotes, tables, etc\n       */\n      _inline = SHOULD_RENDER_AS_BLOCK_R.test(input) === false\n    }\n\n    const arr = emitter(\n      parser(\n        _inline\n          ? input\n          : `${input.trimEnd().replace(TRIM_STARTING_NEWLINES, '')}\\n\\n`,\n        {\n          _inline,\n        }\n      )\n    )\n\n    while (\n      typeof arr[arr.length - 1] === 'string' &&\n      !arr[arr.length - 1].trim()\n    ) {\n      arr.pop()\n    }\n\n    if (options.wrapper === null) {\n      return arr\n    }\n\n    const wrapper = options.wrapper || (_inline ? 'span' : 'div')\n    let jsx\n\n    if (arr.length > 1 || options.forceWrapper) {\n      jsx = arr\n    } else if (arr.length === 1) {\n      jsx = arr[0]\n\n      // TODO: remove this for React 16\n      if (typeof jsx === 'string') {\n        return <span key=\"outer\">{jsx}</span>\n      } else {\n        return jsx\n      }\n    } else {\n      // TODO: return null for React 16\n      jsx = null\n    }\n\n    return React.createElement(wrapper, { key: 'outer' }, jsx)\n  }\n\n  function attrStringToMap(str: string): JSX.IntrinsicAttributes {\n    const attributes = str.match(ATTR_EXTRACTOR_R)\n    if (!attributes) {\n      return null\n    }\n\n    return attributes.reduce(function (map, raw, index) {\n      const delimiterIdx = raw.indexOf('=')\n\n      if (delimiterIdx !== -1) {\n        const key = normalizeAttributeKey(raw.slice(0, delimiterIdx)).trim()\n        const value = unquote(raw.slice(delimiterIdx + 1).trim())\n\n        const mappedKey = ATTRIBUTE_TO_JSX_PROP_MAP[key] || key\n        const normalizedValue = (map[mappedKey] = attributeValueToJSXPropValue(\n          key,\n          value\n        ))\n\n        if (\n          typeof normalizedValue === 'string' &&\n          (HTML_BLOCK_ELEMENT_R.test(normalizedValue) ||\n            HTML_SELF_CLOSING_ELEMENT_R.test(normalizedValue))\n        ) {\n          map[mappedKey] = React.cloneElement(compile(normalizedValue.trim()), {\n            key: index,\n          })\n        }\n      } else if (raw !== 'style') {\n        map[ATTRIBUTE_TO_JSX_PROP_MAP[raw] || raw] = true\n      }\n\n      return map\n    }, {})\n  }\n\n  /* istanbul ignore next */\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof markdown !== 'string') {\n      throw new Error(`markdown-to-jsx: the first argument must be\n                             a string`)\n    }\n\n    if (\n      Object.prototype.toString.call(options.overrides) !== '[object Object]'\n    ) {\n      throw new Error(`markdown-to-jsx: options.overrides (second argument property) must be\n                             undefined or an object literal with shape:\n                             {\n                                htmltagname: {\n                                    component: string|ReactComponent(optional),\n                                    props: object(optional)\n                                }\n                             }`)\n    }\n  }\n\n  const footnotes: { _footnote: string; _identifier: string }[] = []\n  const refs: { [key: string]: { _target: string; _title: string } } = {}\n\n  /**\n   * each rule's react() output function goes through our custom h() JSX pragma;\n   * this allows the override functionality to be automatically applied\n   */\n  const rules: MarkdownToJSX.Rules = {\n    blockQuote: {\n      _match: blockRegex(BLOCKQUOTE_R),\n      _order: Priority.HIGH,\n      _parse(capture, parse, state) {\n        return {\n          _content: parse(\n            capture[0].replace(BLOCKQUOTE_TRIM_LEFT_MULTILINE_R, ''),\n            state\n          ),\n        }\n      },\n      _react(node, output, state) {\n        return (\n          <blockquote key={state._key}>\n            {output(node._content, state)}\n          </blockquote>\n        )\n      },\n    } as MarkdownToJSX.Rule<{ _content: MarkdownToJSX.ParserResult }>,\n\n    breakLine: {\n      _match: anyScopeRegex(BREAK_LINE_R),\n      _order: Priority.HIGH,\n      _parse: captureNothing,\n      _react(_, __, state) {\n        return <br key={state._key} />\n      },\n    },\n\n    breakThematic: {\n      _match: blockRegex(BREAK_THEMATIC_R),\n      _order: Priority.HIGH,\n      _parse: captureNothing,\n      _react(_, __, state) {\n        return <hr key={state._key} />\n      },\n    },\n\n    codeBlock: {\n      _match: blockRegex(CODE_BLOCK_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        return {\n          _content: capture[0].replace(/^ {4}/gm, '').replace(/\\n+$/, ''),\n          _lang: undefined,\n        }\n      },\n\n      _react(node, output, state) {\n        return (\n          <pre key={state._key}>\n            <code\n              {...node._attrs}\n              className={node._lang ? `lang-${node._lang}` : ''}\n            >\n              {node._content}\n            </code>\n          </pre>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      _attrs?: ReturnType<typeof attrStringToMap>\n      _content: string\n      _lang?: string\n    }>,\n\n    codeFenced: {\n      _match: blockRegex(CODE_BLOCK_FENCED_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        return {\n          // if capture[3] it's additional metadata\n          _attrs: attrStringToMap(capture[3] || ''),\n          _content: capture[4],\n          _lang: capture[2] || undefined,\n          type: 'codeBlock',\n        }\n      },\n    },\n\n    codeInline: {\n      _match: simpleInlineRegex(CODE_INLINE_R),\n      _order: Priority.LOW,\n      _parse(capture /*, parse, state*/) {\n        return {\n          _content: capture[2],\n        }\n      },\n      _react(node, output, state) {\n        return <code key={state._key}>{node._content}</code>\n      },\n    } as MarkdownToJSX.Rule<{ _content: string }>,\n\n    /**\n     * footnotes are emitted at the end of compilation in a special <footer> block\n     */\n    footnote: {\n      _match: blockRegex(FOOTNOTE_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        footnotes.push({\n          _footnote: capture[2],\n          _identifier: capture[1],\n        })\n\n        return {}\n      },\n      _react: renderNothing,\n    },\n\n    footnoteReference: {\n      _match: inlineRegex(FOOTNOTE_REFERENCE_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse*/) {\n        return {\n          _content: capture[1],\n          _target: `#${options.slugify(capture[1])}`,\n        }\n      },\n      _react(node, output, state) {\n        return (\n          <a key={state._key} href={sanitizeUrl(node._target)}>\n            <sup key={state._key}>{node._content}</sup>\n          </a>\n        )\n      },\n    } as MarkdownToJSX.Rule<{ _content: string; _target: string }>,\n\n    gfmTask: {\n      _match: inlineRegex(GFM_TASK_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse, state*/) {\n        return {\n          _completed: capture[1].toLowerCase() === 'x',\n        }\n      },\n      _react(node, output, state) {\n        return (\n          <input\n            checked={node._completed}\n            key={state._key}\n            readOnly\n            type=\"checkbox\"\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{ _completed: boolean }>,\n\n    heading: {\n      _match: blockRegex(\n        options.enforceAtxHeadings ? HEADING_ATX_COMPLIANT_R : HEADING_R\n      ),\n      _order: Priority.HIGH,\n      _parse(capture, parse, state) {\n        return {\n          _content: parseInline(parse, capture[2], state),\n          _id: options.slugify(capture[2]),\n          _level: capture[1].length,\n        }\n      },\n      _react(node, output, state) {\n        return h(\n          `h${node._level}`,\n          { id: node._id, key: state._key },\n          output(node._content, state)\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      _content: MarkdownToJSX.ParserResult\n      _id: string\n      _level: 1 | 2 | 3 | 4 | 5 | 6\n      _tag: MarkdownToJSX.HTMLTags\n    }>,\n\n    headingSetext: {\n      _match: blockRegex(HEADING_SETEXT_R),\n      _order: Priority.MAX,\n      _parse(capture, parse, state) {\n        return {\n          _content: parseInline(parse, capture[1], state),\n          _level: capture[2] === '=' ? 1 : 2,\n          type: 'heading',\n        }\n      },\n    },\n\n    htmlComment: {\n      _match: anyScopeRegex(HTML_COMMENT_R),\n      _order: Priority.HIGH,\n      _parse() {\n        return {}\n      },\n      _react: renderNothing,\n    },\n\n    image: {\n      _match: simpleInlineRegex(IMAGE_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse, state*/) {\n        return {\n          _alt: capture[1],\n          _target: unescapeUrl(capture[2]),\n          _title: capture[3],\n        }\n      },\n      _react(node, output, state) {\n        return (\n          <img\n            key={state._key}\n            alt={node._alt || undefined}\n            title={node._title || undefined}\n            src={sanitizeUrl(node._target)}\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      _alt?: string\n      _target: string\n      _title?: string\n    }>,\n\n    link: {\n      _match: inlineRegex(LINK_R),\n      _order: Priority.LOW,\n      _parse(capture, parse, state) {\n        return {\n          _content: parseSimpleInline(parse, capture[1], state),\n          _target: unescapeUrl(capture[2]),\n          _title: capture[3],\n        }\n      },\n      _react(node, output, state) {\n        return (\n          <a\n            key={state._key}\n            href={sanitizeUrl(node._target)}\n            title={node._title}\n          >\n            {output(node._content, state)}\n          </a>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      _content: MarkdownToJSX.ParserResult\n      _target: string\n      _title?: string\n    }>,\n\n    // https://daringfireball.net/projects/markdown/syntax#autolink\n    linkAngleBraceStyleDetector: {\n      _match: inlineRegex(LINK_AUTOLINK_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        return {\n          _content: [\n            {\n              _content: capture[1],\n              type: 'text',\n            },\n          ],\n          _target: capture[1],\n          type: 'link',\n        }\n      },\n    },\n\n    linkBareUrlDetector: {\n      _match: (source, state) => {\n        if (state._inAnchor) {\n          return null\n        }\n        return inlineRegex(LINK_AUTOLINK_BARE_URL_R)(source, state)\n      },\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        return {\n          _content: [\n            {\n              _content: capture[1],\n              type: 'text',\n            },\n          ],\n          _target: capture[1],\n          _title: undefined,\n          type: 'link',\n        }\n      },\n    },\n\n    linkMailtoDetector: {\n      _match: inlineRegex(LINK_AUTOLINK_MAILTO_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        let address = capture[1]\n        let target = capture[1]\n\n        // Check for a `mailto:` already existing in the link:\n        if (!AUTOLINK_MAILTO_CHECK_R.test(target)) {\n          target = 'mailto:' + target\n        }\n\n        return {\n          _content: [\n            {\n              _content: address.replace('mailto:', ''),\n              type: 'text',\n            },\n          ],\n          _target: target,\n          type: 'link',\n        }\n      },\n    },\n\n    orderedList: generateListRule(h, ORDERED),\n    unorderedList: generateListRule(h, UNORDERED),\n\n    newlineCoalescer: {\n      _match: blockRegex(CONSECUTIVE_NEWLINE_R),\n      _order: Priority.LOW,\n      _parse: captureNothing,\n      _react(/*node, output, state*/) {\n        return '\\n'\n      },\n    },\n\n    paragraph: {\n      _match: matchParagraph,\n      _order: Priority.LOW,\n      _parse: parseCaptureInline,\n      _react(node, output, state) {\n        return <p key={state._key}>{output(node._content, state)}</p>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<typeof parseCaptureInline>>,\n\n    ref: {\n      _match: inlineRegex(REFERENCE_IMAGE_OR_LINK),\n      _order: Priority.MAX,\n      _parse(capture /*, parse*/) {\n        refs[capture[1]] = {\n          _target: capture[2],\n          _title: capture[4],\n        }\n\n        return {}\n      },\n      _react: renderNothing,\n    },\n\n    refImage: {\n      _match: simpleInlineRegex(REFERENCE_IMAGE_R),\n      _order: Priority.MAX,\n      _parse(capture) {\n        return {\n          _alt: capture[1] || undefined,\n          _ref: capture[2],\n        }\n      },\n      _react(node, output, state) {\n        return (\n          <img\n            key={state._key}\n            alt={node._alt}\n            src={sanitizeUrl(refs[node._ref]._target)}\n            title={refs[node._ref]._title}\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{ _alt?: string; _ref: string }>,\n\n    refLink: {\n      _match: inlineRegex(REFERENCE_LINK_R),\n      _order: Priority.MAX,\n      _parse(capture, parse, state) {\n        return {\n          _content: parse(capture[1], state),\n          _fallbackContent: parse(\n            capture[0].replace(SQUARE_BRACKETS_R, '\\\\$1'),\n            state\n          ),\n          _ref: capture[2],\n        }\n      },\n      _react(node, output, state) {\n        return refs[node._ref] ? (\n          <a\n            key={state._key}\n            href={sanitizeUrl(refs[node._ref]._target)}\n            title={refs[node._ref]._title}\n          >\n            {output(node._content, state)}\n          </a>\n        ) : (\n          <span key={state._key}>{output(node._fallbackContent, state)}</span>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      _content: MarkdownToJSX.ParserResult\n      _fallbackContent: MarkdownToJSX.ParserResult\n      _ref: string\n    }>,\n\n    table: {\n      _match: blockRegex(NP_TABLE_R),\n      _order: Priority.HIGH,\n      _parse: parseTable,\n      _react(node, output, state) {\n        return (\n          <table key={state._key}>\n            <thead>\n              <tr>\n                {node._header.map(function generateHeaderCell(content, i) {\n                  return (\n                    <th key={i} style={getTableStyle(node, i)}>\n                      {output(content, state)}\n                    </th>\n                  )\n                })}\n              </tr>\n            </thead>\n\n            <tbody>\n              {node._cells.map(function generateTableRow(row, i) {\n                return (\n                  <tr key={i}>\n                    {row.map(function generateTableCell(content, c) {\n                      return (\n                        <td key={c} style={getTableStyle(node, c)}>\n                          {output(content, state)}\n                        </td>\n                      )\n                    })}\n                  </tr>\n                )\n              })}\n            </tbody>\n          </table>\n        )\n      },\n    } as MarkdownToJSX.Rule<ReturnType<typeof parseTable>>,\n\n    tableSeparator: {\n      _match: function (source, state) {\n        if (!state._inTable) {\n          return null\n        }\n        state._inline = true\n        return TABLE_SEPARATOR_R.exec(source)\n      },\n      _order: Priority.HIGH,\n      _parse: function () {\n        return { type: 'tableSeparator' }\n      },\n      // These shouldn't be reached, but in case they are, be reasonable:\n      _react() {\n        return ' | '\n      },\n    },\n\n    text: {\n      // Here we look for anything followed by non-symbols,\n      // double newlines, or double-space-newlines\n      // We break on any symbol characters so that this grammar\n      // is easy to extend without needing to modify this regex\n      _match: anyScopeRegex(TEXT_PLAIN_R),\n      _order: Priority.MIN,\n      _parse(capture /*, parse, state*/) {\n        return {\n          _content: capture[0]\n            // nbsp -> unicode equivalent for named chars\n            .replace(HTML_CHAR_CODE_R, (full, inner) => {\n              return options.namedCodesToUnicode[inner]\n                ? options.namedCodesToUnicode[inner]\n                : full\n            }),\n        }\n      },\n      _react(node /*, output, state*/) {\n        return node._content\n      },\n    } as MarkdownToJSX.Rule<{ _content: string }>,\n\n    textBolded: {\n      _match: simpleInlineRegex(TEXT_BOLD_R),\n      _order: Priority.MED,\n      _parse(capture, parse, state) {\n        return {\n          // capture[1] -> the syntax control character\n          // capture[2] -> inner content\n          _content: parse(capture[2], state),\n        }\n      },\n      _react(node, output, state) {\n        return <strong key={state._key}>{output(node._content, state)}</strong>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<MarkdownToJSX.NestedParser>>,\n\n    textEmphasized: {\n      _match: simpleInlineRegex(TEXT_EMPHASIZED_R),\n      _order: Priority.LOW,\n      _parse(capture, parse, state) {\n        return {\n          // capture[1] -> opening * or _\n          // capture[2] -> inner content\n          _content: parse(capture[2], state),\n        }\n      },\n      _react(node, output, state) {\n        return <em key={state._key}>{output(node._content, state)}</em>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<MarkdownToJSX.NestedParser>>,\n\n    textEscaped: {\n      // We don't allow escaping numbers, letters, or spaces here so that\n      // backslashes used in plain text still get rendered. But allowing\n      // escaping anything else provides a very flexible escape mechanism,\n      // regardless of how this grammar is extended.\n      _match: simpleInlineRegex(TEXT_ESCAPED_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse, state*/) {\n        return {\n          _content: capture[1],\n          type: 'text',\n        }\n      },\n    },\n\n    textMarked: {\n      _match: simpleInlineRegex(TEXT_MARKED_R),\n      _order: Priority.LOW,\n      _parse: parseCaptureInline,\n      _react(node, output, state) {\n        return <mark key={state._key}>{output(node._content, state)}</mark>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<typeof parseCaptureInline>>,\n\n    textStrikethroughed: {\n      _match: simpleInlineRegex(TEXT_STRIKETHROUGHED_R),\n      _order: Priority.LOW,\n      _parse: parseCaptureInline,\n      _react(node, output, state) {\n        return <del key={state._key}>{output(node._content, state)}</del>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<typeof parseCaptureInline>>,\n  }\n\n  // Object.keys(rules).forEach(key => {\n  //   let { _match: match, _parse: parse } = rules[key]\n\n  //   rules[key]._match = (...args) => {\n  //     const start = performance.now()\n  //     const result = match(...args)\n  //     const delta = performance.now() - start\n\n  //     if (delta > 5)\n  //       console.warn(\n  //         `Slow match for ${key}: ${delta.toFixed(3)}ms, input: ${args[0]}`\n  //       )\n\n  //     return result\n  //   }\n\n  //   rules[key]._parse = (...args) => {\n  //     const start = performance.now()\n  //     const result = parse(...args)\n  //     const delta = performance.now() - start\n\n  //     if (delta > 5)\n  //       console.warn(`Slow parse for ${key}: ${delta.toFixed(3)}ms`)\n\n  //     console.log(`${key}:parse`, `${delta.toFixed(3)}ms`, args[0])\n\n  //     return result\n  //   }\n  // })\n\n  if (options.disableParsingRawHTML !== true) {\n    rules.htmlBlock = {\n      /**\n       * find the first matching end tag and process the interior\n       */\n      _match: anyScopeRegex(HTML_BLOCK_ELEMENT_R),\n      _order: Priority.HIGH,\n      _parse(capture, parse, state) {\n        const [, whitespace] = capture[3].match(HTML_LEFT_TRIM_AMOUNT_R)\n        const trimmer = new RegExp(`^${whitespace}`, 'gm')\n        const trimmed = capture[3].replace(trimmer, '')\n\n        const parseFunc = containsBlockSyntax(trimmed)\n          ? parseBlock\n          : parseInline\n\n        const tagName = capture[1].toLowerCase() as MarkdownToJSX.HTMLTags\n        const noInnerParse =\n          DO_NOT_PROCESS_HTML_ELEMENTS.indexOf(tagName) !== -1\n\n        state._inAnchor = state._inAnchor || tagName === 'a'\n\n        /**\n         * if another html block is detected within, parse as block,\n         * otherwise parse as inline to pick up any further markdown\n         */\n        const content = noInnerParse\n          ? capture[3]\n          : parseFunc(parse, trimmed, state)\n\n        state._inAnchor = false\n\n        return {\n          _attrs: attrStringToMap(capture[2]),\n          _content: content,\n          _noInnerParse: noInnerParse,\n          _tag: noInnerParse ? tagName : capture[1],\n        }\n      },\n      _react(node, output, state) {\n        return (\n          // @ts-ignore\n          <node._tag key={state._key} {...node._attrs}>\n            {node._noInnerParse\n              ? (node._content as string)\n              : output(node._content as MarkdownToJSX.ParserResult, state)}\n          </node._tag>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      _attrs: ReturnType<typeof attrStringToMap>\n      _content: string | ReturnType<MarkdownToJSX.NestedParser>\n      _noInnerParse: Boolean\n      _tag: string\n    }>\n\n    rules.htmlSelfClosing = {\n      /**\n       * find the first matching end tag and process the interior\n       */\n      _match: anyScopeRegex(HTML_SELF_CLOSING_ELEMENT_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse, state*/) {\n        return {\n          _attrs: attrStringToMap(capture[2] || ''),\n          _tag: capture[1],\n        }\n      },\n      _react(node, output, state) {\n        return <node._tag {...node._attrs} key={state._key} />\n      },\n    } as MarkdownToJSX.Rule<{\n      _attrs: ReturnType<typeof attrStringToMap>\n      _tag: string\n    }>\n  }\n\n  const parser = parserFor(rules)\n  const emitter: Function = reactFor(ruleOutput(rules))\n\n  const jsx = compile(markdown)\n\n  if (footnotes.length) {\n    return (\n      <div>\n        {jsx}\n        <footer key=\"footer\">\n          {footnotes.map(function createFootnote(def) {\n            return (\n              <div id={options.slugify(def._identifier)} key={def._identifier}>\n                {def._identifier}\n                {emitter(parser(def._footnote, { _inline: true }))}\n              </div>\n            )\n          })}\n        </footer>\n      </div>\n    )\n  }\n\n  return jsx\n}\n\n/**\n * A simple HOC for easy React use. Feed the markdown content as a direct child\n * and the rest is taken care of automatically.\n */\nconst Markdown: React.FC<{\n  [key: string]: any\n  children: string\n  options?: MarkdownToJSX.Options\n}> = ({ children, options, ...props }) => {\n  if (process.env.NODE_ENV !== 'production' && typeof children !== 'string') {\n    console.error('markdown-to-jsx: <Markdown> component only accepts a single string as a child, received:', children)\n  }\n\n  return React.cloneElement(\n    compiler(children, options),\n    props as JSX.IntrinsicAttributes\n  )\n}\n\nexport default Markdown\n"],
  "mappings": "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",
  "names": ["ATTRIBUTE_TO_JSX_PROP_MAP", "reduce", "obj", "x", "toLowerCase", "for", "namedCodesToUnicode", "amp", "apos", "gt", "lt", "nbsp", "quot", "DO_NOT_PROCESS_HTML_ELEMENTS", "ATTR_EXTRACTOR_R", "AUTOLINK_MAILTO_CHECK_R", "BLOCK_END_R", "BLOCKQUOTE_R", "BLOCKQUOTE_TRIM_LEFT_MULTILINE_R", "BREAK_LINE_R", "BREAK_THEMATIC_R", "CODE_BLOCK_FENCED_R", "CODE_BLOCK_R", "CODE_INLINE_R", "CONSECUTIVE_NEWLINE_R", "CR_NEWLINE_R", "FOOTNOTE_R", "FOOTNOTE_REFERENCE_R", "FORMFEED_R", "GFM_TASK_R", "HEADING_R", "HEADING_ATX_COMPLIANT_R", "HEADING_SETEXT_R", "HTML_BLOCK_ELEMENT_R", "HTML_CHAR_CODE_R", "HTML_COMMENT_R", "HTML_CUSTOM_ATTR_R", "HTML_SELF_CLOSING_ELEMENT_R", "INTERPOLATION_R", "LINK_AUTOLINK_BARE_URL_R", "LINK_AUTOLINK_MAILTO_R", "LINK_AUTOLINK_R", "CAPTURE_LETTER_AFTER_HYPHEN", "NP_TABLE_R", "REFERENCE_IMAGE_OR_LINK", "REFERENCE_IMAGE_R", "REFERENCE_LINK_R", "SQUARE_BRACKETS_R", "SHOULD_RENDER_AS_BLOCK_R", "TAB_R", "TABLE_SEPARATOR_R", "TABLE_TRIM_PIPES", "TABLE_CELL_END_TRIM", "TABLE_CENTER_ALIGN", "TABLE_LEFT_ALIGN", "TABLE_RIGHT_ALIGN", "TEXT_BOLD_R", "TEXT_EMPHASIZED_R", "TEXT_MARKED_R", "TEXT_STRIKETHROUGHED_R", "TEXT_ESCAPED_R", "TEXT_PLAIN_R", "TRIM_STARTING_NEWLINES", "HTML_LEFT_TRIM_AMOUNT_R", "UNESCAPE_URL_R", "LIST_ITEM_END_R", "LIST_LOOKBEHIND_R", "ORDERED_LIST_BULLET", "UNORDERED_LIST_BULLET", "generateListItemPrefix", "type", "ORDERED_LIST_ITEM_PREFIX", "UNORDERED_LIST_ITEM_PREFIX", "generateListItemPrefixRegex", "RegExp", "ORDERED_LIST_ITEM_PREFIX_R", "UNORDERED_LIST_ITEM_PREFIX_R", "generateListItemRegex", "ORDERED_LIST_ITEM_R", "UNORDERED_LIST_ITEM_R", "generateListRegex", "bullet", "ORDERED_LIST_R", "UNORDERED_LIST_R", "generateListRule", "h", "ordered", "LIST_R", "LIST_ITEM_R", "LIST_ITEM_PREFIX_R", "_match", "source", "state", "prevCapture", "isStartOfLine", "exec", "_list", "_inline", "_simple", "_order", "Priority", "HIGH", "_parse", "capture", "parse", "start", "items", "replace", "match", "lastItemWasAParagraph", "_items", "map", "item", "i", "space", "length", "spaceRegex", "content", "isLastItem", "thisItemIsAParagraph", "indexOf", "oldStateInline", "oldStateList", "adjustedContent", "result", "_ordered", "_start", "_react", "node", "output", "key", "_key", "LINK_R", "IMAGE_R", "NON_PARAGRAPH_BLOCK_SYNTAXES", "BLOCK_SYNTAXES", "slugify", "str", "parseTableAlignCapture", "alignCapture", "test", "parseTableRow", "prevInTable", "_inTable", "tableRow", "trim", "cells", "forEach", "push", "_content", "parseTable", "header", "align", "split", "rowText", "_align", "_cells", "_header", "getTableStyle", "colIndex", "textAlign", "inlineRegex", "regex", "simpleInlineRegex", "blockRegex", "anyScopeRegex", "matchParagraph", "prevCapturedString", "endsWith", "every", "line", "some", "captured", "trimEnd", "sanitizeUrl", "url", "decodeURIComponent", "e", "unescapeUrl", "rawUrlString", "parseInline", "isCurrentlyInline", "isCurrentlySimple", "parseSimpleInline", "parseBlock", "parseCaptureInline", "captureNothing", "renderNothing", "cx", "args", "filter", "Boolean", "join", "get", "src", "path", "fb", "ptr", "frags", "shift", "compiler", "markdown", "options", "overrides", "_extends", "createElementFn", "createElement", "tag", "props", "children", "overrideProps", "override", "className", "undefined", "compile", "input", "forceInline", "forceBlock", "arr", "emitter", "parser", "pop", "wrapper", "jsx", "forceWrapper", "attrStringToMap", "attributes", "raw", "index", "delimiterIdx", "_", "letter", "toUpperCase", "slice", "value", "first", "mappedKey", "normalizedValue", "styles", "kvPair", "substr", "cloneElement", "footnotes", "refs", "rules", "blockQuote", "breakLine", "__", "breakThematic", "codeBlock", "MAX", "_lang", "_attrs", "codeFenced", "codeInline", "LOW", "footnote", "_footnote", "_identifier", "footnoteReference", "_target", "href", "gfmTask", "_completed", "checked", "readOnly", "heading", "enforceAtxHeadings", "_id", "_level", "id", "headingSetext", "htmlComment", "image", "_alt", "_title", "alt", "title", "link", "linkAngleBraceStyleDetector", "linkBareUrlDetector", "_inAnchor", "linkMailtoDetector", "address", "target", "orderedList", "unorderedList", "newlineCoalescer", "paragraph", "ref", "refImage", "_ref", "refLink", "_fallbackContent", "table", "style", "row", "c", "tableSeparator", "text", "MIN", "full", "inner", "textBolded", "MED", "textEmphasized", "textEscaped", "textMarked", "textStrikethroughed", "disableParsingRawHTML", "htmlBlock", "whitespace", "trimmer", "trimmed", "parseFunc", "r", "tagName", "noInnerParse", "_noInnerParse", "_tag", "htmlSelfClosing", "ruleList", "Object", "keys", "nestedParse", "ruleType", "rule", "currCaptureString", "substring", "parsed", "sort", "typeA", "typeB", "orderA", "orderB", "outputFunc", "ast", "nestedReactOutput", "Array", "isArray", "oldKey", "lastWasString", "nodeOut", "isString", "def", "_excluded"]
}
