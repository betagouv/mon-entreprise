{
  "version": 3,
  "sources": ["../../../../node_modules/@sentry/src/is.ts", "../../../../node_modules/@sentry/src/worldwide.ts", "../../../../node_modules/@sentry/src/logger.ts", "../../../../node_modules/@sentry/src/baggage.ts", "../../../../node_modules/@sentry/src/browser.ts", "../../../../node_modules/@sentry/src/string.ts", "../../../../node_modules/@sentry/src/object.ts", "../../../../node_modules/@sentry/src/misc.ts", "../../../../node_modules/@sentry/src/tracing.ts", "../../../../node_modules/@sentry/src/aggregate-errors.ts", "../../../../node_modules/@sentry/src/dsn.ts", "../../../../node_modules/@sentry/src/error.ts", "../../../../node_modules/@sentry/src/stacktrace.ts", "../../../../node_modules/@sentry/src/supports.ts", "../../../../node_modules/@sentry/src/vendor/supportsHistory.ts", "../../../../node_modules/@sentry/src/instrument.ts", "../../../../node_modules/@sentry/src/memo.ts", "../../../../node_modules/@sentry/src/env.ts", "../../../../node_modules/@sentry/src/node.ts", "../../../../node_modules/@sentry/src/normalize.ts", "../../../../node_modules/@sentry/src/path.ts", "../../../../node_modules/@sentry/src/syncpromise.ts", "../../../../node_modules/@sentry/src/promisebuffer.ts", "../../../../node_modules/@sentry/src/url.ts", "../../../../node_modules/@sentry/src/requestdata.ts", "../../../../node_modules/@sentry/src/severity.ts", "../../../../node_modules/@sentry/src/time.ts", "../../../../node_modules/@sentry/src/envelope.ts", "../../../../node_modules/@sentry/src/clientreport.ts", "../../../../node_modules/@sentry/src/ratelimit.ts"],
  "sourcesContent": ["/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n\nimport type { PolymorphicEvent, Primitive } from '@sentry/types';\n\n// eslint-disable-next-line @typescript-eslint/unbound-method\nconst objectToString = Object.prototype.toString;\n\n/**\n * Checks whether given value's type is one of a few Error or Error-like\n * {@link isError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isError(wat: unknown): wat is Error {\n  switch (objectToString.call(wat)) {\n    case '[object Error]':\n    case '[object Exception]':\n    case '[object DOMException]':\n      return true;\n    default:\n      return isInstanceOf(wat, Error);\n  }\n}\n/**\n * Checks whether given value is an instance of the given built-in class.\n *\n * @param wat The value to be checked\n * @param className\n * @returns A boolean representing the result.\n */\nfunction isBuiltin(wat: unknown, className: string): boolean {\n  return objectToString.call(wat) === `[object ${className}]`;\n}\n\n/**\n * Checks whether given value's type is ErrorEvent\n * {@link isErrorEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isErrorEvent(wat: unknown): boolean {\n  return isBuiltin(wat, 'ErrorEvent');\n}\n\n/**\n * Checks whether given value's type is DOMError\n * {@link isDOMError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isDOMError(wat: unknown): boolean {\n  return isBuiltin(wat, 'DOMError');\n}\n\n/**\n * Checks whether given value's type is DOMException\n * {@link isDOMException}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isDOMException(wat: unknown): boolean {\n  return isBuiltin(wat, 'DOMException');\n}\n\n/**\n * Checks whether given value's type is a string\n * {@link isString}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isString(wat: unknown): wat is string {\n  return isBuiltin(wat, 'String');\n}\n\n/**\n * Checks whether given value is a primitive (undefined, null, number, boolean, string, bigint, symbol)\n * {@link isPrimitive}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isPrimitive(wat: unknown): wat is Primitive {\n  return wat === null || (typeof wat !== 'object' && typeof wat !== 'function');\n}\n\n/**\n * Checks whether given value's type is an object literal\n * {@link isPlainObject}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isPlainObject(wat: unknown): wat is Record<string, unknown> {\n  return isBuiltin(wat, 'Object');\n}\n\n/**\n * Checks whether given value's type is an Event instance\n * {@link isEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isEvent(wat: unknown): wat is PolymorphicEvent {\n  return typeof Event !== 'undefined' && isInstanceOf(wat, Event);\n}\n\n/**\n * Checks whether given value's type is an Element instance\n * {@link isElement}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isElement(wat: unknown): boolean {\n  return typeof Element !== 'undefined' && isInstanceOf(wat, Element);\n}\n\n/**\n * Checks whether given value's type is an regexp\n * {@link isRegExp}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isRegExp(wat: unknown): wat is RegExp {\n  return isBuiltin(wat, 'RegExp');\n}\n\n/**\n * Checks whether given value has a then function.\n * @param wat A value to be checked.\n */\nexport function isThenable(wat: any): wat is PromiseLike<any> {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return Boolean(wat && wat.then && typeof wat.then === 'function');\n}\n\n/**\n * Checks whether given value's type is a SyntheticEvent\n * {@link isSyntheticEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isSyntheticEvent(wat: unknown): boolean {\n  return isPlainObject(wat) && 'nativeEvent' in wat && 'preventDefault' in wat && 'stopPropagation' in wat;\n}\n\n/**\n * Checks whether given value is NaN\n * {@link isNaN}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isNaN(wat: unknown): boolean {\n  return typeof wat === 'number' && wat !== wat;\n}\n\n/**\n * Checks whether given value's type is an instance of provided constructor.\n * {@link isInstanceOf}.\n *\n * @param wat A value to be checked.\n * @param base A constructor to be used in a check.\n * @returns A boolean representing the result.\n */\nexport function isInstanceOf(wat: any, base: any): boolean {\n  try {\n    return wat instanceof base;\n  } catch (_e) {\n    return false;\n  }\n}\n\ninterface VueViewModel {\n  // Vue3\n  __isVue?: boolean;\n  // Vue2\n  _isVue?: boolean;\n}\n/**\n * Checks whether given value's type is a Vue ViewModel.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isVueViewModel(wat: unknown): boolean {\n  // Not using Object.prototype.toString because in Vue 3 it would read the instance's Symbol(Symbol.toStringTag) property.\n  return !!(typeof wat === 'object' && wat !== null && ((wat as VueViewModel).__isVue || (wat as VueViewModel)._isVue));\n}\n", "/**\n * NOTE: In order to avoid circular dependencies, if you add a function to this module and it needs to print something,\n * you must either a) use `console.log` rather than the logger, or b) put your function elsewhere.\n *\n * Note: This file was originally called `global.ts`, but was changed to unblock users which might be doing\n * string replaces with bundlers like Vite for `global` (would break imports that rely on importing from utils/src/global).\n *\n * Why worldwide?\n *\n * Why not?\n */\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport type { Integration } from '@sentry/types';\n\nimport type { SdkSource } from './env';\n\n/** Internal global with common properties and Sentry extensions  */\nexport interface InternalGlobal {\n  navigator?: { userAgent?: string };\n  console: Console;\n  Sentry?: {\n    Integrations?: Integration[];\n  };\n  onerror?: {\n    (msg: unknown, url: unknown, line: unknown, column: unknown, error: unknown): boolean;\n    __SENTRY_INSTRUMENTED__?: true;\n    __SENTRY_LOADER__?: true;\n  };\n  onunhandledrejection?: {\n    (event: unknown): boolean;\n    __SENTRY_INSTRUMENTED__?: true;\n    __SENTRY_LOADER__?: true;\n  };\n  SENTRY_ENVIRONMENT?: string;\n  SENTRY_DSN?: string;\n  SENTRY_RELEASE?: {\n    id?: string;\n  };\n  SENTRY_SDK_SOURCE?: SdkSource;\n  /**\n   * Debug IDs are indirectly injected by Sentry CLI or bundler plugins to directly reference a particular source map\n   * for resolving of a source file. The injected code will place an entry into the record for each loaded bundle/JS\n   * file.\n   */\n  _sentryDebugIds?: Record<string, string>;\n  __SENTRY__: {\n    globalEventProcessors: any;\n    hub: any;\n    logger: any;\n    extensions?: {\n      /** Extension methods for the hub, which are bound to the current Hub instance */\n      // eslint-disable-next-line @typescript-eslint/ban-types\n      [key: string]: Function;\n    };\n  };\n  /**\n   * Raw module metadata that is injected by bundler plugins.\n   *\n   * Keys are `error.stack` strings, values are the metadata.\n   */\n  _sentryModuleMetadata?: Record<string, any>;\n}\n\n// The code below for 'isGlobalObj' and 'GLOBAL_OBJ' was copied from core-js before modification\n// https://github.com/zloirock/core-js/blob/1b944df55282cdc99c90db5f49eb0b6eda2cc0a3/packages/core-js/internals/global.js\n// core-js has the following licence:\n//\n// Copyright (c) 2014-2022 Denis Pushkarev\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/** Returns 'obj' if it's the global object, otherwise returns undefined */\nfunction isGlobalObj(obj: { Math?: Math }): any | undefined {\n  return obj && obj.Math == Math ? obj : undefined;\n}\n\n/** Get's the global object for the current JavaScript runtime */\nexport const GLOBAL_OBJ: InternalGlobal =\n  (typeof globalThis == 'object' && isGlobalObj(globalThis)) ||\n  // eslint-disable-next-line no-restricted-globals\n  (typeof window == 'object' && isGlobalObj(window)) ||\n  (typeof self == 'object' && isGlobalObj(self)) ||\n  (typeof global == 'object' && isGlobalObj(global)) ||\n  (function (this: any) {\n    return this;\n  })() ||\n  {};\n\n/**\n * @deprecated Use GLOBAL_OBJ instead or WINDOW from @sentry/browser. This will be removed in v8\n */\nexport function getGlobalObject<T>(): T & InternalGlobal {\n  return GLOBAL_OBJ as T & InternalGlobal;\n}\n\n/**\n * Returns a global singleton contained in the global `__SENTRY__` object.\n *\n * If the singleton doesn't already exist in `__SENTRY__`, it will be created using the given factory\n * function and added to the `__SENTRY__` object.\n *\n * @param name name of the global singleton on __SENTRY__\n * @param creator creator Factory function to create the singleton if it doesn't already exist on `__SENTRY__`\n * @param obj (Optional) The global object on which to look for `__SENTRY__`, if not `GLOBAL_OBJ`'s return value\n * @returns the singleton\n */\nexport function getGlobalSingleton<T>(name: keyof InternalGlobal['__SENTRY__'], creator: () => T, obj?: unknown): T {\n  const gbl = (obj || GLOBAL_OBJ) as InternalGlobal;\n  const __SENTRY__ = (gbl.__SENTRY__ = gbl.__SENTRY__ || {});\n  const singleton = __SENTRY__[name] || (__SENTRY__[name] = creator());\n  return singleton;\n}\n", "import { GLOBAL_OBJ } from './worldwide';\n\n/** Prefix for logging strings */\nconst PREFIX = 'Sentry Logger ';\n\nexport const CONSOLE_LEVELS = ['debug', 'info', 'warn', 'error', 'log', 'assert', 'trace'] as const;\nexport type ConsoleLevel = (typeof CONSOLE_LEVELS)[number];\n\ntype LoggerMethod = (...args: unknown[]) => void;\ntype LoggerConsoleMethods = Record<ConsoleLevel, LoggerMethod>;\n\n/** This may be mutated by the console instrumentation. */\nexport const originalConsoleMethods: {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [key in ConsoleLevel]?: (...args: any[]) => void;\n} = {};\n\n/** JSDoc */\ninterface Logger extends LoggerConsoleMethods {\n  disable(): void;\n  enable(): void;\n}\n\n/**\n * Temporarily disable sentry console instrumentations.\n *\n * @param callback The function to run against the original `console` messages\n * @returns The results of the callback\n */\nexport function consoleSandbox<T>(callback: () => T): T {\n  if (!('console' in GLOBAL_OBJ)) {\n    return callback();\n  }\n\n  const console = GLOBAL_OBJ.console as Console;\n  const wrappedFuncs: Partial<LoggerConsoleMethods> = {};\n\n  const wrappedLevels = Object.keys(originalConsoleMethods) as ConsoleLevel[];\n\n  // Restore all wrapped console methods\n  wrappedLevels.forEach(level => {\n    const originalConsoleMethod = originalConsoleMethods[level] as LoggerMethod;\n    wrappedFuncs[level] = console[level] as LoggerMethod | undefined;\n    console[level] = originalConsoleMethod;\n  });\n\n  try {\n    return callback();\n  } finally {\n    // Revert restoration to wrapped state\n    wrappedLevels.forEach(level => {\n      console[level] = wrappedFuncs[level] as LoggerMethod;\n    });\n  }\n}\n\nfunction makeLogger(): Logger {\n  let enabled = false;\n  const logger: Partial<Logger> = {\n    enable: () => {\n      enabled = true;\n    },\n    disable: () => {\n      enabled = false;\n    },\n  };\n\n  if (__DEBUG_BUILD__) {\n    CONSOLE_LEVELS.forEach(name => {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      logger[name] = (...args: any[]) => {\n        if (enabled) {\n          consoleSandbox(() => {\n            GLOBAL_OBJ.console[name](`${PREFIX}[${name}]:`, ...args);\n          });\n        }\n      };\n    });\n  } else {\n    CONSOLE_LEVELS.forEach(name => {\n      logger[name] = () => undefined;\n    });\n  }\n\n  return logger as Logger;\n}\n\nexport const logger = makeLogger();\n", "import type { DynamicSamplingContext } from '@sentry/types';\n\nimport { isString } from './is';\nimport { logger } from './logger';\n\nexport const BAGGAGE_HEADER_NAME = 'baggage';\n\nexport const SENTRY_BAGGAGE_KEY_PREFIX = 'sentry-';\n\nexport const SENTRY_BAGGAGE_KEY_PREFIX_REGEX = /^sentry-/;\n\n/**\n * Max length of a serialized baggage string\n *\n * https://www.w3.org/TR/baggage/#limits\n */\nexport const MAX_BAGGAGE_STRING_LENGTH = 8192;\n\n/**\n * Takes a baggage header and turns it into Dynamic Sampling Context, by extracting all the \"sentry-\" prefixed values\n * from it.\n *\n * @param baggageHeader A very bread definition of a baggage header as it might appear in various frameworks.\n * @returns The Dynamic Sampling Context that was found on `baggageHeader`, if there was any, `undefined` otherwise.\n */\nexport function baggageHeaderToDynamicSamplingContext(\n  // Very liberal definition of what any incoming header might look like\n  baggageHeader: string | string[] | number | null | undefined | boolean,\n): Partial<DynamicSamplingContext> | undefined {\n  if (!isString(baggageHeader) && !Array.isArray(baggageHeader)) {\n    return undefined;\n  }\n\n  // Intermediary object to store baggage key value pairs of incoming baggage headers on.\n  // It is later used to read Sentry-DSC-values from.\n  let baggageObject: Readonly<Record<string, string>> = {};\n\n  if (Array.isArray(baggageHeader)) {\n    // Combine all baggage headers into one object containing the baggage values so we can later read the Sentry-DSC-values from it\n    baggageObject = baggageHeader.reduce<Record<string, string>>((acc, curr) => {\n      const currBaggageObject = baggageHeaderToObject(curr);\n      return {\n        ...acc,\n        ...currBaggageObject,\n      };\n    }, {});\n  } else {\n    // Return undefined if baggage header is an empty string (technically an empty baggage header is not spec conform but\n    // this is how we choose to handle it)\n    if (!baggageHeader) {\n      return undefined;\n    }\n\n    baggageObject = baggageHeaderToObject(baggageHeader);\n  }\n\n  // Read all \"sentry-\" prefixed values out of the baggage object and put it onto a dynamic sampling context object.\n  const dynamicSamplingContext = Object.entries(baggageObject).reduce<Record<string, string>>((acc, [key, value]) => {\n    if (key.match(SENTRY_BAGGAGE_KEY_PREFIX_REGEX)) {\n      const nonPrefixedKey = key.slice(SENTRY_BAGGAGE_KEY_PREFIX.length);\n      acc[nonPrefixedKey] = value;\n    }\n    return acc;\n  }, {});\n\n  // Only return a dynamic sampling context object if there are keys in it.\n  // A keyless object means there were no sentry values on the header, which means that there is no DSC.\n  if (Object.keys(dynamicSamplingContext).length > 0) {\n    return dynamicSamplingContext as Partial<DynamicSamplingContext>;\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Turns a Dynamic Sampling Object into a baggage header by prefixing all the keys on the object with \"sentry-\".\n *\n * @param dynamicSamplingContext The Dynamic Sampling Context to turn into a header. For convenience and compatibility\n * with the `getDynamicSamplingContext` method on the Transaction class ,this argument can also be `undefined`. If it is\n * `undefined` the function will return `undefined`.\n * @returns a baggage header, created from `dynamicSamplingContext`, or `undefined` either if `dynamicSamplingContext`\n * was `undefined`, or if `dynamicSamplingContext` didn't contain any values.\n */\nexport function dynamicSamplingContextToSentryBaggageHeader(\n  // this also takes undefined for convenience and bundle size in other places\n  dynamicSamplingContext?: Partial<DynamicSamplingContext>,\n): string | undefined {\n  if (!dynamicSamplingContext) {\n    return undefined;\n  }\n\n  // Prefix all DSC keys with \"sentry-\" and put them into a new object\n  const sentryPrefixedDSC = Object.entries(dynamicSamplingContext).reduce<Record<string, string>>(\n    (acc, [dscKey, dscValue]) => {\n      if (dscValue) {\n        acc[`${SENTRY_BAGGAGE_KEY_PREFIX}${dscKey}`] = dscValue;\n      }\n      return acc;\n    },\n    {},\n  );\n\n  return objectToBaggageHeader(sentryPrefixedDSC);\n}\n\n/**\n * Will parse a baggage header, which is a simple key-value map, into a flat object.\n *\n * @param baggageHeader The baggage header to parse.\n * @returns a flat object containing all the key-value pairs from `baggageHeader`.\n */\nfunction baggageHeaderToObject(baggageHeader: string): Record<string, string> {\n  return baggageHeader\n    .split(',')\n    .map(baggageEntry => baggageEntry.split('=').map(keyOrValue => decodeURIComponent(keyOrValue.trim())))\n    .reduce<Record<string, string>>((acc, [key, value]) => {\n      acc[key] = value;\n      return acc;\n    }, {});\n}\n\n/**\n * Turns a flat object (key-value pairs) into a baggage header, which is also just key-value pairs.\n *\n * @param object The object to turn into a baggage header.\n * @returns a baggage header string, or `undefined` if the object didn't have any values, since an empty baggage header\n * is not spec compliant.\n */\nfunction objectToBaggageHeader(object: Record<string, string>): string | undefined {\n  if (Object.keys(object).length === 0) {\n    // An empty baggage header is not spec compliant: We return undefined.\n    return undefined;\n  }\n\n  return Object.entries(object).reduce((baggageHeader, [objectKey, objectValue], currentIndex) => {\n    const baggageEntry = `${encodeURIComponent(objectKey)}=${encodeURIComponent(objectValue)}`;\n    const newBaggageHeader = currentIndex === 0 ? baggageEntry : `${baggageHeader},${baggageEntry}`;\n    if (newBaggageHeader.length > MAX_BAGGAGE_STRING_LENGTH) {\n      __DEBUG_BUILD__ &&\n        logger.warn(\n          `Not adding key: ${objectKey} with val: ${objectValue} to baggage header due to exceeding baggage size limits.`,\n        );\n      return baggageHeader;\n    } else {\n      return newBaggageHeader;\n    }\n  }, '');\n}\n", "import { isString } from './is';\nimport { getGlobalObject } from './worldwide';\n\n// eslint-disable-next-line deprecation/deprecation\nconst WINDOW = getGlobalObject<Window>();\n\nconst DEFAULT_MAX_STRING_LENGTH = 80;\n\n/**\n * Given a child DOM element, returns a query-selector statement describing that\n * and its ancestors\n * e.g. [HTMLElement] => body > div > input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nexport function htmlTreeAsString(\n  elem: unknown,\n  options: string[] | { keyAttrs?: string[]; maxStringLength?: number } = {},\n): string {\n  type SimpleNode = {\n    parentNode: SimpleNode;\n  } | null;\n\n  // try/catch both:\n  // - accessing event.target (see getsentry/raven-js#838, #768)\n  // - `htmlTreeAsString` because it's complex, and just accessing the DOM incorrectly\n  // - can throw an exception in some circumstances.\n  try {\n    let currentElem = elem as SimpleNode;\n    const MAX_TRAVERSE_HEIGHT = 5;\n    const out = [];\n    let height = 0;\n    let len = 0;\n    const separator = ' > ';\n    const sepLength = separator.length;\n    let nextStr;\n    const keyAttrs = Array.isArray(options) ? options : options.keyAttrs;\n    const maxStringLength = (!Array.isArray(options) && options.maxStringLength) || DEFAULT_MAX_STRING_LENGTH;\n\n    while (currentElem && height++ < MAX_TRAVERSE_HEIGHT) {\n      nextStr = _htmlElementAsString(currentElem, keyAttrs);\n      // bail out if\n      // - nextStr is the 'html' element\n      // - the length of the string that would be created exceeds maxStringLength\n      //   (ignore this limit if we are on the first iteration)\n      if (nextStr === 'html' || (height > 1 && len + out.length * sepLength + nextStr.length >= maxStringLength)) {\n        break;\n      }\n\n      out.push(nextStr);\n\n      len += nextStr.length;\n      currentElem = currentElem.parentNode;\n    }\n\n    return out.reverse().join(separator);\n  } catch (_oO) {\n    return '<unknown>';\n  }\n}\n\n/**\n * Returns a simple, query-selector representation of a DOM element\n * e.g. [HTMLElement] => input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nfunction _htmlElementAsString(el: unknown, keyAttrs?: string[]): string {\n  const elem = el as {\n    tagName?: string;\n    id?: string;\n    className?: string;\n    getAttribute(key: string): string;\n  };\n\n  const out = [];\n  let className;\n  let classes;\n  let key;\n  let attr;\n  let i;\n\n  if (!elem || !elem.tagName) {\n    return '';\n  }\n\n  out.push(elem.tagName.toLowerCase());\n\n  // Pairs of attribute keys defined in `serializeAttribute` and their values on element.\n  const keyAttrPairs =\n    keyAttrs && keyAttrs.length\n      ? keyAttrs.filter(keyAttr => elem.getAttribute(keyAttr)).map(keyAttr => [keyAttr, elem.getAttribute(keyAttr)])\n      : null;\n\n  if (keyAttrPairs && keyAttrPairs.length) {\n    keyAttrPairs.forEach(keyAttrPair => {\n      out.push(`[${keyAttrPair[0]}=\"${keyAttrPair[1]}\"]`);\n    });\n  } else {\n    if (elem.id) {\n      out.push(`#${elem.id}`);\n    }\n\n    // eslint-disable-next-line prefer-const\n    className = elem.className;\n    if (className && isString(className)) {\n      classes = className.split(/\\s+/);\n      for (i = 0; i < classes.length; i++) {\n        out.push(`.${classes[i]}`);\n      }\n    }\n  }\n  const allowedAttrs = ['aria-label', 'type', 'name', 'title', 'alt'];\n  for (i = 0; i < allowedAttrs.length; i++) {\n    key = allowedAttrs[i];\n    attr = elem.getAttribute(key);\n    if (attr) {\n      out.push(`[${key}=\"${attr}\"]`);\n    }\n  }\n  return out.join('');\n}\n\n/**\n * A safe form of location.href\n */\nexport function getLocationHref(): string {\n  try {\n    return WINDOW.document.location.href;\n  } catch (oO) {\n    return '';\n  }\n}\n\n/**\n * Gets a DOM element by using document.querySelector.\n *\n * This wrapper will first check for the existance of the function before\n * actually calling it so that we don't have to take care of this check,\n * every time we want to access the DOM.\n *\n * Reason: DOM/querySelector is not available in all environments.\n *\n * We have to cast to any because utils can be consumed by a variety of environments,\n * and we don't want to break TS users. If you know what element will be selected by\n * `document.querySelector`, specify it as part of the generic call. For example,\n * `const element = getDomElement<Element>('selector');`\n *\n * @param selector the selector string passed on to document.querySelector\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function getDomElement<E = any>(selector: string): E | null {\n  if (WINDOW.document && WINDOW.document.querySelector) {\n    return WINDOW.document.querySelector(selector) as unknown as E;\n  }\n  return null;\n}\n", "import { isRegExp, isString, isVueViewModel } from './is';\n\nexport { escapeStringForRegex } from './vendor/escapeStringForRegex';\n\n/**\n * Truncates given string to the maximum characters count\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string (0 = unlimited)\n * @returns string Encoded\n */\nexport function truncate(str: string, max: number = 0): string {\n  if (typeof str !== 'string' || max === 0) {\n    return str;\n  }\n  return str.length <= max ? str : `${str.slice(0, max)}...`;\n}\n\n/**\n * This is basically just `trim_line` from\n * https://github.com/getsentry/sentry/blob/master/src/sentry/lang/javascript/processor.py#L67\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string\n * @returns string Encoded\n */\nexport function snipLine(line: string, colno: number): string {\n  let newLine = line;\n  const lineLength = newLine.length;\n  if (lineLength <= 150) {\n    return newLine;\n  }\n  if (colno > lineLength) {\n    // eslint-disable-next-line no-param-reassign\n    colno = lineLength;\n  }\n\n  let start = Math.max(colno - 60, 0);\n  if (start < 5) {\n    start = 0;\n  }\n\n  let end = Math.min(start + 140, lineLength);\n  if (end > lineLength - 5) {\n    end = lineLength;\n  }\n  if (end === lineLength) {\n    start = Math.max(end - 140, 0);\n  }\n\n  newLine = newLine.slice(start, end);\n  if (start > 0) {\n    newLine = `'{snip} ${newLine}`;\n  }\n  if (end < lineLength) {\n    newLine += ' {snip}';\n  }\n\n  return newLine;\n}\n\n/**\n * Join values in array\n * @param input array of values to be joined together\n * @param delimiter string to be placed in-between values\n * @returns Joined values\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function safeJoin(input: any[], delimiter?: string): string {\n  if (!Array.isArray(input)) {\n    return '';\n  }\n\n  const output = [];\n  // eslint-disable-next-line @typescript-eslint/prefer-for-of\n  for (let i = 0; i < input.length; i++) {\n    const value = input[i];\n    try {\n      // This is a hack to fix a Vue3-specific bug that causes an infinite loop of\n      // console warnings. This happens when a Vue template is rendered with\n      // an undeclared variable, which we try to stringify, ultimately causing\n      // Vue to issue another warning which repeats indefinitely.\n      // see: https://github.com/getsentry/sentry-javascript/pull/8981\n      if (isVueViewModel(value)) {\n        output.push('[VueViewModel]');\n      } else {\n        output.push(String(value));\n      }\n    } catch (e) {\n      output.push('[value cannot be serialized]');\n    }\n  }\n\n  return output.join(delimiter);\n}\n\n/**\n * Checks if the given value matches a regex or string\n *\n * @param value The string to test\n * @param pattern Either a regex or a string against which `value` will be matched\n * @param requireExactStringMatch If true, `value` must match `pattern` exactly. If false, `value` will match\n * `pattern` if it contains `pattern`. Only applies to string-type patterns.\n */\nexport function isMatchingPattern(\n  value: string,\n  pattern: RegExp | string,\n  requireExactStringMatch: boolean = false,\n): boolean {\n  if (!isString(value)) {\n    return false;\n  }\n\n  if (isRegExp(pattern)) {\n    return pattern.test(value);\n  }\n  if (isString(pattern)) {\n    return requireExactStringMatch ? value === pattern : value.includes(pattern);\n  }\n\n  return false;\n}\n\n/**\n * Test the given string against an array of strings and regexes. By default, string matching is done on a\n * substring-inclusion basis rather than a strict equality basis\n *\n * @param testString The string to test\n * @param patterns The patterns against which to test the string\n * @param requireExactStringMatch If true, `testString` must match one of the given string patterns exactly in order to\n * count. If false, `testString` will match a string pattern if it contains that pattern.\n * @returns\n */\nexport function stringMatchesSomePattern(\n  testString: string,\n  patterns: Array<string | RegExp> = [],\n  requireExactStringMatch: boolean = false,\n): boolean {\n  return patterns.some(pattern => isMatchingPattern(testString, pattern, requireExactStringMatch));\n}\n", "/* eslint-disable max-lines */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport type { WrappedFunction } from '@sentry/types';\n\nimport { htmlTreeAsString } from './browser';\nimport { isElement, isError, isEvent, isInstanceOf, isPlainObject, isPrimitive } from './is';\nimport { logger } from './logger';\nimport { truncate } from './string';\n\n/**\n * Replace a method in an object with a wrapped version of itself.\n *\n * @param source An object that contains a method to be wrapped.\n * @param name The name of the method to be wrapped.\n * @param replacementFactory A higher-order function that takes the original version of the given method and returns a\n * wrapped version. Note: The function returned by `replacementFactory` needs to be a non-arrow function, in order to\n * preserve the correct value of `this`, and the original method must be called using `origMethod.call(this, <other\n * args>)` or `origMethod.apply(this, [<other args>])` (rather than being called directly), again to preserve `this`.\n * @returns void\n */\nexport function fill(source: { [key: string]: any }, name: string, replacementFactory: (...args: any[]) => any): void {\n  if (!(name in source)) {\n    return;\n  }\n\n  const original = source[name] as () => any;\n  const wrapped = replacementFactory(original) as WrappedFunction;\n\n  // Make sure it's a function first, as we need to attach an empty prototype for `defineProperties` to work\n  // otherwise it'll throw \"TypeError: Object.defineProperties called on non-object\"\n  if (typeof wrapped === 'function') {\n    markFunctionWrapped(wrapped, original);\n  }\n\n  source[name] = wrapped;\n}\n\n/**\n * Defines a non-enumerable property on the given object.\n *\n * @param obj The object on which to set the property\n * @param name The name of the property to be set\n * @param value The value to which to set the property\n */\nexport function addNonEnumerableProperty(obj: { [key: string]: unknown }, name: string, value: unknown): void {\n  try {\n    Object.defineProperty(obj, name, {\n      // enumerable: false, // the default, so we can save on bundle size by not explicitly setting it\n      value: value,\n      writable: true,\n      configurable: true,\n    });\n  } catch (o_O) {\n    __DEBUG_BUILD__ && logger.log(`Failed to add non-enumerable property \"${name}\" to object`, obj);\n  }\n}\n\n/**\n * Remembers the original function on the wrapped function and\n * patches up the prototype.\n *\n * @param wrapped the wrapper function\n * @param original the original function that gets wrapped\n */\nexport function markFunctionWrapped(wrapped: WrappedFunction, original: WrappedFunction): void {\n  try {\n    const proto = original.prototype || {};\n    wrapped.prototype = original.prototype = proto;\n    addNonEnumerableProperty(wrapped, '__sentry_original__', original);\n  } catch (o_O) {} // eslint-disable-line no-empty\n}\n\n/**\n * This extracts the original function if available.  See\n * `markFunctionWrapped` for more information.\n *\n * @param func the function to unwrap\n * @returns the unwrapped version of the function if available.\n */\nexport function getOriginalFunction(func: WrappedFunction): WrappedFunction | undefined {\n  return func.__sentry_original__;\n}\n\n/**\n * Encodes given object into url-friendly format\n *\n * @param object An object that contains serializable values\n * @returns string Encoded\n */\nexport function urlEncode(object: { [key: string]: any }): string {\n  return Object.keys(object)\n    .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(object[key])}`)\n    .join('&');\n}\n\n/**\n * Transforms any `Error` or `Event` into a plain object with all of their enumerable properties, and some of their\n * non-enumerable properties attached.\n *\n * @param value Initial source that we have to transform in order for it to be usable by the serializer\n * @returns An Event or Error turned into an object - or the value argurment itself, when value is neither an Event nor\n *  an Error.\n */\nexport function convertToPlainObject<V>(value: V):\n  | {\n      [ownProps: string]: unknown;\n      type: string;\n      target: string;\n      currentTarget: string;\n      detail?: unknown;\n    }\n  | {\n      [ownProps: string]: unknown;\n      message: string;\n      name: string;\n      stack?: string;\n    }\n  | V {\n  if (isError(value)) {\n    return {\n      message: value.message,\n      name: value.name,\n      stack: value.stack,\n      ...getOwnProperties(value),\n    };\n  } else if (isEvent(value)) {\n    const newObj: {\n      [ownProps: string]: unknown;\n      type: string;\n      target: string;\n      currentTarget: string;\n      detail?: unknown;\n    } = {\n      type: value.type,\n      target: serializeEventTarget(value.target),\n      currentTarget: serializeEventTarget(value.currentTarget),\n      ...getOwnProperties(value),\n    };\n\n    if (typeof CustomEvent !== 'undefined' && isInstanceOf(value, CustomEvent)) {\n      newObj.detail = value.detail;\n    }\n\n    return newObj;\n  } else {\n    return value;\n  }\n}\n\n/** Creates a string representation of the target of an `Event` object */\nfunction serializeEventTarget(target: unknown): string {\n  try {\n    return isElement(target) ? htmlTreeAsString(target) : Object.prototype.toString.call(target);\n  } catch (_oO) {\n    return '<unknown>';\n  }\n}\n\n/** Filters out all but an object's own properties */\nfunction getOwnProperties(obj: unknown): { [key: string]: unknown } {\n  if (typeof obj === 'object' && obj !== null) {\n    const extractedProps: { [key: string]: unknown } = {};\n    for (const property in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, property)) {\n        extractedProps[property] = (obj as Record<string, unknown>)[property];\n      }\n    }\n    return extractedProps;\n  } else {\n    return {};\n  }\n}\n\n/**\n * Given any captured exception, extract its keys and create a sorted\n * and truncated list that will be used inside the event message.\n * eg. `Non-error exception captured with keys: foo, bar, baz`\n */\nexport function extractExceptionKeysForMessage(exception: Record<string, unknown>, maxLength: number = 40): string {\n  const keys = Object.keys(convertToPlainObject(exception));\n  keys.sort();\n\n  if (!keys.length) {\n    return '[object has no keys]';\n  }\n\n  if (keys[0].length >= maxLength) {\n    return truncate(keys[0], maxLength);\n  }\n\n  for (let includedKeys = keys.length; includedKeys > 0; includedKeys--) {\n    const serialized = keys.slice(0, includedKeys).join(', ');\n    if (serialized.length > maxLength) {\n      continue;\n    }\n    if (includedKeys === keys.length) {\n      return serialized;\n    }\n    return truncate(serialized, maxLength);\n  }\n\n  return '';\n}\n\n/**\n * Given any object, return a new object having removed all fields whose value was `undefined`.\n * Works recursively on objects and arrays.\n *\n * Attention: This function keeps circular references in the returned object.\n */\nexport function dropUndefinedKeys<T>(inputValue: T): T {\n  // This map keeps track of what already visited nodes map to.\n  // Our Set - based memoBuilder doesn't work here because we want to the output object to have the same circular\n  // references as the input object.\n  const memoizationMap = new Map<unknown, unknown>();\n\n  // This function just proxies `_dropUndefinedKeys` to keep the `memoBuilder` out of this function's API\n  return _dropUndefinedKeys(inputValue, memoizationMap);\n}\n\nfunction _dropUndefinedKeys<T>(inputValue: T, memoizationMap: Map<unknown, unknown>): T {\n  if (isPlainObject(inputValue)) {\n    // If this node has already been visited due to a circular reference, return the object it was mapped to in the new object\n    const memoVal = memoizationMap.get(inputValue);\n    if (memoVal !== undefined) {\n      return memoVal as T;\n    }\n\n    const returnValue: { [key: string]: any } = {};\n    // Store the mapping of this value in case we visit it again, in case of circular data\n    memoizationMap.set(inputValue, returnValue);\n\n    for (const key of Object.keys(inputValue)) {\n      if (typeof inputValue[key] !== 'undefined') {\n        returnValue[key] = _dropUndefinedKeys(inputValue[key], memoizationMap);\n      }\n    }\n\n    return returnValue as T;\n  }\n\n  if (Array.isArray(inputValue)) {\n    // If this node has already been visited due to a circular reference, return the array it was mapped to in the new object\n    const memoVal = memoizationMap.get(inputValue);\n    if (memoVal !== undefined) {\n      return memoVal as T;\n    }\n\n    const returnValue: unknown[] = [];\n    // Store the mapping of this value in case we visit it again, in case of circular data\n    memoizationMap.set(inputValue, returnValue);\n\n    inputValue.forEach((item: unknown) => {\n      returnValue.push(_dropUndefinedKeys(item, memoizationMap));\n    });\n\n    return returnValue as unknown as T;\n  }\n\n  return inputValue;\n}\n\n/**\n * Ensure that something is an object.\n *\n * Turns `undefined` and `null` into `String`s and all other primitives into instances of their respective wrapper\n * classes (String, Boolean, Number, etc.). Acts as the identity function on non-primitives.\n *\n * @param wat The subject of the objectification\n * @returns A version of `wat` which can safely be used with `Object` class methods\n */\nexport function objectify(wat: unknown): typeof Object {\n  let objectified;\n  switch (true) {\n    case wat === undefined || wat === null:\n      objectified = new String(wat);\n      break;\n\n    // Though symbols and bigints do have wrapper classes (`Symbol` and `BigInt`, respectively), for whatever reason\n    // those classes don't have constructors which can be used with the `new` keyword. We therefore need to cast each as\n    // an object in order to wrap it.\n    case typeof wat === 'symbol' || typeof wat === 'bigint':\n      objectified = Object(wat);\n      break;\n\n    // this will catch the remaining primitives: `String`, `Number`, and `Boolean`\n    case isPrimitive(wat):\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      objectified = new (wat as any).constructor(wat);\n      break;\n\n    // by process of elimination, at this point we know that `wat` must already be an object\n    default:\n      objectified = wat;\n      break;\n  }\n  return objectified;\n}\n", "/* eslint-disable @typescript-eslint/no-explicit-any */\nimport type { Event, Exception, Mechanism, StackFrame } from '@sentry/types';\n\nimport { addNonEnumerableProperty } from './object';\nimport { snipLine } from './string';\nimport { GLOBAL_OBJ } from './worldwide';\n\ninterface CryptoInternal {\n  getRandomValues(array: Uint8Array): Uint8Array;\n  randomUUID?(): string;\n}\n\n/** An interface for common properties on global */\ninterface CryptoGlobal {\n  msCrypto?: CryptoInternal;\n  crypto?: CryptoInternal;\n}\n\n/**\n * UUID4 generator\n *\n * @returns string Generated UUID4.\n */\nexport function uuid4(): string {\n  const gbl = GLOBAL_OBJ as typeof GLOBAL_OBJ & CryptoGlobal;\n  const crypto = gbl.crypto || gbl.msCrypto;\n\n  let getRandomByte = (): number => Math.random() * 16;\n  try {\n    if (crypto && crypto.randomUUID) {\n      return crypto.randomUUID().replace(/-/g, '');\n    }\n    if (crypto && crypto.getRandomValues) {\n      getRandomByte = () => crypto.getRandomValues(new Uint8Array(1))[0];\n    }\n  } catch (_) {\n    // some runtimes can crash invoking crypto\n    // https://github.com/getsentry/sentry-javascript/issues/8935\n  }\n\n  // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#2117523\n  // Concatenating the following numbers as strings results in '10000000100040008000100000000000'\n  return (([1e7] as unknown as string) + 1e3 + 4e3 + 8e3 + 1e11).replace(/[018]/g, c =>\n    // eslint-disable-next-line no-bitwise\n    ((c as unknown as number) ^ ((getRandomByte() & 15) >> ((c as unknown as number) / 4))).toString(16),\n  );\n}\n\nfunction getFirstException(event: Event): Exception | undefined {\n  return event.exception && event.exception.values ? event.exception.values[0] : undefined;\n}\n\n/**\n * Extracts either message or type+value from an event that can be used for user-facing logs\n * @returns event's description\n */\nexport function getEventDescription(event: Event): string {\n  const { message, event_id: eventId } = event;\n  if (message) {\n    return message;\n  }\n\n  const firstException = getFirstException(event);\n  if (firstException) {\n    if (firstException.type && firstException.value) {\n      return `${firstException.type}: ${firstException.value}`;\n    }\n    return firstException.type || firstException.value || eventId || '<unknown>';\n  }\n  return eventId || '<unknown>';\n}\n\n/**\n * Adds exception values, type and value to an synthetic Exception.\n * @param event The event to modify.\n * @param value Value of the exception.\n * @param type Type of the exception.\n * @hidden\n */\nexport function addExceptionTypeValue(event: Event, value?: string, type?: string): void {\n  const exception = (event.exception = event.exception || {});\n  const values = (exception.values = exception.values || []);\n  const firstException = (values[0] = values[0] || {});\n  if (!firstException.value) {\n    firstException.value = value || '';\n  }\n  if (!firstException.type) {\n    firstException.type = type || 'Error';\n  }\n}\n\n/**\n * Adds exception mechanism data to a given event. Uses defaults if the second parameter is not passed.\n *\n * @param event The event to modify.\n * @param newMechanism Mechanism data to add to the event.\n * @hidden\n */\nexport function addExceptionMechanism(event: Event, newMechanism?: Partial<Mechanism>): void {\n  const firstException = getFirstException(event);\n  if (!firstException) {\n    return;\n  }\n\n  const defaultMechanism = { type: 'generic', handled: true };\n  const currentMechanism = firstException.mechanism;\n  firstException.mechanism = { ...defaultMechanism, ...currentMechanism, ...newMechanism };\n\n  if (newMechanism && 'data' in newMechanism) {\n    const mergedData = { ...(currentMechanism && currentMechanism.data), ...newMechanism.data };\n    firstException.mechanism.data = mergedData;\n  }\n}\n\n// https://semver.org/#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string\nconst SEMVER_REGEXP =\n  /^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$/;\n\n/**\n * Represents Semantic Versioning object\n */\ninterface SemVer {\n  major?: number;\n  minor?: number;\n  patch?: number;\n  prerelease?: string;\n  buildmetadata?: string;\n}\n\n/**\n * Parses input into a SemVer interface\n * @param input string representation of a semver version\n */\nexport function parseSemver(input: string): SemVer {\n  const match = input.match(SEMVER_REGEXP) || [];\n  const major = parseInt(match[1], 10);\n  const minor = parseInt(match[2], 10);\n  const patch = parseInt(match[3], 10);\n  return {\n    buildmetadata: match[5],\n    major: isNaN(major) ? undefined : major,\n    minor: isNaN(minor) ? undefined : minor,\n    patch: isNaN(patch) ? undefined : patch,\n    prerelease: match[4],\n  };\n}\n\n/**\n * This function adds context (pre/post/line) lines to the provided frame\n *\n * @param lines string[] containing all lines\n * @param frame StackFrame that will be mutated\n * @param linesOfContext number of context lines we want to add pre/post\n */\nexport function addContextToFrame(lines: string[], frame: StackFrame, linesOfContext: number = 5): void {\n  // When there is no line number in the frame, attaching context is nonsensical and will even break grouping\n  if (frame.lineno === undefined) {\n    return;\n  }\n\n  const maxLines = lines.length;\n  const sourceLine = Math.max(Math.min(maxLines - 1, frame.lineno - 1), 0);\n\n  frame.pre_context = lines\n    .slice(Math.max(0, sourceLine - linesOfContext), sourceLine)\n    .map((line: string) => snipLine(line, 0));\n\n  frame.context_line = snipLine(lines[Math.min(maxLines - 1, sourceLine)], frame.colno || 0);\n\n  frame.post_context = lines\n    .slice(Math.min(sourceLine + 1, maxLines), sourceLine + 1 + linesOfContext)\n    .map((line: string) => snipLine(line, 0));\n}\n\n/**\n * Checks whether or not we've already captured the given exception (note: not an identical exception - the very object\n * in question), and marks it captured if not.\n *\n * This is useful because it's possible for an error to get captured by more than one mechanism. After we intercept and\n * record an error, we rethrow it (assuming we've intercepted it before it's reached the top-level global handlers), so\n * that we don't interfere with whatever effects the error might have had were the SDK not there. At that point, because\n * the error has been rethrown, it's possible for it to bubble up to some other code we've instrumented. If it's not\n * caught after that, it will bubble all the way up to the global handlers (which of course we also instrument). This\n * function helps us ensure that even if we encounter the same error more than once, we only record it the first time we\n * see it.\n *\n * Note: It will ignore primitives (always return `false` and not mark them as seen), as properties can't be set on\n * them. {@link: Object.objectify} can be used on exceptions to convert any that are primitives into their equivalent\n * object wrapper forms so that this check will always work. However, because we need to flag the exact object which\n * will get rethrown, and because that rethrowing happens outside of the event processing pipeline, the objectification\n * must be done before the exception captured.\n *\n * @param A thrown exception to check or flag as having been seen\n * @returns `true` if the exception has already been captured, `false` if not (with the side effect of marking it seen)\n */\nexport function checkOrSetAlreadyCaught(exception: unknown): boolean {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  if (exception && (exception as any).__sentry_captured__) {\n    return true;\n  }\n\n  try {\n    // set it this way rather than by assignment so that it's not ennumerable and therefore isn't recorded by the\n    // `ExtraErrorData` integration\n    addNonEnumerableProperty(exception as { [key: string]: unknown }, '__sentry_captured__', true);\n  } catch (err) {\n    // `exception` is a primitive, so we can't mark it seen\n  }\n\n  return false;\n}\n\n/**\n * Checks whether the given input is already an array, and if it isn't, wraps it in one.\n *\n * @param maybeArray Input to turn into an array, if necessary\n * @returns The input, if already an array, or an array with the input as the only element, if not\n */\nexport function arrayify<T = unknown>(maybeArray: T | T[]): T[] {\n  return Array.isArray(maybeArray) ? maybeArray : [maybeArray];\n}\n", "import type { DynamicSamplingContext, PropagationContext, TraceparentData } from '@sentry/types';\n\nimport { baggageHeaderToDynamicSamplingContext } from './baggage';\nimport { uuid4 } from './misc';\n\nexport const TRACEPARENT_REGEXP = new RegExp(\n  '^[ \\\\t]*' + // whitespace\n    '([0-9a-f]{32})?' + // trace_id\n    '-?([0-9a-f]{16})?' + // span_id\n    '-?([01])?' + // sampled\n    '[ \\\\t]*$', // whitespace\n);\n\n/**\n * Extract transaction context data from a `sentry-trace` header.\n *\n * @param traceparent Traceparent string\n *\n * @returns Object containing data from the header, or undefined if traceparent string is malformed\n */\nexport function extractTraceparentData(traceparent?: string): TraceparentData | undefined {\n  if (!traceparent) {\n    return undefined;\n  }\n\n  const matches = traceparent.match(TRACEPARENT_REGEXP);\n  if (!matches) {\n    return undefined;\n  }\n\n  let parentSampled: boolean | undefined;\n  if (matches[3] === '1') {\n    parentSampled = true;\n  } else if (matches[3] === '0') {\n    parentSampled = false;\n  }\n\n  return {\n    traceId: matches[1],\n    parentSampled,\n    parentSpanId: matches[2],\n  };\n}\n\n/**\n * Create tracing context from incoming headers.\n */\nexport function tracingContextFromHeaders(\n  sentryTrace: Parameters<typeof extractTraceparentData>[0],\n  baggage: Parameters<typeof baggageHeaderToDynamicSamplingContext>[0],\n): {\n  traceparentData: ReturnType<typeof extractTraceparentData>;\n  dynamicSamplingContext: ReturnType<typeof baggageHeaderToDynamicSamplingContext>;\n  propagationContext: PropagationContext;\n} {\n  const traceparentData = extractTraceparentData(sentryTrace);\n  const dynamicSamplingContext = baggageHeaderToDynamicSamplingContext(baggage);\n\n  const { traceId, parentSpanId, parentSampled } = traceparentData || {};\n\n  const propagationContext: PropagationContext = {\n    traceId: traceId || uuid4(),\n    spanId: uuid4().substring(16),\n    sampled: parentSampled,\n  };\n\n  if (parentSpanId) {\n    propagationContext.parentSpanId = parentSpanId;\n  }\n\n  if (dynamicSamplingContext) {\n    propagationContext.dsc = dynamicSamplingContext as DynamicSamplingContext;\n  }\n\n  return {\n    traceparentData,\n    dynamicSamplingContext,\n    propagationContext,\n  };\n}\n\n/**\n * Create sentry-trace header from span context values.\n */\nexport function generateSentryTraceHeader(\n  traceId: string = uuid4(),\n  spanId: string = uuid4().substring(16),\n  sampled?: boolean,\n): string {\n  let sampledString = '';\n  if (sampled !== undefined) {\n    sampledString = sampled ? '-1' : '-0';\n  }\n  return `${traceId}-${spanId}${sampledString}`;\n}\n", "import type { Event, EventHint, Exception, ExtendedError, StackParser } from '@sentry/types';\n\nimport { isInstanceOf } from './is';\nimport { truncate } from './string';\n\n/**\n * Creates exceptions inside `event.exception.values` for errors that are nested on properties based on the `key` parameter.\n */\nexport function applyAggregateErrorsToEvent(\n  exceptionFromErrorImplementation: (stackParser: StackParser, ex: Error) => Exception,\n  parser: StackParser,\n  maxValueLimit: number = 250,\n  key: string,\n  limit: number,\n  event: Event,\n  hint?: EventHint,\n): void {\n  if (!event.exception || !event.exception.values || !hint || !isInstanceOf(hint.originalException, Error)) {\n    return;\n  }\n\n  // Generally speaking the last item in `event.exception.values` is the exception originating from the original Error\n  const originalException: Exception | undefined =\n    event.exception.values.length > 0 ? event.exception.values[event.exception.values.length - 1] : undefined;\n\n  // We only create exception grouping if there is an exception in the event.\n  if (originalException) {\n    event.exception.values = truncateAggregateExceptions(\n      aggregateExceptionsFromError(\n        exceptionFromErrorImplementation,\n        parser,\n        limit,\n        hint.originalException as ExtendedError,\n        key,\n        event.exception.values,\n        originalException,\n        0,\n      ),\n      maxValueLimit,\n    );\n  }\n}\n\nfunction aggregateExceptionsFromError(\n  exceptionFromErrorImplementation: (stackParser: StackParser, ex: Error) => Exception,\n  parser: StackParser,\n  limit: number,\n  error: ExtendedError,\n  key: string,\n  prevExceptions: Exception[],\n  exception: Exception,\n  exceptionId: number,\n): Exception[] {\n  if (prevExceptions.length >= limit + 1) {\n    return prevExceptions;\n  }\n\n  let newExceptions = [...prevExceptions];\n\n  if (isInstanceOf(error[key], Error)) {\n    applyExceptionGroupFieldsForParentException(exception, exceptionId);\n    const newException = exceptionFromErrorImplementation(parser, error[key]);\n    const newExceptionId = newExceptions.length;\n    applyExceptionGroupFieldsForChildException(newException, key, newExceptionId, exceptionId);\n    newExceptions = aggregateExceptionsFromError(\n      exceptionFromErrorImplementation,\n      parser,\n      limit,\n      error[key],\n      key,\n      [newException, ...newExceptions],\n      newException,\n      newExceptionId,\n    );\n  }\n\n  // This will create exception grouping for AggregateErrors\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AggregateError\n  if (Array.isArray(error.errors)) {\n    error.errors.forEach((childError, i) => {\n      if (isInstanceOf(childError, Error)) {\n        applyExceptionGroupFieldsForParentException(exception, exceptionId);\n        const newException = exceptionFromErrorImplementation(parser, childError);\n        const newExceptionId = newExceptions.length;\n        applyExceptionGroupFieldsForChildException(newException, `errors[${i}]`, newExceptionId, exceptionId);\n        newExceptions = aggregateExceptionsFromError(\n          exceptionFromErrorImplementation,\n          parser,\n          limit,\n          childError,\n          key,\n          [newException, ...newExceptions],\n          newException,\n          newExceptionId,\n        );\n      }\n    });\n  }\n\n  return newExceptions;\n}\n\nfunction applyExceptionGroupFieldsForParentException(exception: Exception, exceptionId: number): void {\n  // Don't know if this default makes sense. The protocol requires us to set these values so we pick *some* default.\n  exception.mechanism = exception.mechanism || { type: 'generic', handled: true };\n\n  exception.mechanism = {\n    ...exception.mechanism,\n    is_exception_group: true,\n    exception_id: exceptionId,\n  };\n}\n\nfunction applyExceptionGroupFieldsForChildException(\n  exception: Exception,\n  source: string,\n  exceptionId: number,\n  parentId: number | undefined,\n): void {\n  // Don't know if this default makes sense. The protocol requires us to set these values so we pick *some* default.\n  exception.mechanism = exception.mechanism || { type: 'generic', handled: true };\n\n  exception.mechanism = {\n    ...exception.mechanism,\n    type: 'chained',\n    source,\n    exception_id: exceptionId,\n    parent_id: parentId,\n  };\n}\n\n/**\n * Truncate the message (exception.value) of all exceptions in the event.\n * Because this event processor is ran after `applyClientOptions`,\n * we need to truncate the message of the added exceptions here.\n */\nfunction truncateAggregateExceptions(exceptions: Exception[], maxValueLength: number): Exception[] {\n  return exceptions.map(exception => {\n    if (exception.value) {\n      exception.value = truncate(exception.value, maxValueLength);\n    }\n    return exception;\n  });\n}\n", "import type { DsnComponents, DsnLike, DsnProtocol } from '@sentry/types';\n\nimport { logger } from './logger';\n\n/** Regular expression used to parse a Dsn. */\nconst DSN_REGEX = /^(?:(\\w+):)\\/\\/(?:(\\w+)(?::(\\w+)?)?@)([\\w.-]+)(?::(\\d+))?\\/(.+)/;\n\nfunction isValidProtocol(protocol?: string): protocol is DsnProtocol {\n  return protocol === 'http' || protocol === 'https';\n}\n\n/**\n * Renders the string representation of this Dsn.\n *\n * By default, this will render the public representation without the password\n * component. To get the deprecated private representation, set `withPassword`\n * to true.\n *\n * @param withPassword When set to true, the password will be included.\n */\nexport function dsnToString(dsn: DsnComponents, withPassword: boolean = false): string {\n  const { host, path, pass, port, projectId, protocol, publicKey } = dsn;\n  return (\n    `${protocol}://${publicKey}${withPassword && pass ? `:${pass}` : ''}` +\n    `@${host}${port ? `:${port}` : ''}/${path ? `${path}/` : path}${projectId}`\n  );\n}\n\n/**\n * Parses a Dsn from a given string.\n *\n * @param str A Dsn as string\n * @returns Dsn as DsnComponents or undefined if @param str is not a valid DSN string\n */\nexport function dsnFromString(str: string): DsnComponents | undefined {\n  const match = DSN_REGEX.exec(str);\n\n  if (!match) {\n    // This should be logged to the console\n    // eslint-disable-next-line no-console\n    console.error(`Invalid Sentry Dsn: ${str}`);\n    return undefined;\n  }\n\n  const [protocol, publicKey, pass = '', host, port = '', lastPath] = match.slice(1);\n  let path = '';\n  let projectId = lastPath;\n\n  const split = projectId.split('/');\n  if (split.length > 1) {\n    path = split.slice(0, -1).join('/');\n    projectId = split.pop() as string;\n  }\n\n  if (projectId) {\n    const projectMatch = projectId.match(/^\\d+/);\n    if (projectMatch) {\n      projectId = projectMatch[0];\n    }\n  }\n\n  return dsnFromComponents({ host, pass, path, projectId, port, protocol: protocol as DsnProtocol, publicKey });\n}\n\nfunction dsnFromComponents(components: DsnComponents): DsnComponents {\n  return {\n    protocol: components.protocol,\n    publicKey: components.publicKey || '',\n    pass: components.pass || '',\n    host: components.host,\n    port: components.port || '',\n    path: components.path || '',\n    projectId: components.projectId,\n  };\n}\n\nfunction validateDsn(dsn: DsnComponents): boolean {\n  if (!__DEBUG_BUILD__) {\n    return true;\n  }\n\n  const { port, projectId, protocol } = dsn;\n\n  const requiredComponents: ReadonlyArray<keyof DsnComponents> = ['protocol', 'publicKey', 'host', 'projectId'];\n  const hasMissingRequiredComponent = requiredComponents.find(component => {\n    if (!dsn[component]) {\n      logger.error(`Invalid Sentry Dsn: ${component} missing`);\n      return true;\n    }\n    return false;\n  });\n\n  if (hasMissingRequiredComponent) {\n    return false;\n  }\n\n  if (!projectId.match(/^\\d+$/)) {\n    logger.error(`Invalid Sentry Dsn: Invalid projectId ${projectId}`);\n    return false;\n  }\n\n  if (!isValidProtocol(protocol)) {\n    logger.error(`Invalid Sentry Dsn: Invalid protocol ${protocol}`);\n    return false;\n  }\n\n  if (port && isNaN(parseInt(port, 10))) {\n    logger.error(`Invalid Sentry Dsn: Invalid port ${port}`);\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * Creates a valid Sentry Dsn object, identifying a Sentry instance and project.\n * @returns a valid DsnComponents object or `undefined` if @param from is an invalid DSN source\n */\nexport function makeDsn(from: DsnLike): DsnComponents | undefined {\n  const components = typeof from === 'string' ? dsnFromString(from) : dsnFromComponents(from);\n  if (!components || !validateDsn(components)) {\n    return undefined;\n  }\n  return components;\n}\n", "import type { ConsoleLevel } from './logger';\n\n/** An error emitted by Sentry SDKs and related utilities. */\nexport class SentryError extends Error {\n  /** Display name of this error instance. */\n  public name: string;\n\n  public logLevel: ConsoleLevel;\n\n  public constructor(public message: string, logLevel: ConsoleLevel = 'warn') {\n    super(message);\n\n    this.name = new.target.prototype.constructor.name;\n    // This sets the prototype to be `Error`, not `SentryError`. It's unclear why we do this, but commenting this line\n    // out causes various (seemingly totally unrelated) playwright tests consistently time out. FYI, this makes\n    // instances of `SentryError` fail `obj instanceof SentryError` checks.\n    Object.setPrototypeOf(this, new.target.prototype);\n    this.logLevel = logLevel;\n  }\n}\n", "import type { StackFrame, StackLineParser, StackParser } from '@sentry/types';\n\nimport type { GetModuleFn } from './node-stack-trace';\nimport { node } from './node-stack-trace';\n\nconst STACKTRACE_FRAME_LIMIT = 50;\n// Used to sanitize webpack (error: *) wrapped stack errors\nconst WEBPACK_ERROR_REGEXP = /\\(error: (.*)\\)/;\nconst STRIP_FRAME_REGEXP = /captureMessage|captureException/;\n\n/**\n * Creates a stack parser with the supplied line parsers\n *\n * StackFrames are returned in the correct order for Sentry Exception\n * frames and with Sentry SDK internal frames removed from the top and bottom\n *\n */\nexport function createStackParser(...parsers: StackLineParser[]): StackParser {\n  const sortedParsers = parsers.sort((a, b) => a[0] - b[0]).map(p => p[1]);\n\n  return (stack: string, skipFirst: number = 0): StackFrame[] => {\n    const frames: StackFrame[] = [];\n    const lines = stack.split('\\n');\n\n    for (let i = skipFirst; i < lines.length; i++) {\n      const line = lines[i];\n      // Ignore lines over 1kb as they are unlikely to be stack frames.\n      // Many of the regular expressions use backtracking which results in run time that increases exponentially with\n      // input size. Huge strings can result in hangs/Denial of Service:\n      // https://github.com/getsentry/sentry-javascript/issues/2286\n      if (line.length > 1024) {\n        continue;\n      }\n\n      // https://github.com/getsentry/sentry-javascript/issues/5459\n      // Remove webpack (error: *) wrappers\n      const cleanedLine = WEBPACK_ERROR_REGEXP.test(line) ? line.replace(WEBPACK_ERROR_REGEXP, '$1') : line;\n\n      // https://github.com/getsentry/sentry-javascript/issues/7813\n      // Skip Error: lines\n      if (cleanedLine.match(/\\S*Error: /)) {\n        continue;\n      }\n\n      for (const parser of sortedParsers) {\n        const frame = parser(cleanedLine);\n\n        if (frame) {\n          frames.push(frame);\n          break;\n        }\n      }\n\n      if (frames.length >= STACKTRACE_FRAME_LIMIT) {\n        break;\n      }\n    }\n\n    return stripSentryFramesAndReverse(frames);\n  };\n}\n\n/**\n * Gets a stack parser implementation from Options.stackParser\n * @see Options\n *\n * If options contains an array of line parsers, it is converted into a parser\n */\nexport function stackParserFromStackParserOptions(stackParser: StackParser | StackLineParser[]): StackParser {\n  if (Array.isArray(stackParser)) {\n    return createStackParser(...stackParser);\n  }\n  return stackParser;\n}\n\n/**\n * Removes Sentry frames from the top and bottom of the stack if present and enforces a limit of max number of frames.\n * Assumes stack input is ordered from top to bottom and returns the reverse representation so call site of the\n * function that caused the crash is the last frame in the array.\n * @hidden\n */\nexport function stripSentryFramesAndReverse(stack: ReadonlyArray<StackFrame>): StackFrame[] {\n  if (!stack.length) {\n    return [];\n  }\n\n  const localStack = Array.from(stack);\n\n  // If stack starts with one of our API calls, remove it (starts, meaning it's the top of the stack - aka last call)\n  if (/sentryWrapped/.test(localStack[localStack.length - 1].function || '')) {\n    localStack.pop();\n  }\n\n  // Reversing in the middle of the procedure allows us to just pop the values off the stack\n  localStack.reverse();\n\n  // If stack ends with one of our internal API calls, remove it (ends, meaning it's the bottom of the stack - aka top-most call)\n  if (STRIP_FRAME_REGEXP.test(localStack[localStack.length - 1].function || '')) {\n    localStack.pop();\n\n    // When using synthetic events, we will have a 2 levels deep stack, as `new Error('Sentry syntheticException')`\n    // is produced within the hub itself, making it:\n    //\n    //   Sentry.captureException()\n    //   getCurrentHub().captureException()\n    //\n    // instead of just the top `Sentry` call itself.\n    // This forces us to possibly strip an additional frame in the exact same was as above.\n    if (STRIP_FRAME_REGEXP.test(localStack[localStack.length - 1].function || '')) {\n      localStack.pop();\n    }\n  }\n\n  return localStack.slice(0, STACKTRACE_FRAME_LIMIT).map(frame => ({\n    ...frame,\n    filename: frame.filename || localStack[localStack.length - 1].filename,\n    function: frame.function || '?',\n  }));\n}\n\nconst defaultFunctionName = '<anonymous>';\n\n/**\n * Safely extract function name from itself\n */\nexport function getFunctionName(fn: unknown): string {\n  try {\n    if (!fn || typeof fn !== 'function') {\n      return defaultFunctionName;\n    }\n    return fn.name || defaultFunctionName;\n  } catch (e) {\n    // Just accessing custom props in some Selenium environments\n    // can cause a \"Permission denied\" exception (see raven-js#495).\n    return defaultFunctionName;\n  }\n}\n\n/**\n * Node.js stack line parser\n *\n * This is in @sentry/utils so it can be used from the Electron SDK in the browser for when `nodeIntegration == true`.\n * This allows it to be used without referencing or importing any node specific code which causes bundlers to complain\n */\nexport function nodeStackLineParser(getModule?: GetModuleFn): StackLineParser {\n  return [90, node(getModule)];\n}\n", "import { logger } from './logger';\nimport { getGlobalObject } from './worldwide';\n\n// eslint-disable-next-line deprecation/deprecation\nconst WINDOW = getGlobalObject<Window>();\n\nexport { supportsHistory } from './vendor/supportsHistory';\n\n/**\n * Tells whether current environment supports ErrorEvent objects\n * {@link supportsErrorEvent}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsErrorEvent(): boolean {\n  try {\n    new ErrorEvent('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports DOMError objects\n * {@link supportsDOMError}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsDOMError(): boolean {\n  try {\n    // Chrome: VM89:1 Uncaught TypeError: Failed to construct 'DOMError':\n    // 1 argument required, but only 0 present.\n    // @ts-expect-error It really needs 1 argument, not 0.\n    new DOMError('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports DOMException objects\n * {@link supportsDOMException}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsDOMException(): boolean {\n  try {\n    new DOMException('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports Fetch API\n * {@link supportsFetch}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsFetch(): boolean {\n  if (!('fetch' in WINDOW)) {\n    return false;\n  }\n\n  try {\n    new Headers();\n    new Request('http://www.example.com');\n    new Response();\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n/**\n * isNativeFetch checks if the given function is a native implementation of fetch()\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function isNativeFetch(func: Function): boolean {\n  return func && /^function fetch\\(\\)\\s+\\{\\s+\\[native code\\]\\s+\\}$/.test(func.toString());\n}\n\n/**\n * Tells whether current environment supports Fetch API natively\n * {@link supportsNativeFetch}.\n *\n * @returns true if `window.fetch` is natively implemented, false otherwise\n */\nexport function supportsNativeFetch(): boolean {\n  if (!supportsFetch()) {\n    return false;\n  }\n\n  // Fast path to avoid DOM I/O\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  if (isNativeFetch(WINDOW.fetch)) {\n    return true;\n  }\n\n  // window.fetch is implemented, but is polyfilled or already wrapped (e.g: by a chrome extension)\n  // so create a \"pure\" iframe to see if that has native fetch\n  let result = false;\n  const doc = WINDOW.document;\n  // eslint-disable-next-line deprecation/deprecation\n  if (doc && typeof (doc.createElement as unknown) === 'function') {\n    try {\n      const sandbox = doc.createElement('iframe');\n      sandbox.hidden = true;\n      doc.head.appendChild(sandbox);\n      if (sandbox.contentWindow && sandbox.contentWindow.fetch) {\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        result = isNativeFetch(sandbox.contentWindow.fetch);\n      }\n      doc.head.removeChild(sandbox);\n    } catch (err) {\n      __DEBUG_BUILD__ &&\n        logger.warn('Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ', err);\n    }\n  }\n\n  return result;\n}\n\n/**\n * Tells whether current environment supports ReportingObserver API\n * {@link supportsReportingObserver}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsReportingObserver(): boolean {\n  return 'ReportingObserver' in WINDOW;\n}\n\n/**\n * Tells whether current environment supports Referrer Policy API\n * {@link supportsReferrerPolicy}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsReferrerPolicy(): boolean {\n  // Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default'\n  // (see https://caniuse.com/#feat=referrer-policy),\n  // it doesn't. And it throws an exception instead of ignoring this parameter...\n  // REF: https://github.com/getsentry/raven-js/issues/1233\n\n  if (!supportsFetch()) {\n    return false;\n  }\n\n  try {\n    new Request('_', {\n      referrerPolicy: 'origin' as ReferrerPolicy,\n    });\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n", "// Based on https://github.com/angular/angular.js/pull/13945/files\n// The MIT License\n\n// Copyright (c) 2010-2016 Google, Inc. http://angularjs.org\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport { getGlobalObject } from '../worldwide';\n\n// eslint-disable-next-line deprecation/deprecation\nconst WINDOW = getGlobalObject<Window>();\n\n/**\n * Tells whether current environment supports History API\n * {@link supportsHistory}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsHistory(): boolean {\n  // NOTE: in Chrome App environment, touching history.pushState, *even inside\n  //       a try/catch block*, will cause Chrome to output an error to console.error\n  // borrowed from: https://github.com/angular/angular.js/pull/13945/files\n  /* eslint-disable @typescript-eslint/no-unsafe-member-access */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const chrome = (WINDOW as any).chrome;\n  const isChromePackagedApp = chrome && chrome.app && chrome.app.runtime;\n  /* eslint-enable @typescript-eslint/no-unsafe-member-access */\n  const hasHistoryApi = 'history' in WINDOW && !!WINDOW.history.pushState && !!WINDOW.history.replaceState;\n\n  return !isChromePackagedApp && hasHistoryApi;\n}\n", "/* eslint-disable max-lines */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/ban-types */\nimport type {\n  HandlerDataFetch,\n  HandlerDataXhr,\n  SentryWrappedXMLHttpRequest,\n  SentryXhrData,\n  WrappedFunction,\n} from '@sentry/types';\n\nimport { isString } from './is';\nimport type { ConsoleLevel } from './logger';\nimport { CONSOLE_LEVELS, logger, originalConsoleMethods } from './logger';\nimport { fill } from './object';\nimport { getFunctionName } from './stacktrace';\nimport { supportsHistory, supportsNativeFetch } from './supports';\nimport { getGlobalObject, GLOBAL_OBJ } from './worldwide';\n\n// eslint-disable-next-line deprecation/deprecation\nconst WINDOW = getGlobalObject<Window>();\n\nexport const SENTRY_XHR_DATA_KEY = '__sentry_xhr_v2__';\n\nexport type InstrumentHandlerType =\n  | 'console'\n  | 'dom'\n  | 'fetch'\n  | 'history'\n  | 'sentry'\n  | 'xhr'\n  | 'error'\n  | 'unhandledrejection';\nexport type InstrumentHandlerCallback = (data: any) => void;\n\n/**\n * Instrument native APIs to call handlers that can be used to create breadcrumbs, APM spans etc.\n *  - Console API\n *  - Fetch API\n *  - XHR API\n *  - History API\n *  - DOM API (click/typing)\n *  - Error API\n *  - UnhandledRejection API\n */\n\nconst handlers: { [key in InstrumentHandlerType]?: InstrumentHandlerCallback[] } = {};\nconst instrumented: { [key in InstrumentHandlerType]?: boolean } = {};\n\n/** Instruments given API */\nfunction instrument(type: InstrumentHandlerType): void {\n  if (instrumented[type]) {\n    return;\n  }\n\n  instrumented[type] = true;\n\n  switch (type) {\n    case 'console':\n      instrumentConsole();\n      break;\n    case 'dom':\n      instrumentDOM();\n      break;\n    case 'xhr':\n      instrumentXHR();\n      break;\n    case 'fetch':\n      instrumentFetch();\n      break;\n    case 'history':\n      instrumentHistory();\n      break;\n    case 'error':\n      instrumentError();\n      break;\n    case 'unhandledrejection':\n      instrumentUnhandledRejection();\n      break;\n    default:\n      __DEBUG_BUILD__ && logger.warn('unknown instrumentation type:', type);\n      return;\n  }\n}\n\n/**\n * Add handler that will be called when given type of instrumentation triggers.\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nexport function addInstrumentationHandler(type: InstrumentHandlerType, callback: InstrumentHandlerCallback): void {\n  handlers[type] = handlers[type] || [];\n  (handlers[type] as InstrumentHandlerCallback[]).push(callback);\n  instrument(type);\n}\n\n/**\n * Reset all instrumentation handlers.\n * This can be used by tests to ensure we have a clean slate of instrumentation handlers.\n */\nexport function resetInstrumentationHandlers(): void {\n  Object.keys(handlers).forEach(key => {\n    handlers[key as InstrumentHandlerType] = undefined;\n  });\n}\n\n/** JSDoc */\nfunction triggerHandlers(type: InstrumentHandlerType, data: any): void {\n  if (!type || !handlers[type]) {\n    return;\n  }\n\n  for (const handler of handlers[type] || []) {\n    try {\n      handler(data);\n    } catch (e) {\n      __DEBUG_BUILD__ &&\n        logger.error(\n          `Error while triggering instrumentation handler.\\nType: ${type}\\nName: ${getFunctionName(handler)}\\nError:`,\n          e,\n        );\n    }\n  }\n}\n\n/** JSDoc */\nfunction instrumentConsole(): void {\n  if (!('console' in GLOBAL_OBJ)) {\n    return;\n  }\n\n  CONSOLE_LEVELS.forEach(function (level: ConsoleLevel): void {\n    if (!(level in GLOBAL_OBJ.console)) {\n      return;\n    }\n\n    fill(GLOBAL_OBJ.console, level, function (originalConsoleMethod: () => any): Function {\n      originalConsoleMethods[level] = originalConsoleMethod;\n\n      return function (...args: any[]): void {\n        triggerHandlers('console', { args, level });\n\n        const log = originalConsoleMethods[level];\n        log && log.apply(GLOBAL_OBJ.console, args);\n      };\n    });\n  });\n}\n\n/** JSDoc */\nfunction instrumentFetch(): void {\n  if (!supportsNativeFetch()) {\n    return;\n  }\n\n  fill(GLOBAL_OBJ, 'fetch', function (originalFetch: () => void): () => void {\n    return function (...args: any[]): void {\n      const { method, url } = parseFetchArgs(args);\n\n      const handlerData: HandlerDataFetch = {\n        args,\n        fetchData: {\n          method,\n          url,\n        },\n        startTimestamp: Date.now(),\n      };\n\n      triggerHandlers('fetch', {\n        ...handlerData,\n      });\n\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      return originalFetch.apply(GLOBAL_OBJ, args).then(\n        (response: Response) => {\n          triggerHandlers('fetch', {\n            ...handlerData,\n            endTimestamp: Date.now(),\n            response,\n          });\n          return response;\n        },\n        (error: Error) => {\n          triggerHandlers('fetch', {\n            ...handlerData,\n            endTimestamp: Date.now(),\n            error,\n          });\n          // NOTE: If you are a Sentry user, and you are seeing this stack frame,\n          //       it means the sentry.javascript SDK caught an error invoking your application code.\n          //       This is expected behavior and NOT indicative of a bug with sentry.javascript.\n          throw error;\n        },\n      );\n    };\n  });\n}\n\nfunction hasProp<T extends string>(obj: unknown, prop: T): obj is Record<string, string> {\n  return !!obj && typeof obj === 'object' && !!(obj as Record<string, string>)[prop];\n}\n\ntype FetchResource = string | { toString(): string } | { url: string };\n\nfunction getUrlFromResource(resource: FetchResource): string {\n  if (typeof resource === 'string') {\n    return resource;\n  }\n\n  if (!resource) {\n    return '';\n  }\n\n  if (hasProp(resource, 'url')) {\n    return resource.url;\n  }\n\n  if (resource.toString) {\n    return resource.toString();\n  }\n\n  return '';\n}\n\n/**\n * Parses the fetch arguments to find the used Http method and the url of the request\n */\nexport function parseFetchArgs(fetchArgs: unknown[]): { method: string; url: string } {\n  if (fetchArgs.length === 0) {\n    return { method: 'GET', url: '' };\n  }\n\n  if (fetchArgs.length === 2) {\n    const [url, options] = fetchArgs as [FetchResource, object];\n\n    return {\n      url: getUrlFromResource(url),\n      method: hasProp(options, 'method') ? String(options.method).toUpperCase() : 'GET',\n    };\n  }\n\n  const arg = fetchArgs[0];\n  return {\n    url: getUrlFromResource(arg as FetchResource),\n    method: hasProp(arg, 'method') ? String(arg.method).toUpperCase() : 'GET',\n  };\n}\n\n/** JSDoc */\nexport function instrumentXHR(): void {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  if (!(WINDOW as any).XMLHttpRequest) {\n    return;\n  }\n\n  const xhrproto = XMLHttpRequest.prototype;\n\n  fill(xhrproto, 'open', function (originalOpen: () => void): () => void {\n    return function (this: XMLHttpRequest & SentryWrappedXMLHttpRequest, ...args: any[]): void {\n      const url = args[1];\n      const xhrInfo: SentryXhrData = (this[SENTRY_XHR_DATA_KEY] = {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        method: isString(args[0]) ? args[0].toUpperCase() : args[0],\n        url: args[1],\n        request_headers: {},\n      });\n\n      // if Sentry key appears in URL, don't capture it as a request\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      if (isString(url) && xhrInfo.method === 'POST' && url.match(/sentry_key/)) {\n        this.__sentry_own_request__ = true;\n      }\n\n      const onreadystatechangeHandler: () => void = () => {\n        // For whatever reason, this is not the same instance here as from the outer method\n        const xhrInfo = this[SENTRY_XHR_DATA_KEY];\n\n        if (!xhrInfo) {\n          return;\n        }\n\n        if (this.readyState === 4) {\n          try {\n            // touching statusCode in some platforms throws\n            // an exception\n            xhrInfo.status_code = this.status;\n          } catch (e) {\n            /* do nothing */\n          }\n\n          triggerHandlers('xhr', {\n            args: args as [string, string],\n            endTimestamp: Date.now(),\n            startTimestamp: Date.now(),\n            xhr: this,\n          } as HandlerDataXhr);\n        }\n      };\n\n      if ('onreadystatechange' in this && typeof this.onreadystatechange === 'function') {\n        fill(this, 'onreadystatechange', function (original: WrappedFunction): Function {\n          return function (this: SentryWrappedXMLHttpRequest, ...readyStateArgs: any[]): void {\n            onreadystatechangeHandler();\n            return original.apply(this, readyStateArgs);\n          };\n        });\n      } else {\n        this.addEventListener('readystatechange', onreadystatechangeHandler);\n      }\n\n      // Intercepting `setRequestHeader` to access the request headers of XHR instance.\n      // This will only work for user/library defined headers, not for the default/browser-assigned headers.\n      // Request cookies are also unavailable for XHR, as `Cookie` header can't be defined by `setRequestHeader`.\n      fill(this, 'setRequestHeader', function (original: WrappedFunction): Function {\n        return function (this: SentryWrappedXMLHttpRequest, ...setRequestHeaderArgs: unknown[]): void {\n          const [header, value] = setRequestHeaderArgs as [string, string];\n\n          const xhrInfo = this[SENTRY_XHR_DATA_KEY];\n\n          if (xhrInfo) {\n            xhrInfo.request_headers[header.toLowerCase()] = value;\n          }\n\n          return original.apply(this, setRequestHeaderArgs);\n        };\n      });\n\n      return originalOpen.apply(this, args);\n    };\n  });\n\n  fill(xhrproto, 'send', function (originalSend: () => void): () => void {\n    return function (this: XMLHttpRequest & SentryWrappedXMLHttpRequest, ...args: any[]): void {\n      const sentryXhrData = this[SENTRY_XHR_DATA_KEY];\n      if (sentryXhrData && args[0] !== undefined) {\n        sentryXhrData.body = args[0];\n      }\n\n      triggerHandlers('xhr', {\n        args,\n        startTimestamp: Date.now(),\n        xhr: this,\n      });\n\n      return originalSend.apply(this, args);\n    };\n  });\n}\n\nlet lastHref: string;\n\n/** JSDoc */\nfunction instrumentHistory(): void {\n  if (!supportsHistory()) {\n    return;\n  }\n\n  const oldOnPopState = WINDOW.onpopstate;\n  WINDOW.onpopstate = function (this: WindowEventHandlers, ...args: any[]): any {\n    const to = WINDOW.location.href;\n    // keep track of the current URL state, as we always receive only the updated state\n    const from = lastHref;\n    lastHref = to;\n    triggerHandlers('history', {\n      from,\n      to,\n    });\n    if (oldOnPopState) {\n      // Apparently this can throw in Firefox when incorrectly implemented plugin is installed.\n      // https://github.com/getsentry/sentry-javascript/issues/3344\n      // https://github.com/bugsnag/bugsnag-js/issues/469\n      try {\n        return oldOnPopState.apply(this, args);\n      } catch (_oO) {\n        // no-empty\n      }\n    }\n  };\n\n  /** @hidden */\n  function historyReplacementFunction(originalHistoryFunction: () => void): () => void {\n    return function (this: History, ...args: any[]): void {\n      const url = args.length > 2 ? args[2] : undefined;\n      if (url) {\n        // coerce to string (this is what pushState does)\n        const from = lastHref;\n        const to = String(url);\n        // keep track of the current URL state, as we always receive only the updated state\n        lastHref = to;\n        triggerHandlers('history', {\n          from,\n          to,\n        });\n      }\n      return originalHistoryFunction.apply(this, args);\n    };\n  }\n\n  fill(WINDOW.history, 'pushState', historyReplacementFunction);\n  fill(WINDOW.history, 'replaceState', historyReplacementFunction);\n}\n\nconst debounceDuration = 1000;\nlet debounceTimerID: number | undefined;\nlet lastCapturedEvent: Event | undefined;\n\n/**\n * Decide whether the current event should finish the debounce of previously captured one.\n * @param previous previously captured event\n * @param current event to be captured\n */\nfunction shouldShortcircuitPreviousDebounce(previous: Event | undefined, current: Event): boolean {\n  // If there was no previous event, it should always be swapped for the new one.\n  if (!previous) {\n    return true;\n  }\n\n  // If both events have different type, then user definitely performed two separate actions. e.g. click + keypress.\n  if (previous.type !== current.type) {\n    return true;\n  }\n\n  try {\n    // If both events have the same type, it's still possible that actions were performed on different targets.\n    // e.g. 2 clicks on different buttons.\n    if (previous.target !== current.target) {\n      return true;\n    }\n  } catch (e) {\n    // just accessing `target` property can throw an exception in some rare circumstances\n    // see: https://github.com/getsentry/sentry-javascript/issues/838\n  }\n\n  // If both events have the same type _and_ same `target` (an element which triggered an event, _not necessarily_\n  // to which an event listener was attached), we treat them as the same action, as we want to capture\n  // only one breadcrumb. e.g. multiple clicks on the same button, or typing inside a user input box.\n  return false;\n}\n\n/**\n * Decide whether an event should be captured.\n * @param event event to be captured\n */\nfunction shouldSkipDOMEvent(event: Event): boolean {\n  // We are only interested in filtering `keypress` events for now.\n  if (event.type !== 'keypress') {\n    return false;\n  }\n\n  try {\n    const target = event.target as HTMLElement;\n\n    if (!target || !target.tagName) {\n      return true;\n    }\n\n    // Only consider keypress events on actual input elements. This will disregard keypresses targeting body\n    // e.g.tabbing through elements, hotkeys, etc.\n    if (target.tagName === 'INPUT' || target.tagName === 'TEXTAREA' || target.isContentEditable) {\n      return false;\n    }\n  } catch (e) {\n    // just accessing `target` property can throw an exception in some rare circumstances\n    // see: https://github.com/getsentry/sentry-javascript/issues/838\n  }\n\n  return true;\n}\n\n/**\n * Wraps addEventListener to capture UI breadcrumbs\n * @param handler function that will be triggered\n * @param globalListener indicates whether event was captured by the global event listener\n * @returns wrapped breadcrumb events handler\n * @hidden\n */\nfunction makeDOMEventHandler(handler: Function, globalListener: boolean = false): (event: Event) => void {\n  return (event: Event): void => {\n    // It's possible this handler might trigger multiple times for the same\n    // event (e.g. event propagation through node ancestors).\n    // Ignore if we've already captured that event.\n    if (!event || lastCapturedEvent === event) {\n      return;\n    }\n\n    // We always want to skip _some_ events.\n    if (shouldSkipDOMEvent(event)) {\n      return;\n    }\n\n    const name = event.type === 'keypress' ? 'input' : event.type;\n\n    // If there is no debounce timer, it means that we can safely capture the new event and store it for future comparisons.\n    if (debounceTimerID === undefined) {\n      handler({\n        event: event,\n        name,\n        global: globalListener,\n      });\n      lastCapturedEvent = event;\n    }\n    // If there is a debounce awaiting, see if the new event is different enough to treat it as a unique one.\n    // If that's the case, emit the previous event and store locally the newly-captured DOM event.\n    else if (shouldShortcircuitPreviousDebounce(lastCapturedEvent, event)) {\n      handler({\n        event: event,\n        name,\n        global: globalListener,\n      });\n      lastCapturedEvent = event;\n    }\n\n    // Start a new debounce timer that will prevent us from capturing multiple events that should be grouped together.\n    clearTimeout(debounceTimerID);\n    debounceTimerID = WINDOW.setTimeout(() => {\n      debounceTimerID = undefined;\n    }, debounceDuration);\n  };\n}\n\ntype AddEventListener = (\n  type: string,\n  listener: EventListenerOrEventListenerObject,\n  options?: boolean | AddEventListenerOptions,\n) => void;\ntype RemoveEventListener = (\n  type: string,\n  listener: EventListenerOrEventListenerObject,\n  options?: boolean | EventListenerOptions,\n) => void;\n\ntype InstrumentedElement = Element & {\n  __sentry_instrumentation_handlers__?: {\n    [key in 'click' | 'keypress']?: {\n      handler?: Function;\n      /** The number of custom listeners attached to this element */\n      refCount: number;\n    };\n  };\n};\n\n/** JSDoc */\nexport function instrumentDOM(): void {\n  if (!WINDOW.document) {\n    return;\n  }\n\n  // Make it so that any click or keypress that is unhandled / bubbled up all the way to the document triggers our dom\n  // handlers. (Normally we have only one, which captures a breadcrumb for each click or keypress.) Do this before\n  // we instrument `addEventListener` so that we don't end up attaching this handler twice.\n  const triggerDOMHandler = triggerHandlers.bind(null, 'dom');\n  const globalDOMEventHandler = makeDOMEventHandler(triggerDOMHandler, true);\n  WINDOW.document.addEventListener('click', globalDOMEventHandler, false);\n  WINDOW.document.addEventListener('keypress', globalDOMEventHandler, false);\n\n  // After hooking into click and keypress events bubbled up to `document`, we also hook into user-handled\n  // clicks & keypresses, by adding an event listener of our own to any element to which they add a listener. That\n  // way, whenever one of their handlers is triggered, ours will be, too. (This is needed because their handler\n  // could potentially prevent the event from bubbling up to our global listeners. This way, our handler are still\n  // guaranteed to fire at least once.)\n  ['EventTarget', 'Node'].forEach((target: string) => {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    const proto = (WINDOW as any)[target] && (WINDOW as any)[target].prototype;\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, no-prototype-builtins\n    if (!proto || !proto.hasOwnProperty || !proto.hasOwnProperty('addEventListener')) {\n      return;\n    }\n\n    fill(proto, 'addEventListener', function (originalAddEventListener: AddEventListener): AddEventListener {\n      return function (\n        this: Element,\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n        options?: boolean | AddEventListenerOptions,\n      ): AddEventListener {\n        if (type === 'click' || type == 'keypress') {\n          try {\n            const el = this as InstrumentedElement;\n            const handlers = (el.__sentry_instrumentation_handlers__ = el.__sentry_instrumentation_handlers__ || {});\n            const handlerForType = (handlers[type] = handlers[type] || { refCount: 0 });\n\n            if (!handlerForType.handler) {\n              const handler = makeDOMEventHandler(triggerDOMHandler);\n              handlerForType.handler = handler;\n              originalAddEventListener.call(this, type, handler, options);\n            }\n\n            handlerForType.refCount++;\n          } catch (e) {\n            // Accessing dom properties is always fragile.\n            // Also allows us to skip `addEventListenrs` calls with no proper `this` context.\n          }\n        }\n\n        return originalAddEventListener.call(this, type, listener, options);\n      };\n    });\n\n    fill(\n      proto,\n      'removeEventListener',\n      function (originalRemoveEventListener: RemoveEventListener): RemoveEventListener {\n        return function (\n          this: Element,\n          type: string,\n          listener: EventListenerOrEventListenerObject,\n          options?: boolean | EventListenerOptions,\n        ): () => void {\n          if (type === 'click' || type == 'keypress') {\n            try {\n              const el = this as InstrumentedElement;\n              const handlers = el.__sentry_instrumentation_handlers__ || {};\n              const handlerForType = handlers[type];\n\n              if (handlerForType) {\n                handlerForType.refCount--;\n                // If there are no longer any custom handlers of the current type on this element, we can remove ours, too.\n                if (handlerForType.refCount <= 0) {\n                  originalRemoveEventListener.call(this, type, handlerForType.handler, options);\n                  handlerForType.handler = undefined;\n                  delete handlers[type]; // eslint-disable-line @typescript-eslint/no-dynamic-delete\n                }\n\n                // If there are no longer any custom handlers of any type on this element, cleanup everything.\n                if (Object.keys(handlers).length === 0) {\n                  delete el.__sentry_instrumentation_handlers__;\n                }\n              }\n            } catch (e) {\n              // Accessing dom properties is always fragile.\n              // Also allows us to skip `addEventListenrs` calls with no proper `this` context.\n            }\n          }\n\n          return originalRemoveEventListener.call(this, type, listener, options);\n        };\n      },\n    );\n  });\n}\n\nlet _oldOnErrorHandler: (typeof WINDOW)['onerror'] | null = null;\n/** JSDoc */\nfunction instrumentError(): void {\n  _oldOnErrorHandler = WINDOW.onerror;\n\n  WINDOW.onerror = function (msg: unknown, url: unknown, line: unknown, column: unknown, error: unknown): boolean {\n    triggerHandlers('error', {\n      column,\n      error,\n      line,\n      msg,\n      url,\n    });\n\n    if (_oldOnErrorHandler && !_oldOnErrorHandler.__SENTRY_LOADER__) {\n      // eslint-disable-next-line prefer-rest-params\n      return _oldOnErrorHandler.apply(this, arguments);\n    }\n\n    return false;\n  };\n\n  WINDOW.onerror.__SENTRY_INSTRUMENTED__ = true;\n}\n\nlet _oldOnUnhandledRejectionHandler: (typeof WINDOW)['onunhandledrejection'] | null = null;\n/** JSDoc */\nfunction instrumentUnhandledRejection(): void {\n  _oldOnUnhandledRejectionHandler = WINDOW.onunhandledrejection;\n\n  WINDOW.onunhandledrejection = function (e: any): boolean {\n    triggerHandlers('unhandledrejection', e);\n\n    if (_oldOnUnhandledRejectionHandler && !_oldOnUnhandledRejectionHandler.__SENTRY_LOADER__) {\n      // eslint-disable-next-line prefer-rest-params\n      return _oldOnUnhandledRejectionHandler.apply(this, arguments);\n    }\n\n    return true;\n  };\n\n  WINDOW.onunhandledrejection.__SENTRY_INSTRUMENTED__ = true;\n}\n", "/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nexport type MemoFunc = [\n  // memoize\n  (obj: any) => boolean,\n  // unmemoize\n  (obj: any) => void,\n];\n\n/**\n * Helper to decycle json objects\n */\nexport function memoBuilder(): MemoFunc {\n  const hasWeakSet = typeof WeakSet === 'function';\n  const inner: any = hasWeakSet ? new WeakSet() : [];\n  function memoize(obj: any): boolean {\n    if (hasWeakSet) {\n      if (inner.has(obj)) {\n        return true;\n      }\n      inner.add(obj);\n      return false;\n    }\n    // eslint-disable-next-line @typescript-eslint/prefer-for-of\n    for (let i = 0; i < inner.length; i++) {\n      const value = inner[i];\n      if (value === obj) {\n        return true;\n      }\n    }\n    inner.push(obj);\n    return false;\n  }\n\n  function unmemoize(obj: any): void {\n    if (hasWeakSet) {\n      inner.delete(obj);\n    } else {\n      for (let i = 0; i < inner.length; i++) {\n        if (inner[i] === obj) {\n          inner.splice(i, 1);\n          break;\n        }\n      }\n    }\n  }\n  return [memoize, unmemoize];\n}\n", "/*\n * This module exists for optimizations in the build process through rollup and terser.  We define some global\n * constants, which can be overridden during build. By guarding certain pieces of code with functions that return these\n * constants, we can control whether or not they appear in the final bundle. (Any code guarded by a false condition will\n * never run, and will hence be dropped during treeshaking.) The two primary uses for this are stripping out calls to\n * `logger` and preventing node-related code from appearing in browser bundles.\n *\n * Attention:\n * This file should not be used to define constants/flags that are intended to be used for tree-shaking conducted by\n * users. These flags should live in their respective packages, as we identified user tooling (specifically webpack)\n * having issues tree-shaking these constants across package boundaries.\n * An example for this is the __SENTRY_DEBUG__ constant. It is declared in each package individually because we want\n * users to be able to shake away expressions that it guards.\n */\n\ndeclare const __SENTRY_BROWSER_BUNDLE__: boolean | undefined;\n\nexport type SdkSource = 'npm' | 'cdn' | 'loader';\n\n/**\n * Figures out if we're building a browser bundle.\n *\n * @returns true if this is a browser bundle build.\n */\nexport function isBrowserBundle(): boolean {\n  return typeof __SENTRY_BROWSER_BUNDLE__ !== 'undefined' && !!__SENTRY_BROWSER_BUNDLE__;\n}\n\n/**\n * Get source of SDK.\n */\nexport function getSDKSource(): SdkSource {\n  // @ts-expect-error __SENTRY_SDK_SOURCE__ is injected by rollup during build process\n  return __SENTRY_SDK_SOURCE__;\n}\n", "/**\n * NOTE: In order to avoid circular dependencies, if you add a function to this module and it needs to print something,\n * you must either a) use `console.log` rather than the logger, or b) put your function elsewhere.\n */\n\nimport { isBrowserBundle } from './env';\n\n/**\n * Checks whether we're in the Node.js or Browser environment\n *\n * @returns Answer to given question\n */\nexport function isNodeEnv(): boolean {\n  // explicitly check for browser bundles as those can be optimized statically\n  // by terser/rollup.\n  return (\n    !isBrowserBundle() &&\n    Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]'\n  );\n}\n\n/**\n * Requires a module which is protected against bundler minification.\n *\n * @param request The module path to resolve\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any\nexport function dynamicRequire(mod: any, request: string): any {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return mod.require(request);\n}\n\n/**\n * Helper for dynamically loading module that should work with linked dependencies.\n * The problem is that we _should_ be using `require(require.resolve(moduleName, { paths: [cwd()] }))`\n * However it's _not possible_ to do that with Webpack, as it has to know all the dependencies during\n * build time. `require.resolve` is also not available in any other way, so we cannot create,\n * a fake helper like we do with `dynamicRequire`.\n *\n * We always prefer to use local package, thus the value is not returned early from each `try/catch` block.\n * That is to mimic the behavior of `require.resolve` exactly.\n *\n * @param moduleName module name to require\n * @returns possibly required module\n */\nexport function loadModule<T>(moduleName: string): T | undefined {\n  let mod: T | undefined;\n\n  try {\n    mod = dynamicRequire(module, moduleName);\n  } catch (e) {\n    // no-empty\n  }\n\n  try {\n    const { cwd } = dynamicRequire(module, 'process');\n    mod = dynamicRequire(module, `${cwd()}/node_modules/${moduleName}`) as T;\n  } catch (e) {\n    // no-empty\n  }\n\n  return mod;\n}\n", "import type { Primitive } from '@sentry/types';\n\nimport { isNaN, isSyntheticEvent, isVueViewModel } from './is';\nimport type { MemoFunc } from './memo';\nimport { memoBuilder } from './memo';\nimport { convertToPlainObject } from './object';\nimport { getFunctionName } from './stacktrace';\n\ntype Prototype = { constructor: (...args: unknown[]) => unknown };\n// This is a hack to placate TS, relying on the fact that technically, arrays are objects with integer keys. Normally we\n// think of those keys as actual numbers, but `arr['0']` turns out to work just as well as `arr[0]`, and doing it this\n// way lets us use a single type in the places where behave as if we are only dealing with objects, even if some of them\n// might be arrays.\ntype ObjOrArray<T> = { [key: string]: T };\n\n/**\n * Recursively normalizes the given object.\n *\n * - Creates a copy to prevent original input mutation\n * - Skips non-enumerable properties\n * - When stringifying, calls `toJSON` if implemented\n * - Removes circular references\n * - Translates non-serializable values (`undefined`/`NaN`/functions) to serializable format\n * - Translates known global objects/classes to a string representations\n * - Takes care of `Error` object serialization\n * - Optionally limits depth of final output\n * - Optionally limits number of properties/elements included in any single object/array\n *\n * @param input The object to be normalized.\n * @param depth The max depth to which to normalize the object. (Anything deeper stringified whole.)\n * @param maxProperties The max number of elements or properties to be included in any single array or\n * object in the normallized output.\n * @returns A normalized version of the object, or `\"**non-serializable**\"` if any errors are thrown during normalization.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function normalize(input: unknown, depth: number = 100, maxProperties: number = +Infinity): any {\n  try {\n    // since we're at the outermost level, we don't provide a key\n    return visit('', input, depth, maxProperties);\n  } catch (err) {\n    return { ERROR: `**non-serializable** (${err})` };\n  }\n}\n\n/** JSDoc */\nexport function normalizeToSize<T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  object: { [key: string]: any },\n  // Default Node.js REPL depth\n  depth: number = 3,\n  // 100kB, as 200kB is max payload size, so half sounds reasonable\n  maxSize: number = 100 * 1024,\n): T {\n  const normalized = normalize(object, depth);\n\n  if (jsonSize(normalized) > maxSize) {\n    return normalizeToSize(object, depth - 1, maxSize);\n  }\n\n  return normalized as T;\n}\n\n/**\n * Visits a node to perform normalization on it\n *\n * @param key The key corresponding to the given node\n * @param value The node to be visited\n * @param depth Optional number indicating the maximum recursion depth\n * @param maxProperties Optional maximum number of properties/elements included in any single object/array\n * @param memo Optional Memo class handling decycling\n */\nfunction visit(\n  key: string,\n  value: unknown,\n  depth: number = +Infinity,\n  maxProperties: number = +Infinity,\n  memo: MemoFunc = memoBuilder(),\n): Primitive | ObjOrArray<unknown> {\n  const [memoize, unmemoize] = memo;\n\n  // Get the simple cases out of the way first\n  if (\n    value == null || // this matches null and undefined -> eqeq not eqeqeq\n    (['number', 'boolean', 'string'].includes(typeof value) && !isNaN(value))\n  ) {\n    return value as Primitive;\n  }\n\n  const stringified = stringifyValue(key, value);\n\n  // Anything we could potentially dig into more (objects or arrays) will have come back as `\"[object XXXX]\"`.\n  // Everything else will have already been serialized, so if we don't see that pattern, we're done.\n  if (!stringified.startsWith('[object ')) {\n    return stringified;\n  }\n\n  // From here on, we can assert that `value` is either an object or an array.\n\n  // Do not normalize objects that we know have already been normalized. As a general rule, the\n  // \"__sentry_skip_normalization__\" property should only be used sparingly and only should only be set on objects that\n  // have already been normalized.\n  if ((value as ObjOrArray<unknown>)['__sentry_skip_normalization__']) {\n    return value as ObjOrArray<unknown>;\n  }\n\n  // We can set `__sentry_override_normalization_depth__` on an object to ensure that from there\n  // We keep a certain amount of depth.\n  // This should be used sparingly, e.g. we use it for the redux integration to ensure we get a certain amount of state.\n  const remainingDepth =\n    typeof (value as ObjOrArray<unknown>)['__sentry_override_normalization_depth__'] === 'number'\n      ? ((value as ObjOrArray<unknown>)['__sentry_override_normalization_depth__'] as number)\n      : depth;\n\n  // We're also done if we've reached the max depth\n  if (remainingDepth === 0) {\n    // At this point we know `serialized` is a string of the form `\"[object XXXX]\"`. Clean it up so it's just `\"[XXXX]\"`.\n    return stringified.replace('object ', '');\n  }\n\n  // If we've already visited this branch, bail out, as it's circular reference. If not, note that we're seeing it now.\n  if (memoize(value)) {\n    return '[Circular ~]';\n  }\n\n  // If the value has a `toJSON` method, we call it to extract more information\n  const valueWithToJSON = value as unknown & { toJSON?: () => unknown };\n  if (valueWithToJSON && typeof valueWithToJSON.toJSON === 'function') {\n    try {\n      const jsonValue = valueWithToJSON.toJSON();\n      // We need to normalize the return value of `.toJSON()` in case it has circular references\n      return visit('', jsonValue, remainingDepth - 1, maxProperties, memo);\n    } catch (err) {\n      // pass (The built-in `toJSON` failed, but we can still try to do it ourselves)\n    }\n  }\n\n  // At this point we know we either have an object or an array, we haven't seen it before, and we're going to recurse\n  // because we haven't yet reached the max depth. Create an accumulator to hold the results of visiting each\n  // property/entry, and keep track of the number of items we add to it.\n  const normalized = (Array.isArray(value) ? [] : {}) as ObjOrArray<unknown>;\n  let numAdded = 0;\n\n  // Before we begin, convert`Error` and`Event` instances into plain objects, since some of each of their relevant\n  // properties are non-enumerable and otherwise would get missed.\n  const visitable = convertToPlainObject(value as ObjOrArray<unknown>);\n\n  for (const visitKey in visitable) {\n    // Avoid iterating over fields in the prototype if they've somehow been exposed to enumeration.\n    if (!Object.prototype.hasOwnProperty.call(visitable, visitKey)) {\n      continue;\n    }\n\n    if (numAdded >= maxProperties) {\n      normalized[visitKey] = '[MaxProperties ~]';\n      break;\n    }\n\n    // Recursively visit all the child nodes\n    const visitValue = visitable[visitKey];\n    normalized[visitKey] = visit(visitKey, visitValue, remainingDepth - 1, maxProperties, memo);\n\n    numAdded++;\n  }\n\n  // Once we've visited all the branches, remove the parent from memo storage\n  unmemoize(value);\n\n  // Return accumulated values\n  return normalized;\n}\n\n// TODO remove this in v7 (this means the method will no longer be exported, under any name)\nexport { visit as walk };\n\n/* eslint-disable complexity */\n/**\n * Stringify the given value. Handles various known special values and types.\n *\n * Not meant to be used on simple primitives which already have a string representation, as it will, for example, turn\n * the number 1231 into \"[Object Number]\", nor on `null`, as it will throw.\n *\n * @param value The value to stringify\n * @returns A stringified representation of the given value\n */\nfunction stringifyValue(\n  key: unknown,\n  // this type is a tiny bit of a cheat, since this function does handle NaN (which is technically a number), but for\n  // our internal use, it'll do\n  value: Exclude<unknown, string | number | boolean | null>,\n): string {\n  try {\n    if (key === 'domain' && value && typeof value === 'object' && (value as { _events: unknown })._events) {\n      return '[Domain]';\n    }\n\n    if (key === 'domainEmitter') {\n      return '[DomainEmitter]';\n    }\n\n    // It's safe to use `global`, `window`, and `document` here in this manner, as we are asserting using `typeof` first\n    // which won't throw if they are not present.\n\n    if (typeof global !== 'undefined' && value === global) {\n      return '[Global]';\n    }\n\n    // eslint-disable-next-line no-restricted-globals\n    if (typeof window !== 'undefined' && value === window) {\n      return '[Window]';\n    }\n\n    // eslint-disable-next-line no-restricted-globals\n    if (typeof document !== 'undefined' && value === document) {\n      return '[Document]';\n    }\n\n    if (isVueViewModel(value)) {\n      return '[VueViewModel]';\n    }\n\n    // React's SyntheticEvent thingy\n    if (isSyntheticEvent(value)) {\n      return '[SyntheticEvent]';\n    }\n\n    if (typeof value === 'number' && value !== value) {\n      return '[NaN]';\n    }\n\n    if (typeof value === 'function') {\n      return `[Function: ${getFunctionName(value)}]`;\n    }\n\n    if (typeof value === 'symbol') {\n      return `[${String(value)}]`;\n    }\n\n    // stringified BigInts are indistinguishable from regular numbers, so we need to label them to avoid confusion\n    if (typeof value === 'bigint') {\n      return `[BigInt: ${String(value)}]`;\n    }\n\n    // Now that we've knocked out all the special cases and the primitives, all we have left are objects. Simply casting\n    // them to strings means that instances of classes which haven't defined their `toStringTag` will just come out as\n    // `\"[object Object]\"`. If we instead look at the constructor's name (which is the same as the name of the class),\n    // we can make sure that only plain objects come out that way.\n    const objName = getConstructorName(value);\n\n    // Handle HTML Elements\n    if (/^HTML(\\w*)Element$/.test(objName)) {\n      return `[HTMLElement: ${objName}]`;\n    }\n\n    return `[object ${objName}]`;\n  } catch (err) {\n    return `**non-serializable** (${err})`;\n  }\n}\n/* eslint-enable complexity */\n\nfunction getConstructorName(value: unknown): string {\n  const prototype: Prototype | null = Object.getPrototypeOf(value);\n\n  return prototype ? prototype.constructor.name : 'null prototype';\n}\n\n/** Calculates bytes size of input string */\nfunction utf8Length(value: string): number {\n  // eslint-disable-next-line no-bitwise\n  return ~-encodeURI(value).split(/%..|./).length;\n}\n\n/** Calculates bytes size of input object */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction jsonSize(value: any): number {\n  return utf8Length(JSON.stringify(value));\n}\n", "// Slightly modified (no IE8 support, ES6) and transcribed to TypeScript\n// https://github.com/calvinmetcalf/rollup-plugin-node-builtins/blob/63ab8aacd013767445ca299e468d9a60a95328d7/src/es6/path.js\n//\n// Copyright Joyent, Inc.and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n/** JSDoc */\nfunction normalizeArray(parts: string[], allowAboveRoot?: boolean): string[] {\n  // if the path tries to go above the root, `up` ends up > 0\n  let up = 0;\n  for (let i = parts.length - 1; i >= 0; i--) {\n    const last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nconst splitPathRe = /^(\\S+:\\\\|\\/?)([\\s\\S]*?)((?:\\.{1,2}|[^/\\\\]+?|)(\\.[^./\\\\]*|))(?:[/\\\\]*)$/;\n/** JSDoc */\nfunction splitPath(filename: string): string[] {\n  // Truncate files names greater than 1024 characters to avoid regex dos\n  // https://github.com/getsentry/sentry-javascript/pull/8737#discussion_r1285719172\n  const truncated = filename.length > 1024 ? `<truncated>${filename.slice(-1024)}` : filename;\n  const parts = splitPathRe.exec(truncated);\n  return parts ? parts.slice(1) : [];\n}\n\n// path.resolve([from ...], to)\n// posix version\n/** JSDoc */\nexport function resolve(...args: string[]): string {\n  let resolvedPath = '';\n  let resolvedAbsolute = false;\n\n  for (let i = args.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    const path = i >= 0 ? args[i] : '/';\n\n    // Skip empty entries\n    if (!path) {\n      continue;\n    }\n\n    resolvedPath = `${path}/${resolvedPath}`;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(\n    resolvedPath.split('/').filter(p => !!p),\n    !resolvedAbsolute,\n  ).join('/');\n\n  return (resolvedAbsolute ? '/' : '') + resolvedPath || '.';\n}\n\n/** JSDoc */\nfunction trim(arr: string[]): string[] {\n  let start = 0;\n  for (; start < arr.length; start++) {\n    if (arr[start] !== '') {\n      break;\n    }\n  }\n\n  let end = arr.length - 1;\n  for (; end >= 0; end--) {\n    if (arr[end] !== '') {\n      break;\n    }\n  }\n\n  if (start > end) {\n    return [];\n  }\n  return arr.slice(start, end - start + 1);\n}\n\n// path.relative(from, to)\n// posix version\n/** JSDoc */\nexport function relative(from: string, to: string): string {\n  /* eslint-disable no-param-reassign */\n  from = resolve(from).slice(1);\n  to = resolve(to).slice(1);\n  /* eslint-enable no-param-reassign */\n\n  const fromParts = trim(from.split('/'));\n  const toParts = trim(to.split('/'));\n\n  const length = Math.min(fromParts.length, toParts.length);\n  let samePartsLength = length;\n  for (let i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  let outputParts = [];\n  for (let i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n}\n\n// path.normalize(path)\n// posix version\n/** JSDoc */\nexport function normalizePath(path: string): string {\n  const isPathAbsolute = isAbsolute(path);\n  const trailingSlash = path.slice(-1) === '/';\n\n  // Normalize the path\n  let normalizedPath = normalizeArray(\n    path.split('/').filter(p => !!p),\n    !isPathAbsolute,\n  ).join('/');\n\n  if (!normalizedPath && !isPathAbsolute) {\n    normalizedPath = '.';\n  }\n  if (normalizedPath && trailingSlash) {\n    normalizedPath += '/';\n  }\n\n  return (isPathAbsolute ? '/' : '') + normalizedPath;\n}\n\n// posix version\n/** JSDoc */\nexport function isAbsolute(path: string): boolean {\n  return path.charAt(0) === '/';\n}\n\n// posix version\n/** JSDoc */\nexport function join(...args: string[]): string {\n  return normalizePath(args.join('/'));\n}\n\n/** JSDoc */\nexport function dirname(path: string): string {\n  const result = splitPath(path);\n  const root = result[0];\n  let dir = result[1];\n\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.';\n  }\n\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.slice(0, dir.length - 1);\n  }\n\n  return root + dir;\n}\n\n/** JSDoc */\nexport function basename(path: string, ext?: string): string {\n  let f = splitPath(path)[2];\n  if (ext && f.slice(ext.length * -1) === ext) {\n    f = f.slice(0, f.length - ext.length);\n  }\n  return f;\n}\n", "/* eslint-disable @typescript-eslint/explicit-function-return-type */\n/* eslint-disable @typescript-eslint/typedef */\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { isThenable } from './is';\n\n/** SyncPromise internal states */\nconst enum States {\n  /** Pending */\n  PENDING = 0,\n  /** Resolved / OK */\n  RESOLVED = 1,\n  /** Rejected / Error */\n  REJECTED = 2,\n}\n\n// Overloads so we can call resolvedSyncPromise without arguments and generic argument\nexport function resolvedSyncPromise(): PromiseLike<void>;\nexport function resolvedSyncPromise<T>(value: T | PromiseLike<T>): PromiseLike<T>;\n\n/**\n * Creates a resolved sync promise.\n *\n * @param value the value to resolve the promise with\n * @returns the resolved sync promise\n */\nexport function resolvedSyncPromise<T>(value?: T | PromiseLike<T>): PromiseLike<T> {\n  return new SyncPromise(resolve => {\n    resolve(value);\n  });\n}\n\n/**\n * Creates a rejected sync promise.\n *\n * @param value the value to reject the promise with\n * @returns the rejected sync promise\n */\nexport function rejectedSyncPromise<T = never>(reason?: any): PromiseLike<T> {\n  return new SyncPromise((_, reject) => {\n    reject(reason);\n  });\n}\n\n/**\n * Thenable class that behaves like a Promise and follows it's interface\n * but is not async internally\n */\nclass SyncPromise<T> implements PromiseLike<T> {\n  private _state: States;\n  private _handlers: Array<[boolean, (value: T) => void, (reason: any) => any]>;\n  private _value: any;\n\n  public constructor(\n    executor: (resolve: (value?: T | PromiseLike<T> | null) => void, reject: (reason?: any) => void) => void,\n  ) {\n    this._state = States.PENDING;\n    this._handlers = [];\n\n    try {\n      executor(this._resolve, this._reject);\n    } catch (e) {\n      this._reject(e);\n    }\n  }\n\n  /** JSDoc */\n  public then<TResult1 = T, TResult2 = never>(\n    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | null,\n    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null,\n  ): PromiseLike<TResult1 | TResult2> {\n    return new SyncPromise((resolve, reject) => {\n      this._handlers.push([\n        false,\n        result => {\n          if (!onfulfilled) {\n            // TODO: ¯\\_(ツ)_/¯\n            // TODO: FIXME\n            resolve(result as any);\n          } else {\n            try {\n              resolve(onfulfilled(result));\n            } catch (e) {\n              reject(e);\n            }\n          }\n        },\n        reason => {\n          if (!onrejected) {\n            reject(reason);\n          } else {\n            try {\n              resolve(onrejected(reason));\n            } catch (e) {\n              reject(e);\n            }\n          }\n        },\n      ]);\n      this._executeHandlers();\n    });\n  }\n\n  /** JSDoc */\n  public catch<TResult = never>(\n    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | null,\n  ): PromiseLike<T | TResult> {\n    return this.then(val => val, onrejected);\n  }\n\n  /** JSDoc */\n  public finally<TResult>(onfinally?: (() => void) | null): PromiseLike<TResult> {\n    return new SyncPromise<TResult>((resolve, reject) => {\n      let val: TResult | any;\n      let isRejected: boolean;\n\n      return this.then(\n        value => {\n          isRejected = false;\n          val = value;\n          if (onfinally) {\n            onfinally();\n          }\n        },\n        reason => {\n          isRejected = true;\n          val = reason;\n          if (onfinally) {\n            onfinally();\n          }\n        },\n      ).then(() => {\n        if (isRejected) {\n          reject(val);\n          return;\n        }\n\n        resolve(val as unknown as any);\n      });\n    });\n  }\n\n  /** JSDoc */\n  private readonly _resolve = (value?: T | PromiseLike<T> | null) => {\n    this._setResult(States.RESOLVED, value);\n  };\n\n  /** JSDoc */\n  private readonly _reject = (reason?: any) => {\n    this._setResult(States.REJECTED, reason);\n  };\n\n  /** JSDoc */\n  private readonly _setResult = (state: States, value?: T | PromiseLike<T> | any) => {\n    if (this._state !== States.PENDING) {\n      return;\n    }\n\n    if (isThenable(value)) {\n      void (value as PromiseLike<T>).then(this._resolve, this._reject);\n      return;\n    }\n\n    this._state = state;\n    this._value = value;\n\n    this._executeHandlers();\n  };\n\n  /** JSDoc */\n  private readonly _executeHandlers = () => {\n    if (this._state === States.PENDING) {\n      return;\n    }\n\n    const cachedHandlers = this._handlers.slice();\n    this._handlers = [];\n\n    cachedHandlers.forEach(handler => {\n      if (handler[0]) {\n        return;\n      }\n\n      if (this._state === States.RESOLVED) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        handler[1](this._value as unknown as any);\n      }\n\n      if (this._state === States.REJECTED) {\n        handler[2](this._value);\n      }\n\n      handler[0] = true;\n    });\n  };\n}\n\nexport { SyncPromise };\n", "import { SentryError } from './error';\nimport { rejectedSyncPromise, resolvedSyncPromise, SyncPromise } from './syncpromise';\n\nexport interface PromiseBuffer<T> {\n  // exposes the internal array so tests can assert on the state of it.\n  // XXX: this really should not be public api.\n  $: Array<PromiseLike<T>>;\n  add(taskProducer: () => PromiseLike<T>): PromiseLike<T>;\n  drain(timeout?: number): PromiseLike<boolean>;\n}\n\n/**\n * Creates an new PromiseBuffer object with the specified limit\n * @param limit max number of promises that can be stored in the buffer\n */\nexport function makePromiseBuffer<T>(limit?: number): PromiseBuffer<T> {\n  const buffer: Array<PromiseLike<T>> = [];\n\n  function isReady(): boolean {\n    return limit === undefined || buffer.length < limit;\n  }\n\n  /**\n   * Remove a promise from the queue.\n   *\n   * @param task Can be any PromiseLike<T>\n   * @returns Removed promise.\n   */\n  function remove(task: PromiseLike<T>): PromiseLike<T> {\n    return buffer.splice(buffer.indexOf(task), 1)[0];\n  }\n\n  /**\n   * Add a promise (representing an in-flight action) to the queue, and set it to remove itself on fulfillment.\n   *\n   * @param taskProducer A function producing any PromiseLike<T>; In previous versions this used to be `task:\n   *        PromiseLike<T>`, but under that model, Promises were instantly created on the call-site and their executor\n   *        functions therefore ran immediately. Thus, even if the buffer was full, the action still happened. By\n   *        requiring the promise to be wrapped in a function, we can defer promise creation until after the buffer\n   *        limit check.\n   * @returns The original promise.\n   */\n  function add(taskProducer: () => PromiseLike<T>): PromiseLike<T> {\n    if (!isReady()) {\n      return rejectedSyncPromise(new SentryError('Not adding Promise because buffer limit was reached.'));\n    }\n\n    // start the task and add its promise to the queue\n    const task = taskProducer();\n    if (buffer.indexOf(task) === -1) {\n      buffer.push(task);\n    }\n    void task\n      .then(() => remove(task))\n      // Use `then(null, rejectionHandler)` rather than `catch(rejectionHandler)` so that we can use `PromiseLike`\n      // rather than `Promise`. `PromiseLike` doesn't have a `.catch` method, making its polyfill smaller. (ES5 didn't\n      // have promises, so TS has to polyfill when down-compiling.)\n      .then(null, () =>\n        remove(task).then(null, () => {\n          // We have to add another catch here because `remove()` starts a new promise chain.\n        }),\n      );\n    return task;\n  }\n\n  /**\n   * Wait for all promises in the queue to resolve or for timeout to expire, whichever comes first.\n   *\n   * @param timeout The time, in ms, after which to resolve to `false` if the queue is still non-empty. Passing `0` (or\n   * not passing anything) will make the promise wait as long as it takes for the queue to drain before resolving to\n   * `true`.\n   * @returns A promise which will resolve to `true` if the queue is already empty or drains before the timeout, and\n   * `false` otherwise\n   */\n  function drain(timeout?: number): PromiseLike<boolean> {\n    return new SyncPromise<boolean>((resolve, reject) => {\n      let counter = buffer.length;\n\n      if (!counter) {\n        return resolve(true);\n      }\n\n      // wait for `timeout` ms and then resolve to `false` (if not cancelled first)\n      const capturedSetTimeout = setTimeout(() => {\n        if (timeout && timeout > 0) {\n          resolve(false);\n        }\n      }, timeout);\n\n      // if all promises resolve in time, cancel the timer and resolve to `true`\n      buffer.forEach(item => {\n        void resolvedSyncPromise(item).then(() => {\n          if (!--counter) {\n            clearTimeout(capturedSetTimeout);\n            resolve(true);\n          }\n        }, reject);\n      });\n    });\n  }\n\n  return {\n    $: buffer,\n    add,\n    drain,\n  };\n}\n", "type PartialURL = {\n  host?: string;\n  path?: string;\n  protocol?: string;\n  relative?: string;\n  search?: string;\n  hash?: string;\n};\n\n/**\n * Parses string form of URL into an object\n * // borrowed from https://tools.ietf.org/html/rfc3986#appendix-B\n * // intentionally using regex and not <a/> href parsing trick because React Native and other\n * // environments where DOM might not be available\n * @returns parsed URL object\n */\nexport function parseUrl(url: string): PartialURL {\n  if (!url) {\n    return {};\n  }\n\n  const match = url.match(/^(([^:/?#]+):)?(\\/\\/([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?$/);\n\n  if (!match) {\n    return {};\n  }\n\n  // coerce to undefined values to empty string so we don't get 'undefined'\n  const query = match[6] || '';\n  const fragment = match[8] || '';\n  return {\n    host: match[4],\n    path: match[5],\n    protocol: match[2],\n    search: query,\n    hash: fragment,\n    relative: match[5] + query + fragment, // everything minus origin\n  };\n}\n\n/**\n * Strip the query string and fragment off of a given URL or path (if present)\n *\n * @param urlPath Full URL or path, including possible query string and/or fragment\n * @returns URL or path without query string or fragment\n */\nexport function stripUrlQueryAndFragment(urlPath: string): string {\n  // eslint-disable-next-line no-useless-escape\n  return urlPath.split(/[\\?#]/, 1)[0];\n}\n\n/**\n * Returns number of URL segments of a passed string URL.\n */\nexport function getNumberOfUrlSegments(url: string): number {\n  // split at '/' or at '\\/' to split regex urls correctly\n  return url.split(/\\\\?\\//).filter(s => s.length > 0 && s !== ',').length;\n}\n\n/**\n * Takes a URL object and returns a sanitized string which is safe to use as span description\n * see: https://develop.sentry.dev/sdk/data-handling/#structuring-data\n */\nexport function getSanitizedUrlString(url: PartialURL): string {\n  const { protocol, host, path } = url;\n\n  const filteredHost =\n    (host &&\n      host\n        // Always filter out authority\n        .replace(/^.*@/, '[filtered]:[filtered]@')\n        // Don't show standard :80 (http) and :443 (https) ports to reduce the noise\n        .replace(':80', '')\n        .replace(':443', '')) ||\n    '';\n\n  return `${protocol ? `${protocol}://` : ''}${filteredHost}${path}`;\n}\n", "// TODO: Remove this file once equivalent integration is used everywhere\n\n/* eslint-disable complexity */\n/**\n * The functions here, which enrich an event with request data, are mostly for use in Node, but are safe for use in a\n * browser context. They live here in `@sentry/utils` rather than in `@sentry/node` so that they can be used in\n * frameworks (like nextjs), which, because of SSR, run the same code in both Node and browser contexts.\n *\n * TODO (v8 / #5257): Remove the note below\n * Note that for now, the tests for this code have to live in `@sentry/node`, since they test both these functions and\n * the backwards-compatibility-preserving wrappers which still live in `handlers.ts` there.\n */\n\n/* eslint-disable max-lines */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport type {\n  Event,\n  ExtractedNodeRequestData,\n  PolymorphicRequest,\n  Transaction,\n  TransactionSource,\n} from '@sentry/types';\n\nimport { isPlainObject, isString } from './is';\nimport { normalize } from './normalize';\nimport { stripUrlQueryAndFragment } from './url';\n\nconst DEFAULT_INCLUDES = {\n  ip: false,\n  request: true,\n  transaction: true,\n  user: true,\n};\nconst DEFAULT_REQUEST_INCLUDES = ['cookies', 'data', 'headers', 'method', 'query_string', 'url'];\nconst DEFAULT_USER_INCLUDES = ['id', 'username', 'email'];\n\ntype InjectedNodeDeps = {\n  cookie: {\n    parse: (cookieStr: string) => Record<string, string>;\n  };\n  url: {\n    parse: (urlStr: string) => {\n      query: string | null;\n    };\n  };\n};\n\n/**\n * Sets parameterized route as transaction name e.g.: `GET /users/:id`\n * Also adds more context data on the transaction from the request\n */\nexport function addRequestDataToTransaction(\n  transaction: Transaction | undefined,\n  req: PolymorphicRequest,\n  deps?: InjectedNodeDeps,\n): void {\n  if (!transaction) return;\n  if (!transaction.metadata.source || transaction.metadata.source === 'url') {\n    // Attempt to grab a parameterized route off of the request\n    transaction.setName(...extractPathForTransaction(req, { path: true, method: true }));\n  }\n  transaction.setData('url', req.originalUrl || req.url);\n  if (req.baseUrl) {\n    transaction.setData('baseUrl', req.baseUrl);\n  }\n  transaction.setData('query', extractQueryParams(req, deps));\n}\n\n/**\n * Extracts a complete and parameterized path from the request object and uses it to construct transaction name.\n * If the parameterized transaction name cannot be extracted, we fall back to the raw URL.\n *\n * Additionally, this function determines and returns the transaction name source\n *\n * eg. GET /mountpoint/user/:id\n *\n * @param req A request object\n * @param options What to include in the transaction name (method, path, or a custom route name to be\n *                used instead of the request's route)\n *\n * @returns A tuple of the fully constructed transaction name [0] and its source [1] (can be either 'route' or 'url')\n */\nexport function extractPathForTransaction(\n  req: PolymorphicRequest,\n  options: { path?: boolean; method?: boolean; customRoute?: string } = {},\n): [string, TransactionSource] {\n  const method = req.method && req.method.toUpperCase();\n\n  let path = '';\n  let source: TransactionSource = 'url';\n\n  // Check to see if there's a parameterized route we can use (as there is in Express)\n  if (options.customRoute || req.route) {\n    path = options.customRoute || `${req.baseUrl || ''}${req.route && req.route.path}`;\n    source = 'route';\n  }\n\n  // Otherwise, just take the original URL\n  else if (req.originalUrl || req.url) {\n    path = stripUrlQueryAndFragment(req.originalUrl || req.url || '');\n  }\n\n  let name = '';\n  if (options.method && method) {\n    name += method;\n  }\n  if (options.method && options.path) {\n    name += ' ';\n  }\n  if (options.path && path) {\n    name += path;\n  }\n\n  return [name, source];\n}\n\ntype TransactionNamingScheme = 'path' | 'methodPath' | 'handler';\n\n/** JSDoc */\nfunction extractTransaction(req: PolymorphicRequest, type: boolean | TransactionNamingScheme): string {\n  switch (type) {\n    case 'path': {\n      return extractPathForTransaction(req, { path: true })[0];\n    }\n    case 'handler': {\n      return (req.route && req.route.stack && req.route.stack[0] && req.route.stack[0].name) || '<anonymous>';\n    }\n    case 'methodPath':\n    default: {\n      return extractPathForTransaction(req, { path: true, method: true })[0];\n    }\n  }\n}\n\n/** JSDoc */\nfunction extractUserData(\n  user: {\n    [key: string]: any;\n  },\n  keys: boolean | string[],\n): { [key: string]: any } {\n  const extractedUser: { [key: string]: any } = {};\n  const attributes = Array.isArray(keys) ? keys : DEFAULT_USER_INCLUDES;\n\n  attributes.forEach(key => {\n    if (user && key in user) {\n      extractedUser[key] = user[key];\n    }\n  });\n\n  return extractedUser;\n}\n\n/**\n * Normalize data from the request object, accounting for framework differences.\n *\n * @param req The request object from which to extract data\n * @param options.include An optional array of keys to include in the normalized data. Defaults to\n * DEFAULT_REQUEST_INCLUDES if not provided.\n * @param options.deps Injected, platform-specific dependencies\n * @returns An object containing normalized request data\n */\nexport function extractRequestData(\n  req: PolymorphicRequest,\n  options?: {\n    include?: string[];\n    deps?: InjectedNodeDeps;\n  },\n): ExtractedNodeRequestData {\n  const { include = DEFAULT_REQUEST_INCLUDES, deps } = options || {};\n  const requestData: { [key: string]: any } = {};\n\n  // headers:\n  //   node, express, koa, nextjs: req.headers\n  const headers = (req.headers || {}) as {\n    host?: string;\n    cookie?: string;\n  };\n  // method:\n  //   node, express, koa, nextjs: req.method\n  const method = req.method;\n  // host:\n  //   express: req.hostname in > 4 and req.host in < 4\n  //   koa: req.host\n  //   node, nextjs: req.headers.host\n  const host = req.hostname || req.host || headers.host || '<no host>';\n  // protocol:\n  //   node, nextjs: <n/a>\n  //   express, koa: req.protocol\n  const protocol = req.protocol === 'https' || (req.socket && req.socket.encrypted) ? 'https' : 'http';\n  // url (including path and query string):\n  //   node, express: req.originalUrl\n  //   koa, nextjs: req.url\n  const originalUrl = req.originalUrl || req.url || '';\n  // absolute url\n  const absoluteUrl = `${protocol}://${host}${originalUrl}`;\n  include.forEach(key => {\n    switch (key) {\n      case 'headers': {\n        requestData.headers = headers;\n        break;\n      }\n      case 'method': {\n        requestData.method = method;\n        break;\n      }\n      case 'url': {\n        requestData.url = absoluteUrl;\n        break;\n      }\n      case 'cookies': {\n        // cookies:\n        //   node, express, koa: req.headers.cookie\n        //   vercel, sails.js, express (w/ cookie middleware), nextjs: req.cookies\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        requestData.cookies =\n          // TODO (v8 / #5257): We're only sending the empty object for backwards compatibility, so the last bit can\n          // come off in v8\n          req.cookies || (headers.cookie && deps && deps.cookie && deps.cookie.parse(headers.cookie)) || {};\n        break;\n      }\n      case 'query_string': {\n        // query string:\n        //   node: req.url (raw)\n        //   express, koa, nextjs: req.query\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        requestData.query_string = extractQueryParams(req, deps);\n        break;\n      }\n      case 'data': {\n        if (method === 'GET' || method === 'HEAD') {\n          break;\n        }\n        // body data:\n        //   express, koa, nextjs: req.body\n        //\n        //   when using node by itself, you have to read the incoming stream(see\n        //   https://nodejs.dev/learn/get-http-request-body-data-using-nodejs); if a user is doing that, we can't know\n        //   where they're going to store the final result, so they'll have to capture this data themselves\n        if (req.body !== undefined) {\n          requestData.data = isString(req.body) ? req.body : JSON.stringify(normalize(req.body));\n        }\n        break;\n      }\n      default: {\n        if ({}.hasOwnProperty.call(req, key)) {\n          requestData[key] = (req as { [key: string]: any })[key];\n        }\n      }\n    }\n  });\n\n  return requestData;\n}\n\n/**\n * Options deciding what parts of the request to use when enhancing an event\n */\nexport interface AddRequestDataToEventOptions {\n  /** Flags controlling whether each type of data should be added to the event */\n  include?: {\n    ip?: boolean;\n    request?: boolean | string[];\n    transaction?: boolean | TransactionNamingScheme;\n    user?: boolean | string[];\n  };\n\n  /** Injected platform-specific dependencies */\n  deps?: {\n    cookie: {\n      parse: (cookieStr: string) => Record<string, string>;\n    };\n    url: {\n      parse: (urlStr: string) => {\n        query: string | null;\n      };\n    };\n  };\n}\n\n/**\n * Add data from the given request to the given event\n *\n * @param event The event to which the request data will be added\n * @param req Request object\n * @param options.include Flags to control what data is included\n * @param options.deps Injected platform-specific dependencies\n * @hidden\n */\nexport function addRequestDataToEvent(\n  event: Event,\n  req: PolymorphicRequest,\n  options?: AddRequestDataToEventOptions,\n): Event {\n  const include = {\n    ...DEFAULT_INCLUDES,\n    ...(options && options.include),\n  };\n\n  if (include.request) {\n    const extractedRequestData = Array.isArray(include.request)\n      ? extractRequestData(req, { include: include.request, deps: options && options.deps })\n      : extractRequestData(req, { deps: options && options.deps });\n\n    event.request = {\n      ...event.request,\n      ...extractedRequestData,\n    };\n  }\n\n  if (include.user) {\n    const extractedUser = req.user && isPlainObject(req.user) ? extractUserData(req.user, include.user) : {};\n\n    if (Object.keys(extractedUser).length) {\n      event.user = {\n        ...event.user,\n        ...extractedUser,\n      };\n    }\n  }\n\n  // client ip:\n  //   node, nextjs: req.socket.remoteAddress\n  //   express, koa: req.ip\n  if (include.ip) {\n    const ip = req.ip || (req.socket && req.socket.remoteAddress);\n    if (ip) {\n      event.user = {\n        ...event.user,\n        ip_address: ip,\n      };\n    }\n  }\n\n  if (include.transaction && !event.transaction) {\n    // TODO do we even need this anymore?\n    // TODO make this work for nextjs\n    event.transaction = extractTransaction(req, include.transaction);\n  }\n\n  return event;\n}\n\nfunction extractQueryParams(\n  req: PolymorphicRequest,\n  deps?: InjectedNodeDeps,\n): string | Record<string, unknown> | undefined {\n  // url (including path and query string):\n  //   node, express: req.originalUrl\n  //   koa, nextjs: req.url\n  let originalUrl = req.originalUrl || req.url || '';\n\n  if (!originalUrl) {\n    return;\n  }\n\n  // The `URL` constructor can't handle internal URLs of the form `/some/path/here`, so stick a dummy protocol and\n  // hostname on the beginning. Since the point here is just to grab the query string, it doesn't matter what we use.\n  if (originalUrl.startsWith('/')) {\n    originalUrl = `http://dogs.are.great${originalUrl}`;\n  }\n\n  return (\n    req.query ||\n    (typeof URL !== undefined && new URL(originalUrl).search.replace('?', '')) ||\n    // In Node 8, `URL` isn't in the global scope, so we have to use the built-in module from Node\n    (deps && deps.url && deps.url.parse(originalUrl).query) ||\n    undefined\n  );\n}\n", "/* eslint-disable deprecation/deprecation */\nimport type { Severity, SeverityLevel } from '@sentry/types';\n\n// Note: Ideally the `SeverityLevel` type would be derived from `validSeverityLevels`, but that would mean either\n//\n// a) moving `validSeverityLevels` to `@sentry/types`,\n// b) moving the`SeverityLevel` type here, or\n// c) importing `validSeverityLevels` from here into `@sentry/types`.\n//\n// Option A would make `@sentry/types` a runtime dependency of `@sentry/utils` (not good), and options B and C would\n// create a circular dependency between `@sentry/types` and `@sentry/utils` (also not good). So a TODO accompanying the\n// type, reminding anyone who changes it to change this list also, will have to do.\n\nexport const validSeverityLevels = ['fatal', 'error', 'warning', 'log', 'info', 'debug'];\n\n/**\n * Converts a string-based level into a member of the deprecated {@link Severity} enum.\n *\n * @deprecated `severityFromString` is deprecated. Please use `severityLevelFromString` instead.\n *\n * @param level String representation of Severity\n * @returns Severity\n */\nexport function severityFromString(level: Severity | SeverityLevel | string): Severity {\n  return severityLevelFromString(level) as Severity;\n}\n\n/**\n * Converts a string-based level into a `SeverityLevel`, normalizing it along the way.\n *\n * @param level String representation of desired `SeverityLevel`.\n * @returns The `SeverityLevel` corresponding to the given string, or 'log' if the string isn't a valid level.\n */\nexport function severityLevelFromString(level: SeverityLevel | string): SeverityLevel {\n  return (level === 'warn' ? 'warning' : validSeverityLevels.includes(level) ? level : 'log') as SeverityLevel;\n}\n", "import { dynamicRequire, isNodeEnv } from './node';\nimport { getGlobalObject } from './worldwide';\n\n// eslint-disable-next-line deprecation/deprecation\nconst WINDOW = getGlobalObject<Window>();\n\n/**\n * An object that can return the current timestamp in seconds since the UNIX epoch.\n */\ninterface TimestampSource {\n  nowSeconds(): number;\n}\n\n/**\n * A TimestampSource implementation for environments that do not support the Performance Web API natively.\n *\n * Note that this TimestampSource does not use a monotonic clock. A call to `nowSeconds` may return a timestamp earlier\n * than a previously returned value. We do not try to emulate a monotonic behavior in order to facilitate debugging. It\n * is more obvious to explain \"why does my span have negative duration\" than \"why my spans have zero duration\".\n */\nconst dateTimestampSource: TimestampSource = {\n  nowSeconds: () => Date.now() / 1000,\n};\n\n/**\n * A partial definition of the [Performance Web API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Performance}\n * for accessing a high-resolution monotonic clock.\n */\ninterface Performance {\n  /**\n   * The millisecond timestamp at which measurement began, measured in Unix time.\n   */\n  timeOrigin: number;\n  /**\n   * Returns the current millisecond timestamp, where 0 represents the start of measurement.\n   */\n  now(): number;\n}\n\n/**\n * Returns a wrapper around the native Performance API browser implementation, or undefined for browsers that do not\n * support the API.\n *\n * Wrapping the native API works around differences in behavior from different browsers.\n */\nfunction getBrowserPerformance(): Performance | undefined {\n  const { performance } = WINDOW;\n  if (!performance || !performance.now) {\n    return undefined;\n  }\n\n  // Replace performance.timeOrigin with our own timeOrigin based on Date.now().\n  //\n  // This is a partial workaround for browsers reporting performance.timeOrigin such that performance.timeOrigin +\n  // performance.now() gives a date arbitrarily in the past.\n  //\n  // Additionally, computing timeOrigin in this way fills the gap for browsers where performance.timeOrigin is\n  // undefined.\n  //\n  // The assumption that performance.timeOrigin + performance.now() ~= Date.now() is flawed, but we depend on it to\n  // interact with data coming out of performance entries.\n  //\n  // Note that despite recommendations against it in the spec, browsers implement the Performance API with a clock that\n  // might stop when the computer is asleep (and perhaps under other circumstances). Such behavior causes\n  // performance.timeOrigin + performance.now() to have an arbitrary skew over Date.now(). In laptop computers, we have\n  // observed skews that can be as long as days, weeks or months.\n  //\n  // See https://github.com/getsentry/sentry-javascript/issues/2590.\n  //\n  // BUG: despite our best intentions, this workaround has its limitations. It mostly addresses timings of pageload\n  // transactions, but ignores the skew built up over time that can aversely affect timestamps of navigation\n  // transactions of long-lived web pages.\n  const timeOrigin = Date.now() - performance.now();\n\n  return {\n    now: () => performance.now(),\n    timeOrigin,\n  };\n}\n\n/**\n * Returns the native Performance API implementation from Node.js. Returns undefined in old Node.js versions that don't\n * implement the API.\n */\nfunction getNodePerformance(): Performance | undefined {\n  try {\n    const perfHooks = dynamicRequire(module, 'perf_hooks') as { performance: Performance };\n    return perfHooks.performance;\n  } catch (_) {\n    return undefined;\n  }\n}\n\n/**\n * The Performance API implementation for the current platform, if available.\n */\nconst platformPerformance: Performance | undefined = isNodeEnv() ? getNodePerformance() : getBrowserPerformance();\n\nconst timestampSource: TimestampSource =\n  platformPerformance === undefined\n    ? dateTimestampSource\n    : {\n        nowSeconds: () => (platformPerformance.timeOrigin + platformPerformance.now()) / 1000,\n      };\n\n/**\n * Returns a timestamp in seconds since the UNIX epoch using the Date API.\n */\nexport const dateTimestampInSeconds: () => number = dateTimestampSource.nowSeconds.bind(dateTimestampSource);\n\n/**\n * Returns a timestamp in seconds since the UNIX epoch using either the Performance or Date APIs, depending on the\n * availability of the Performance API.\n *\n * See `usingPerformanceAPI` to test whether the Performance API is used.\n *\n * BUG: Note that because of how browsers implement the Performance API, the clock might stop when the computer is\n * asleep. This creates a skew between `dateTimestampInSeconds` and `timestampInSeconds`. The\n * skew can grow to arbitrary amounts like days, weeks or months.\n * See https://github.com/getsentry/sentry-javascript/issues/2590.\n */\nexport const timestampInSeconds: () => number = timestampSource.nowSeconds.bind(timestampSource);\n\n/**\n * Re-exported with an old name for backwards-compatibility.\n * TODO (v8): Remove this\n *\n * @deprecated Use `timestampInSeconds` instead.\n */\nexport const timestampWithMs = timestampInSeconds;\n\n/**\n * A boolean that is true when timestampInSeconds uses the Performance API to produce monotonic timestamps.\n */\nexport const usingPerformanceAPI = platformPerformance !== undefined;\n\n/**\n * Internal helper to store what is the source of browserPerformanceTimeOrigin below. For debugging only.\n */\nexport let _browserPerformanceTimeOriginMode: string;\n\n/**\n * The number of milliseconds since the UNIX epoch. This value is only usable in a browser, and only when the\n * performance API is available.\n */\nexport const browserPerformanceTimeOrigin = ((): number | undefined => {\n  // Unfortunately browsers may report an inaccurate time origin data, through either performance.timeOrigin or\n  // performance.timing.navigationStart, which results in poor results in performance data. We only treat time origin\n  // data as reliable if they are within a reasonable threshold of the current time.\n\n  const { performance } = WINDOW;\n  if (!performance || !performance.now) {\n    _browserPerformanceTimeOriginMode = 'none';\n    return undefined;\n  }\n\n  const threshold = 3600 * 1000;\n  const performanceNow = performance.now();\n  const dateNow = Date.now();\n\n  // if timeOrigin isn't available set delta to threshold so it isn't used\n  const timeOriginDelta = performance.timeOrigin\n    ? Math.abs(performance.timeOrigin + performanceNow - dateNow)\n    : threshold;\n  const timeOriginIsReliable = timeOriginDelta < threshold;\n\n  // While performance.timing.navigationStart is deprecated in favor of performance.timeOrigin, performance.timeOrigin\n  // is not as widely supported. Namely, performance.timeOrigin is undefined in Safari as of writing.\n  // Also as of writing, performance.timing is not available in Web Workers in mainstream browsers, so it is not always\n  // a valid fallback. In the absence of an initial time provided by the browser, fallback to the current time from the\n  // Date API.\n  // eslint-disable-next-line deprecation/deprecation\n  const navigationStart = performance.timing && performance.timing.navigationStart;\n  const hasNavigationStart = typeof navigationStart === 'number';\n  // if navigationStart isn't available set delta to threshold so it isn't used\n  const navigationStartDelta = hasNavigationStart ? Math.abs(navigationStart + performanceNow - dateNow) : threshold;\n  const navigationStartIsReliable = navigationStartDelta < threshold;\n\n  if (timeOriginIsReliable || navigationStartIsReliable) {\n    // Use the more reliable time origin\n    if (timeOriginDelta <= navigationStartDelta) {\n      _browserPerformanceTimeOriginMode = 'timeOrigin';\n      return performance.timeOrigin;\n    } else {\n      _browserPerformanceTimeOriginMode = 'navigationStart';\n      return navigationStart;\n    }\n  }\n\n  // Either both timeOrigin and navigationStart are skewed or neither is available, fallback to Date.\n  _browserPerformanceTimeOriginMode = 'dateNow';\n  return dateNow;\n})();\n", "import type {\n  Attachment,\n  AttachmentItem,\n  BaseEnvelopeHeaders,\n  BaseEnvelopeItemHeaders,\n  DataCategory,\n  DsnComponents,\n  Envelope,\n  EnvelopeItemType,\n  Event,\n  EventEnvelopeHeaders,\n  SdkInfo,\n  SdkMetadata,\n  TextEncoderInternal,\n} from '@sentry/types';\n\nimport { dsnToString } from './dsn';\nimport { normalize } from './normalize';\nimport { dropUndefinedKeys } from './object';\n\n/**\n * Creates an envelope.\n * Make sure to always explicitly provide the generic to this function\n * so that the envelope types resolve correctly.\n */\nexport function createEnvelope<E extends Envelope>(headers: E[0], items: E[1] = []): E {\n  return [headers, items] as E;\n}\n\n/**\n * Add an item to an envelope.\n * Make sure to always explicitly provide the generic to this function\n * so that the envelope types resolve correctly.\n */\nexport function addItemToEnvelope<E extends Envelope>(envelope: E, newItem: E[1][number]): E {\n  const [headers, items] = envelope;\n  return [headers, [...items, newItem]] as unknown as E;\n}\n\n/**\n * Convenience function to loop through the items and item types of an envelope.\n * (This function was mostly created because working with envelope types is painful at the moment)\n *\n * If the callback returns true, the rest of the items will be skipped.\n */\nexport function forEachEnvelopeItem<E extends Envelope>(\n  envelope: Envelope,\n  callback: (envelopeItem: E[1][number], envelopeItemType: E[1][number][0]['type']) => boolean | void,\n): boolean {\n  const envelopeItems = envelope[1];\n\n  for (const envelopeItem of envelopeItems) {\n    const envelopeItemType = envelopeItem[0].type;\n    const result = callback(envelopeItem, envelopeItemType);\n\n    if (result) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Returns true if the envelope contains any of the given envelope item types\n */\nexport function envelopeContainsItemType(envelope: Envelope, types: EnvelopeItemType[]): boolean {\n  return forEachEnvelopeItem(envelope, (_, type) => types.includes(type));\n}\n\n/**\n * Encode a string to UTF8.\n */\nfunction encodeUTF8(input: string, textEncoder?: TextEncoderInternal): Uint8Array {\n  const utf8 = textEncoder || new TextEncoder();\n  return utf8.encode(input);\n}\n\n/**\n * Serializes an envelope.\n */\nexport function serializeEnvelope(envelope: Envelope, textEncoder?: TextEncoderInternal): string | Uint8Array {\n  const [envHeaders, items] = envelope;\n\n  // Initially we construct our envelope as a string and only convert to binary chunks if we encounter binary data\n  let parts: string | Uint8Array[] = JSON.stringify(envHeaders);\n\n  function append(next: string | Uint8Array): void {\n    if (typeof parts === 'string') {\n      parts = typeof next === 'string' ? parts + next : [encodeUTF8(parts, textEncoder), next];\n    } else {\n      parts.push(typeof next === 'string' ? encodeUTF8(next, textEncoder) : next);\n    }\n  }\n\n  for (const item of items) {\n    const [itemHeaders, payload] = item;\n\n    append(`\\n${JSON.stringify(itemHeaders)}\\n`);\n\n    if (typeof payload === 'string' || payload instanceof Uint8Array) {\n      append(payload);\n    } else {\n      let stringifiedPayload: string;\n      try {\n        stringifiedPayload = JSON.stringify(payload);\n      } catch (e) {\n        // In case, despite all our efforts to keep `payload` circular-dependency-free, `JSON.strinify()` still\n        // fails, we try again after normalizing it again with infinite normalization depth. This of course has a\n        // performance impact but in this case a performance hit is better than throwing.\n        stringifiedPayload = JSON.stringify(normalize(payload));\n      }\n      append(stringifiedPayload);\n    }\n  }\n\n  return typeof parts === 'string' ? parts : concatBuffers(parts);\n}\n\nfunction concatBuffers(buffers: Uint8Array[]): Uint8Array {\n  const totalLength = buffers.reduce((acc, buf) => acc + buf.length, 0);\n\n  const merged = new Uint8Array(totalLength);\n  let offset = 0;\n  for (const buffer of buffers) {\n    merged.set(buffer, offset);\n    offset += buffer.length;\n  }\n\n  return merged;\n}\n\nexport interface TextDecoderInternal {\n  decode(input?: Uint8Array): string;\n}\n\n/**\n * Parses an envelope\n */\nexport function parseEnvelope(\n  env: string | Uint8Array,\n  textEncoder: TextEncoderInternal,\n  textDecoder: TextDecoderInternal,\n): Envelope {\n  let buffer = typeof env === 'string' ? textEncoder.encode(env) : env;\n\n  function readBinary(length: number): Uint8Array {\n    const bin = buffer.subarray(0, length);\n    // Replace the buffer with the remaining data excluding trailing newline\n    buffer = buffer.subarray(length + 1);\n    return bin;\n  }\n\n  function readJson<T>(): T {\n    let i = buffer.indexOf(0xa);\n    // If we couldn't find a newline, we must have found the end of the buffer\n    if (i < 0) {\n      i = buffer.length;\n    }\n\n    return JSON.parse(textDecoder.decode(readBinary(i))) as T;\n  }\n\n  const envelopeHeader = readJson<BaseEnvelopeHeaders>();\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const items: [any, any][] = [];\n\n  while (buffer.length) {\n    const itemHeader = readJson<BaseEnvelopeItemHeaders>();\n    const binaryLength = typeof itemHeader.length === 'number' ? itemHeader.length : undefined;\n\n    items.push([itemHeader, binaryLength ? readBinary(binaryLength) : readJson()]);\n  }\n\n  return [envelopeHeader, items];\n}\n\n/**\n * Creates attachment envelope items\n */\nexport function createAttachmentEnvelopeItem(\n  attachment: Attachment,\n  textEncoder?: TextEncoderInternal,\n): AttachmentItem {\n  const buffer = typeof attachment.data === 'string' ? encodeUTF8(attachment.data, textEncoder) : attachment.data;\n\n  return [\n    dropUndefinedKeys({\n      type: 'attachment',\n      length: buffer.length,\n      filename: attachment.filename,\n      content_type: attachment.contentType,\n      attachment_type: attachment.attachmentType,\n    }),\n    buffer,\n  ];\n}\n\nconst ITEM_TYPE_TO_DATA_CATEGORY_MAP: Record<EnvelopeItemType, DataCategory> = {\n  session: 'session',\n  sessions: 'session',\n  attachment: 'attachment',\n  transaction: 'transaction',\n  event: 'error',\n  client_report: 'internal',\n  user_report: 'default',\n  profile: 'profile',\n  replay_event: 'replay',\n  replay_recording: 'replay',\n  check_in: 'monitor',\n};\n\n/**\n * Maps the type of an envelope item to a data category.\n */\nexport function envelopeItemTypeToDataCategory(type: EnvelopeItemType): DataCategory {\n  return ITEM_TYPE_TO_DATA_CATEGORY_MAP[type];\n}\n\n/** Extracts the minimal SDK info from from the metadata or an events */\nexport function getSdkMetadataForEnvelopeHeader(metadataOrEvent?: SdkMetadata | Event): SdkInfo | undefined {\n  if (!metadataOrEvent || !metadataOrEvent.sdk) {\n    return;\n  }\n  const { name, version } = metadataOrEvent.sdk;\n  return { name, version };\n}\n\n/**\n * Creates event envelope headers, based on event, sdk info and tunnel\n * Note: This function was extracted from the core package to make it available in Replay\n */\nexport function createEventEnvelopeHeaders(\n  event: Event,\n  sdkInfo: SdkInfo | undefined,\n  tunnel: string | undefined,\n  dsn: DsnComponents,\n): EventEnvelopeHeaders {\n  const dynamicSamplingContext = event.sdkProcessingMetadata && event.sdkProcessingMetadata.dynamicSamplingContext;\n  return {\n    event_id: event.event_id as string,\n    sent_at: new Date().toISOString(),\n    ...(sdkInfo && { sdk: sdkInfo }),\n    ...(!!tunnel && { dsn: dsnToString(dsn) }),\n    ...(dynamicSamplingContext && {\n      trace: dropUndefinedKeys({ ...dynamicSamplingContext }),\n    }),\n  };\n}\n", "import type { ClientReport, ClientReportEnvelope, ClientReportItem } from '@sentry/types';\n\nimport { createEnvelope } from './envelope';\nimport { dateTimestampInSeconds } from './time';\n\n/**\n * Creates client report envelope\n * @param discarded_events An array of discard events\n * @param dsn A DSN that can be set on the header. Optional.\n */\nexport function createClientReportEnvelope(\n  discarded_events: ClientReport['discarded_events'],\n  dsn?: string,\n  timestamp?: number,\n): ClientReportEnvelope {\n  const clientReportItem: ClientReportItem = [\n    { type: 'client_report' },\n    {\n      timestamp: timestamp || dateTimestampInSeconds(),\n      discarded_events,\n    },\n  ];\n  return createEnvelope<ClientReportEnvelope>(dsn ? { dsn } : {}, [clientReportItem]);\n}\n", "import type { TransportMakeRequestResponse } from '@sentry/types';\n\n// Intentionally keeping the key broad, as we don't know for sure what rate limit headers get returned from backend\nexport type RateLimits = Record<string, number>;\n\nexport const DEFAULT_RETRY_AFTER = 60 * 1000; // 60 seconds\n\n/**\n * Extracts Retry-After value from the request header or returns default value\n * @param header string representation of 'Retry-After' header\n * @param now current unix timestamp\n *\n */\nexport function parseRetryAfterHeader(header: string, now: number = Date.now()): number {\n  const headerDelay = parseInt(`${header}`, 10);\n  if (!isNaN(headerDelay)) {\n    return headerDelay * 1000;\n  }\n\n  const headerDate = Date.parse(`${header}`);\n  if (!isNaN(headerDate)) {\n    return headerDate - now;\n  }\n\n  return DEFAULT_RETRY_AFTER;\n}\n\n/**\n * Gets the time that the given category is disabled until for rate limiting.\n * In case no category-specific limit is set but a general rate limit across all categories is active,\n * that time is returned.\n *\n * @return the time in ms that the category is disabled until or 0 if there's no active rate limit.\n */\nexport function disabledUntil(limits: RateLimits, category: string): number {\n  return limits[category] || limits.all || 0;\n}\n\n/**\n * Checks if a category is rate limited\n */\nexport function isRateLimited(limits: RateLimits, category: string, now: number = Date.now()): boolean {\n  return disabledUntil(limits, category) > now;\n}\n\n/**\n * Update ratelimits from incoming headers.\n *\n * @return the updated RateLimits object.\n */\nexport function updateRateLimits(\n  limits: RateLimits,\n  { statusCode, headers }: TransportMakeRequestResponse,\n  now: number = Date.now(),\n): RateLimits {\n  const updatedRateLimits: RateLimits = {\n    ...limits,\n  };\n\n  // \"The name is case-insensitive.\"\n  // https://developer.mozilla.org/en-US/docs/Web/API/Headers/get\n  const rateLimitHeader = headers && headers['x-sentry-rate-limits'];\n  const retryAfterHeader = headers && headers['retry-after'];\n\n  if (rateLimitHeader) {\n    /**\n     * rate limit headers are of the form\n     *     <header>,<header>,..\n     * where each <header> is of the form\n     *     <retry_after>: <categories>: <scope>: <reason_code>\n     * where\n     *     <retry_after> is a delay in seconds\n     *     <categories> is the event type(s) (error, transaction, etc) being rate limited and is of the form\n     *         <category>;<category>;...\n     *     <scope> is what's being limited (org, project, or key) - ignored by SDK\n     *     <reason_code> is an arbitrary string like \"org_quota\" - ignored by SDK\n     */\n    for (const limit of rateLimitHeader.trim().split(',')) {\n      const [retryAfter, categories] = limit.split(':', 2);\n      const headerDelay = parseInt(retryAfter, 10);\n      const delay = (!isNaN(headerDelay) ? headerDelay : 60) * 1000; // 60sec default\n      if (!categories) {\n        updatedRateLimits.all = now + delay;\n      } else {\n        for (const category of categories.split(';')) {\n          updatedRateLimits[category] = now + delay;\n        }\n      }\n    }\n  } else if (retryAfterHeader) {\n    updatedRateLimits.all = now + parseRetryAfterHeader(retryAfterHeader, now);\n  } else if (statusCode === 429) {\n    updatedRateLimits.all = now + 60 * 1000;\n  }\n\n  return updatedRateLimits;\n}\n"],
  "mappings": "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",
  "names": ["isNaN", "console", "logger", "WINDOW", "WINDOW", "WINDOW", "WINDOW", "WINDOW", "xhrInfo", "handlers", "isNaN", "States", "resolve", "resolve", "WINDOW", "WINDOW"]
}
