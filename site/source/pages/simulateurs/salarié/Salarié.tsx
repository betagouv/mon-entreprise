import { ASTNode, reduceAST } from 'publicodes'
import { Trans, useTranslation } from 'react-i18next'
import { useSelector } from 'react-redux'
import { css, styled } from 'styled-components'

import { ConseillersEntreprisesButton } from '@/components/ConseillersEntreprisesButton'
import { Condition } from '@/components/EngineValue/Condition'
import Value from '@/components/EngineValue/Value'
import { WhenNotAlreadyDefined } from '@/components/EngineValue/WhenNotAlreadyDefined'
import PeriodSwitch from '@/components/PeriodSwitch'
import RuleLink from '@/components/RuleLink'
import SimulateurWarning from '@/components/SimulateurWarning'
import Simulation, {
	SimulationGoal,
	SimulationGoals,
} from '@/components/Simulation'
import SalaryExplanation from '@/components/simulationExplanation/SalaryExplanation'
import { FadeIn, FromTop } from '@/components/ui/animate'
import BrowserOnly from '@/components/utils/BrowserOnly'
import {
	Body,
	Emoji,
	H2,
	Li,
	Link,
	Message,
	SmallBody,
	Strong,
	Ul,
} from '@/design-system'
import { DottedName } from '@/domaine/publicodes/DottedName'
import { useEngine } from '@/hooks/useEngine'
import { useSitePaths } from '@/sitePaths'
import { targetUnitSelector } from '@/store/selectors/simulation/targetUnit.selector'

import urlIllustrationNetBrutEn from './illustration-net-brut-en.png'
import urlIllustrationNetBrut from './illustration-net-brut.png'

export default function Salari√©Simulation() {
	const { absoluteSitePaths } = useSitePaths()

	return (
		<>
			<Simulation
				explanations={<SalaryExplanation />}
				customEndMessages={
					<>
						<Trans i18nKey="simulation-end.hiring.text">
							Vous pouvez maintenant concr√©tiser votre projet d'embauche.
						</Trans>
					</>
				}
				afterQuestionsSlot={
					<BrowserOnly>
						{/** L'√©quipe Code Du Travail Num√©rique ne souhaite pas r√©f√©rencer
						 * le simulateur dirigeant de SASU sur son site. */}
						{!import.meta.env.SSR &&
							!document.referrer?.includes('code.travail.gouv.fr') && (
								<WhenNotAlreadyDefined dottedName="entreprise . cat√©gorie juridique">
									<FadeIn>
										<Message
											border={false}
											mini
											icon={<Emoji emoji="üë®‚Äç‚úàÔ∏è" />}
											className="print-hidden"
										>
											<SmallBody>
												<Trans i18nKey="pages.simulateurs.salari√©.SASU">
													Vous √™tes dirigeant d'une SAS(U) ?{' '}
													<Link to={absoluteSitePaths.simulateurs.sasu}>
														Acc√©dez au simulateur de revenu d√©di√©
													</Link>
												</Trans>
											</SmallBody>
										</Message>
									</FadeIn>
								</WhenNotAlreadyDefined>
							)}
					</BrowserOnly>
				}
			>
				<SimulateurWarning
					simulateur="salari√©"
					informationsCompl√©mentaires={
						<Body>
							<Trans i18nKey="pages.simulateurs.salari√©.warning">
								Le simulateur ne prend pour l‚Äôinstant pas en compte les accords
								et conventions collectives, ni la myriade d‚Äôaides aux
								entreprises. Trouvez votre convention collective{' '}
								<Link
									href="https://code.travail.gouv.fr/outils/convention-collective#entreprise"
									aria-label="ici, trouvez votre convention collective sur code.travail.gouv.fr, nouvelle fen√™tre"
								>
									ici
								</Link>
								, et explorez les aides sur&nbsp;
								<Link
									href="https://www.aides-entreprises.fr"
									aria-label="aides-entreprises.fr, nouvelle fen√™tre"
								>
									aides-entreprises.fr
								</Link>
								.
							</Trans>
						</Body>
					}
				/>
				<Salari√©SimulationGoals />
			</Simulation>
		</>
	)
}

const StyledImage = styled.img`
	width: 100%;
	${({ theme }) =>
		theme.darkMode &&
		css`
			filter: invert() brightness(150%);
		`}
`

export const SeoExplanations = () => {
	const { t, i18n } = useTranslation()

	return (
		<Trans i18nKey="pages.simulateurs.salari√©.seo">
			<section>
				<H2>Comment calculer le salaire net ?</H2>
				<Body>
					Lors de l'entretien d'embauche l'employeur propose en g√©n√©ral une
					r√©mun√©ration exprim√©e en ¬´ brut ¬ª. Le montant annonc√© inclut ainsi les
					cotisations salariales, qui servent √† financer la protection sociale
					du salari√© et qui sont retranch√©es du salaire ¬´ net ¬ª per√ßu par le
					salari√©.
				</Body>
				<Body>
					Vous pouvez utiliser notre simulateur pour convertir le{' '}
					<strong>salaire brut en net</strong> : il vous suffit pour cela saisir
					la r√©mun√©ration annonc√©e dans la case salaire brut. La simulation
					peut-√™tre affin√©e en r√©pondant aux diff√©rentes questions (CDD, statut
					cadre, heures suppl√©mentaires, temps partiel, titre-restaurants,
					etc.).
				</Body>
				<StyledImage
					src={
						i18n.language === 'fr'
							? urlIllustrationNetBrut
							: urlIllustrationNetBrutEn
					}
					alt={t(
						'pages.simulateurs.salari√©.alt-image1',
						'Salaire net (per√ßu par le salari√©) est √©gal √† Salaire brut (inscrit dans le contrat de travail) moins cotisations salariales (retraite, csg, etc)'
					)}
				/>
				<Body>
					Par ailleurs depuis 2019, l'
					<RuleLink dottedName="imp√¥t">imp√¥t sur le revenu</RuleLink> est
					pr√©lev√© √† la source. Pour ce faire, la direction g√©n√©rale des finances
					publiques (DGFiP) transmet √† l'employeur le taux d'imposition calcul√©
					√† partir de la d√©claration de revenus du salari√©. Si ce taux est
					inconnu, par exemple lors d'une premi√®re ann√©e d'activit√©, l'employeur
					utilise le{' '}
					<RuleLink dottedName="imp√¥t . taux neutre d'imp√¥t sur le revenu">
						taux neutre
					</RuleLink>
					.
				</Body>
			</section>

			<section>
				<H2>Comment calculer le co√ªt d'embauche ?</H2>
				<Body>
					Si vous cherchez √† embaucher, vous pouvez calculer le co√ªt total de la
					r√©mun√©ration de votre salari√©, ainsi que les montants de cotisations
					patronales et salariales correspondant. Cela vous permet de d√©finir le
					niveau de r√©mun√©ration en connaissant le montant global de charge que
					cela repr√©sente pour votre entreprise.
				</Body>
				<Body>
					En plus du salaire, notre simulateur prend en compte le calcul des
					avantages en nature (t√©l√©phone, v√©hicule de fonction, etc.), ainsi que
					la mutuelle sant√© obligatoire.
				</Body>
				<Body>
					Il existe des{' '}
					<RuleLink
						aria-label={t(
							'aides diff√©r√©es, voir le d√©tail du calcul pour aides diff√©r√©es'
						)}
						dottedName="salari√© . co√ªt total employeur . aides"
					>
						aides diff√©r√©es
					</RuleLink>{' '}
					√† l'embauche qui ne sont pas toutes prises en compte par notre
					simulateur, vous pouvez les retrouver sur{' '}
					<Link
						href="http://www.aides-entreprises.fr"
						aria-label={t(
							'le portail officiel, acc√©der √† aides-entreprises.fr, nouvelle fen√™tre'
						)}
					>
						le portail officiel
					</Link>
					.
				</Body>
			</section>

			<section className="print-hidden">
				<H2>√âchanger avec un conseiller pour votre projet de recrutement</H2>

				<Body>Vous souhaitez :</Body>
				<Ul>
					<Li>
						√ätre conseill√©(e) sur les aides √† l'embauche mobilisables pour votre
						recrutement
					</Li>
					<Li>
						Vous informer sur l'apprentissage, le contrat de
						professionnalisation, les emplois francs en quartiers prioritaires,
						le <abbr title="Volontariat Territorial en Entreprise">VTE</abbr>
						...
					</Li>
					<Li>Trouver des candidats</Li>
					<Li>Recruter une personne en situation de handicap</Li>
				</Ul>
				<Body>
					<Strong>
						Service public simple et rapide : vous √™tes rappel√©(e) par le
						conseiller qui peut vous aider.
					</Strong>
				</Body>
				<Body>
					Partenaires mobilis√©s : France Travail, Apec, Cap Emploi, missions
					locales...
				</Body>
				<ConseillersEntreprisesButton variant="recrutement" />
			</section>
		</Trans>
	)
}

function Salari√©SimulationGoals() {
	return (
		<SimulationGoals>
			<PeriodSwitch />
			<SimulationGoal dottedName="salari√© . co√ªt total employeur" />
			<AidesGlimpse />

			<SimulationGoal dottedName="salari√© . contrat . salaire brut" />
			<SimulationGoal
				small
				dottedName="salari√© . contrat . salaire brut . √©quivalent temps plein"
			/>
			<SimulationGoal dottedName="salari√© . r√©mun√©ration . net . √† payer avant imp√¥t" />
			<TitreRestaurant />
			<SimulationGoal dottedName="salari√© . r√©mun√©ration . net . pay√© apr√®s imp√¥t" />
		</SimulationGoals>
	)
}

function TitreRestaurant() {
	const targetUnit = useSelector(targetUnitSelector)
	const dottedName =
		'salari√© . r√©mun√©ration . frais professionnels . titres-restaurant . montant'

	return (
		<Condition expression={`${dottedName} > 0`}>
			<FromTop>
				<StyledInfo>
					<RuleLink dottedName={dottedName}>
						+{' '}
						<Value
							expression={dottedName}
							displayedUnit="‚Ç¨"
							unit={targetUnit}
							linkToRule={false}
						/>{' '}
						<Trans>en titres-restaurant</Trans> <Emoji emoji=" üçΩ" />
					</RuleLink>
				</StyledInfo>
			</FromTop>
		</Condition>
	)
}

function AidesGlimpse() {
	const targetUnit = useSelector(targetUnitSelector)
	const dottedName = 'salari√© . co√ªt total employeur . aides' as DottedName
	const engine = useEngine()
	const aides = engine.getRule(dottedName)
	// Dans le cas o√π il n'y a qu'une seule aide √† l'embauche qui s'applique, nous
	// faisons un lien direct vers cette aide, plut√¥t qu'un lien vers la liste qui
	// est une somme des aides qui sont toutes nulle sauf l'aide active.
	const aideLink = reduceAST(
		(acc, node) => {
			if (node.sourceMap?.mecanismName === 'somme') {
				const aidesNotNul =
					(node.sourceMap?.args.valeur as ASTNode[])
						.map((n) => engine.evaluate(n))
						.filter(({ nodeValue }) => nodeValue !== false) ?? []
				if (aidesNotNul.length === 1 && 'dottedName' in aidesNotNul[0]) {
					return aidesNotNul[0].dottedName as DottedName
				} else {
					return acc
				}
			}
		},
		dottedName,
		aides
	)

	return (
		<Condition expression={`${dottedName} > 0`}>
			<FromTop>
				<StyledInfo>
					<RuleLink dottedName={aideLink}>
						<Trans>en incluant</Trans>{' '}
						<Value
							expression={dottedName}
							displayedUnit="‚Ç¨"
							unit={targetUnit}
							linkToRule={false}
						/>{' '}
						<Trans>d'aides</Trans>{' '}
						<Emoji emoji={aides.rawNode.ic√¥nes as string} />
					</RuleLink>
				</StyledInfo>
			</FromTop>
		</Condition>
	)
}

const StyledInfo = styled(SmallBody)`
	position: relative;
	text-align: right;
	margin-top: -1.5rem;
	margin-bottom: 1.5rem;
	right: 0;
	z-index: 3;
`
