import {
  nt,
  st
} from "./chunk-6XDI4R7H.js";
import {
  require_jsx_runtime
} from "./chunk-NRX3E354.js";
import {
  require_react
} from "./chunk-4BTUQGSU.js";
import {
  __toESM
} from "./chunk-2LSFTFF7.js";

// ../node_modules/@publicodes/react-ui/dist/chunk-VVS2HAZM.js
var import_react = __toESM(require_react(), 1);
var import_react2 = __toESM(require_react(), 1);
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var import_react3 = __toESM(require_react(), 1);
var import_jsx_runtime3 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime4 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime5 = __toESM(require_jsx_runtime(), 1);
var import_react4 = __toESM(require_react(), 1);
var import_react5 = __toESM(require_react(), 1);
var import_jsx_runtime6 = __toESM(require_jsx_runtime(), 1);
import { capitalise0 } from "publicodes";
import { utils } from "publicodes";
var Arrow = ({ className }) => (0, import_jsx_runtime.jsxs)(
  "svg",
  {
    xmlns: "http://www.w3.org/2000/svg",
    height: "24px",
    viewBox: "0 0 24 24",
    width: "24px",
    fill: "#000000",
    className,
    "aria-hidden": "true",
    children: [
      (0, import_jsx_runtime.jsx)("path", { d: "M0 0h24v24H0V0z", fill: "none" }),
      (0, import_jsx_runtime.jsx)("path", { d: "M7.41 8.59L12 13.17l4.59-4.58L18 10l-6 6-6-6 1.41-1.41z" })
    ]
  }
);
var AccordionContainer = st.div`
	overflow: hidden;
	border-radius: 6px;
	border: 1px solid #bbb;
`;
var H4 = st.h4`
	font-weight: 700;
	margin: 2rem 0px 1rem;
	font-size: 1.25rem;
	line-height: 1.75rem;

	button {
		display: flex;
		flex-wrap: nowrap;
		flex-direction: row;
		align-content: center;
		align-items: center;
		justify-content: space-between;
		text-align: left;
		width: 100%;
		height: 50px;
		border: none;
		padding: 1.5rem;
		cursor: pointer;
		font-size: 1rem;
		font-weight: bold;

		&:hover {
			text-decoration: underline;
		}
	}
`;
var AccordionWrapper = st.div`
	border: 0 solid #bbb;
	${({ i }) => i > 0 && nt`
			border-top-width: 1px;
		`}

	& ${H4} {
		margin: 0;
	}
`;
var Child = st.div`
	display: ${({ open }) => open ? "block" : "none"};
	margin: 1.5rem;
`;
var StyledArrow = st(Arrow)`
	display: inline-block;
	width: 25px;
	transition: transform 0.1s;
	height: 25px;
	transform: rotate(${({ $isOpen }) => $isOpen ? `180deg` : `360deg`});
`;
var Accordion = ({ items }) => {
  const [open, setOpen] = (0, import_react2.useState)([]);
  const toggleAccordion = (i) => () => setOpen((arr) => {
    arr[i] = !arr[i];
    return [...arr];
  });
  return (0, import_jsx_runtime2.jsx)(AccordionContainer, { children: items.map(({ id, title, children }, i) => (0, import_jsx_runtime2.jsxs)(AccordionWrapper, { id, i, children: [
    (0, import_jsx_runtime2.jsx)(H4, { children: (0, import_jsx_runtime2.jsxs)("button", { onClick: toggleAccordion(i), children: [
      (0, import_jsx_runtime2.jsx)("span", { children: title }),
      (0, import_jsx_runtime2.jsx)(StyledArrow, { $isOpen: open[i] })
    ] }) }),
    (0, import_jsx_runtime2.jsx)("div", { children: (0, import_jsx_runtime2.jsx)(Child, { open: !!open[i], children }) })
  ] }, id)) });
};
var PreWrapper = st.div`
	position: relative;
	:hover button,
	:focus-within button {
		opacity: 1;
	}
`;
var Bar = st.div`
	position: absolute;
	right: 0;
	top: 0;
	margin: 0 0.5rem;
	height: 100%;
	display: flex;
	align-items: center;
	gap: 0.5rem;
	line-height: 0;

	& button {
		transform: translateT(-50%);
		margin: 0;
		padding: 1px 3px;
		transition: opacity ease-in-out 0.1s;
		cursor: pointer;
	}
`;
var Pre = st.pre`
	overflow: auto;
	padding: 0.5rem;
	background-color: #e6e9ec;
	border-radius: 0.25rem;
`;
var Code = ({ tabs }) => {
  const [tab, setTab] = (0, import_react3.useState)();
  const tabKeys = Object.keys(tabs);
  const activeTab = tab ?? tabKeys[0];
  return (0, import_jsx_runtime3.jsxs)(PreWrapper, { children: [
    (0, import_jsx_runtime3.jsxs)(Bar, { children: [
      typeof navigator !== "undefined" && navigator.clipboard && (0, import_jsx_runtime3.jsx)(
        "button",
        {
          onClick: () => {
            void navigator.clipboard.writeText(tabs[activeTab]);
          },
          children: "copier"
        }
      ),
      tabKeys.length > 1 && tabKeys.filter((name) => name !== activeTab).map((name) => (0, import_jsx_runtime3.jsx)("button", { onClick: () => setTab(name), children: name }, name))
    ] }),
    (0, import_jsx_runtime3.jsx)(Pre, { children: (0, import_jsx_runtime3.jsx)("code", { children: tabs[activeTab] }) })
  ] });
};
function References({ references }) {
  if (!references) {
    return null;
  }
  return (0, import_jsx_runtime4.jsx)("ul", { children: Object.entries(references).map(([name, link]) => (0, import_jsx_runtime4.jsx)(
    "li",
    {
      style: {
        display: "flex",
        alignItems: "center"
      },
      children: (0, import_jsx_runtime4.jsx)(
        "a",
        {
          href: link,
          target: "_blank",
          style: {
            marginRight: "1rem"
          },
          rel: "noreferrer",
          children: capitalise0(name)
        }
      )
    },
    name
  )) });
}
var DefaultTextRenderer = ({
  children
}) => (0, import_jsx_runtime5.jsx)("p", { children });
var DefaultLinkRenderer = (props) => (0, import_jsx_runtime5.jsx)("a", { ...props });
var defaultRenderers = (renderers = {}) => {
  const base = {
    References,
    Text: DefaultTextRenderer,
    Code,
    Accordion,
    Link: DefaultLinkRenderer
  };
  return Object.fromEntries(
    [...Object.keys(base), ...Object.keys(renderers)].map((key) => [key, renderers[key] ?? base[key]]).filter(([, val]) => val)
  );
};
var RenderersContext = (0, import_react.createContext)(defaultRenderers());
var BasepathContext = (0, import_react.createContext)("/documentation");
var DottedNameContext = (0, import_react.createContext)(void 0);
var EngineContext = (0, import_react.createContext)(
  void 0
);
var useEngine = () => {
  const engine = (0, import_react4.useContext)(EngineContext);
  if (!engine) {
    throw new Error("Engine expected");
  }
  return engine;
};
var { encodeRuleName } = utils;
function RuleLink({
  dottedName,
  engine,
  currentEngineId,
  documentationPath,
  displayIcon = false,
  linkComponent,
  children,
  ...propsRest
}) {
  var _a;
  const renderers = (0, import_react5.useContext)(RenderersContext);
  const dottedNameContext = utils.findCommonAncestor(
    (0, import_react5.useContext)(DottedNameContext) ?? dottedName,
    dottedName
  );
  const Link = linkComponent || renderers.Link;
  if (!Link) {
    throw new Error("You must provide a <Link /> component.");
  }
  const rule = engine.context.parsedRules[dottedName];
  const newPath = documentationPath + "/" + encodeRuleName(dottedName);
  const contextTitle = [
    ...utils.ruleParents(dottedName).reverse().filter((name) => name.startsWith(`${dottedNameContext} . `)).map((name) => {
      var _a2;
      return (_a2 = engine.context.parsedRules[name]) == null ? void 0 : _a2.title.trim();
    }),
    (_a = rule.title) == null ? void 0 : _a.trim()
  ].join(" › ");
  if (!rule) {
    throw new Error(`Unknown rule: ${dottedName}`);
  }
  return (0, import_jsx_runtime6.jsxs)(
    Link,
    {
      ...propsRest,
      "aria-label": propsRest["aria-label"] ?? (rule.title && rule.title + ", voir les détails du calcul pour : " + rule.title),
      to: newPath + (currentEngineId ? `?currentEngineId=${currentEngineId}` : ""),
      children: [
        children || contextTitle || rule.dottedName.split(" . ").slice(-1)[0],
        " ",
        displayIcon && rule.rawNode.icônes && (0, import_jsx_runtime6.jsx)("span", { children: rule.rawNode.icônes })
      ]
    }
  );
}
function RuleLinkWithContext(props) {
  const engine = useEngine();
  const documentationPath = (0, import_react5.useContext)(BasepathContext);
  const currentEngineIdFromUrl = typeof window !== "undefined" && new URLSearchParams(window.location.search).get("currentEngineId");
  const currentEngineId = props.useSubEngine !== false && (props.currentEngineId || engine.context.subEngineId || currentEngineIdFromUrl && Number.parseInt(currentEngineIdFromUrl)) || void 0;
  return (0, import_jsx_runtime6.jsx)(
    RuleLink,
    {
      engine,
      currentEngineId,
      documentationPath,
      ...props
    }
  );
}

export {
  Arrow,
  defaultRenderers,
  RenderersContext,
  BasepathContext,
  DottedNameContext,
  EngineContext,
  useEngine,
  RuleLink,
  RuleLinkWithContext
};
//# sourceMappingURL=chunk-53Z4L563.js.map
