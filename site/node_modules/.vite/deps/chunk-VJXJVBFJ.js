import {
  addDays,
  constructFrom,
  endOfDay,
  formatDistance,
  formatDistanceStrict,
  isSameDay,
  isSameHour,
  isSameISOWeek,
  isSameMinute,
  isSameMonth,
  isSameQuarter,
  isSameSecond,
  isSameYear,
  startOfDay,
  subDays
} from "./chunk-6UATWM7O.js";
import {
  getDefaultOptions,
  isSameWeek,
  setDefaultOptions,
  toDate
} from "./chunk-5Z5FYLBY.js";

// ../node_modules/date-fns/constructNow.mjs
function constructNow(date) {
  return constructFrom(date, Date.now());
}

// ../node_modules/date-fns/endOfToday.mjs
function endOfToday() {
  return endOfDay(Date.now());
}

// ../node_modules/date-fns/endOfTomorrow.mjs
function endOfTomorrow() {
  const now = /* @__PURE__ */ new Date();
  const year = now.getFullYear();
  const month = now.getMonth();
  const day = now.getDate();
  const date = /* @__PURE__ */ new Date(0);
  date.setFullYear(year, month, day + 1);
  date.setHours(23, 59, 59, 999);
  return date;
}

// ../node_modules/date-fns/endOfYesterday.mjs
function endOfYesterday() {
  const now = /* @__PURE__ */ new Date();
  const year = now.getFullYear();
  const month = now.getMonth();
  const day = now.getDate();
  const date = /* @__PURE__ */ new Date(0);
  date.setFullYear(year, month, day - 1);
  date.setHours(23, 59, 59, 999);
  return date;
}

// ../node_modules/date-fns/formatDistanceToNow.mjs
function formatDistanceToNow(date, options) {
  return formatDistance(date, constructNow(date), options);
}

// ../node_modules/date-fns/formatDistanceToNowStrict.mjs
function formatDistanceToNowStrict(date, options) {
  return formatDistanceStrict(date, constructNow(date), options);
}

// ../node_modules/date-fns/isFuture.mjs
function isFuture(date) {
  return +toDate(date) > Date.now();
}

// ../node_modules/date-fns/isPast.mjs
function isPast(date) {
  return +toDate(date) < Date.now();
}

// ../node_modules/date-fns/isThisHour.mjs
function isThisHour(date) {
  return isSameHour(date, constructNow(date));
}

// ../node_modules/date-fns/isThisISOWeek.mjs
function isThisISOWeek(date) {
  return isSameISOWeek(date, constructNow(date));
}

// ../node_modules/date-fns/isThisMinute.mjs
function isThisMinute(date) {
  return isSameMinute(date, constructNow(date));
}

// ../node_modules/date-fns/isThisMonth.mjs
function isThisMonth(date) {
  return isSameMonth(date, constructNow(date));
}

// ../node_modules/date-fns/isThisQuarter.mjs
function isThisQuarter(date) {
  return isSameQuarter(date, constructNow(date));
}

// ../node_modules/date-fns/isThisSecond.mjs
function isThisSecond(date) {
  return isSameSecond(date, constructNow(date));
}

// ../node_modules/date-fns/isThisWeek.mjs
function isThisWeek(date, options) {
  return isSameWeek(date, constructNow(date), options);
}

// ../node_modules/date-fns/isThisYear.mjs
function isThisYear(date) {
  return isSameYear(date, constructNow(date));
}

// ../node_modules/date-fns/isToday.mjs
function isToday(date) {
  return isSameDay(date, constructNow(date));
}

// ../node_modules/date-fns/isTomorrow.mjs
function isTomorrow(date) {
  return isSameDay(date, addDays(constructNow(date), 1));
}

// ../node_modules/date-fns/isYesterday.mjs
function isYesterday(date) {
  return isSameDay(date, subDays(constructNow(date), 1));
}

// ../node_modules/date-fns/setDefaultOptions.mjs
function setDefaultOptions2(options) {
  const result = {};
  const defaultOptions = getDefaultOptions();
  for (const property in defaultOptions) {
    if (Object.prototype.hasOwnProperty.call(defaultOptions, property)) {
      result[property] = defaultOptions[property];
    }
  }
  for (const property in options) {
    if (Object.prototype.hasOwnProperty.call(options, property)) {
      if (options[property] === void 0) {
        delete result[property];
      } else {
        result[property] = options[property];
      }
    }
  }
  setDefaultOptions(result);
}

// ../node_modules/date-fns/startOfToday.mjs
function startOfToday() {
  return startOfDay(Date.now());
}

// ../node_modules/date-fns/startOfTomorrow.mjs
function startOfTomorrow() {
  const now = /* @__PURE__ */ new Date();
  const year = now.getFullYear();
  const month = now.getMonth();
  const day = now.getDate();
  const date = /* @__PURE__ */ new Date(0);
  date.setFullYear(year, month, day + 1);
  date.setHours(0, 0, 0, 0);
  return date;
}

// ../node_modules/date-fns/startOfYesterday.mjs
function startOfYesterday() {
  const now = /* @__PURE__ */ new Date();
  const year = now.getFullYear();
  const month = now.getMonth();
  const day = now.getDate();
  const date = /* @__PURE__ */ new Date(0);
  date.setFullYear(year, month, day - 1);
  date.setHours(0, 0, 0, 0);
  return date;
}

export {
  constructNow,
  endOfToday,
  endOfTomorrow,
  endOfYesterday,
  formatDistanceToNow,
  formatDistanceToNowStrict,
  isFuture,
  isPast,
  isThisHour,
  isThisISOWeek,
  isThisMinute,
  isThisMonth,
  isThisQuarter,
  isThisSecond,
  isThisWeek,
  isThisYear,
  isToday,
  isTomorrow,
  isYesterday,
  setDefaultOptions2 as setDefaultOptions,
  startOfToday,
  startOfTomorrow,
  startOfYesterday
};
//# sourceMappingURL=chunk-VJXJVBFJ.js.map
